{"version":3,"file":"chunks/749.c7b0a0aa.js","mappings":"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","sources":["webpack:///../../node_modules/prismjs/themes/prism-tomorrow.css","webpack:///../../node_modules/inline-style-parser/index.js","webpack:///../../node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack:///../../node_modules/react/jsx-runtime.js","webpack:///../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack:///../../node_modules/style-loader/dist/runtime/insertBySelector.js","webpack:///../../node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack:///../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack:///../../node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack:///../../node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack:///../../node_modules/style-to-object/cjs/index.js","webpack:///../../node_modules/devlop/lib/default.js","webpack:///../../node_modules/hast-util-to-string/lib/index.js","webpack:///../../node_modules/estree-util-is-identifier-name/lib/index.js","webpack:///../../node_modules/hast-util-whitespace/lib/index.js","webpack:///../../node_modules/property-information/lib/hast-to-react.js","webpack:///../../node_modules/style-to-object/esm/index.mjs","webpack:///../../node_modules/hast-util-to-jsx-runtime/lib/index.js","webpack:///../../node_modules/rehype-react/lib/index.js","webpack:///../../node_modules/@ungap/structured-clone/esm/types.js","webpack:///../../node_modules/@ungap/structured-clone/esm/deserialize.js","webpack:///../../node_modules/@ungap/structured-clone/esm/serialize.js","webpack:///../../node_modules/@ungap/structured-clone/esm/index.js","webpack:///../../node_modules/micromark-util-sanitize-uri/node_modules/micromark-util-character/index.js","webpack:///../../node_modules/micromark-util-sanitize-uri/index.js","webpack:///../../node_modules/mdast-util-to-hast/lib/footer.js","webpack:///../../node_modules/mdast-util-to-hast/lib/revert.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack:///../../node_modules/trim-lines/index.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack:///../../node_modules/mdast-util-to-hast/lib/state.js","webpack:///../../node_modules/mdast-util-to-hast/lib/index.js","webpack:///../../node_modules/remark-rehype/lib/index.js","webpack:///../../node_modules/unist-util-position/lib/index.js","webpack:///../../node_modules/unist-util-stringify-position/lib/index.js","webpack:///../../node_modules/unist-util-visit/node_modules/unist-util-is/lib/index.js","webpack:///../../node_modules/unist-util-visit/node_modules/unist-util-visit-parents/lib/index.js","webpack:///../../node_modules/unist-util-visit/lib/index.js","webpack:///../../node_modules/vfile-message/lib/index.js","webpack:///../../node_modules/mdast-util-from-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack:///../../node_modules/micromark/node_modules/micromark-util-chunked/index.js","webpack:///../../node_modules/micromark/node_modules/micromark-util-subtokenize/index.js","webpack:///../../node_modules/micromark/node_modules/micromark-util-combine-extensions/index.js","webpack:///../../node_modules/micromark/node_modules/micromark-util-character/index.js","webpack:///../../node_modules/micromark/node_modules/micromark-factory-space/index.js","webpack:///../../node_modules/micromark/lib/initialize/content.js","webpack:///../../node_modules/micromark/lib/initialize/document.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/blank-line.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/content.js","webpack:///../../node_modules/micromark/lib/initialize/flow.js","webpack:///../../node_modules/micromark/lib/initialize/text.js","webpack:///../../node_modules/micromark/node_modules/micromark-util-resolve-all/index.js","webpack:///../../node_modules/micromark/lib/create-tokenizer.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/list.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/block-quote.js","webpack:///../../node_modules/micromark/node_modules/micromark-factory-destination/index.js","webpack:///../../node_modules/micromark/node_modules/micromark-factory-label/index.js","webpack:///../../node_modules/micromark/node_modules/micromark-factory-title/index.js","webpack:///../../node_modules/micromark/node_modules/micromark-factory-whitespace/index.js","webpack:///../../node_modules/micromark/node_modules/micromark-util-normalize-identifier/index.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/definition.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/code-indented.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack:///../../node_modules/micromark/node_modules/micromark-util-html-tag-name/index.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/html-flow.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/character-reference.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/character-escape.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/line-ending.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/label-end.js","webpack:///../../node_modules/micromark/node_modules/micromark-util-classify-character/index.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/attention.js","webpack:///../../node_modules/micromark/lib/constructs.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/autolink.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/html-text.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack:///../../node_modules/micromark/node_modules/micromark-core-commonmark/lib/code-text.js","webpack:///../../node_modules/micromark/lib/preprocess.js","webpack:///../../node_modules/mdast-util-from-markdown/node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack:///../../node_modules/mdast-util-from-markdown/node_modules/micromark-util-decode-string/index.js","webpack:///../../node_modules/mdast-util-from-markdown/node_modules/micromark-util-normalize-identifier/index.js","webpack:///../../node_modules/mdast-util-from-markdown/lib/index.js","webpack:///../../node_modules/micromark/lib/postprocess.js","webpack:///../../node_modules/micromark/lib/parse.js","webpack:///../../shared/markdown/node_modules/remark-parse/lib/index.js","webpack:///../../shared/markdown/node_modules/is-plain-obj/index.js","webpack:///../../node_modules/vfile/lib/minpath.browser.js","webpack:///../../node_modules/vfile/lib/minproc.browser.js","webpack:///../../node_modules/vfile/lib/minurl.shared.js","webpack:///../../node_modules/vfile/lib/index.js","webpack:///../../node_modules/vfile/lib/minurl.browser.js","webpack:///../../shared/markdown/node_modules/unified/lib/callable-instance.js","webpack:///../../shared/markdown/node_modules/unified/lib/index.js"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___ from \"../../css-loader/dist/runtime/noSourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `code[class*=\"language-\"],\npre[class*=\"language-\"]{color:#ccc;background:none;font-family:Consolas,Monaco,'Andale Mono','Ubuntu Mono',monospace;font-size:1em;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;line-height:1.5;-moz-tab-size:4;tab-size:4;-webkit-hyphens:none;hyphens:none}pre[class*=\"language-\"]{padding:1em;margin:.5em 0;overflow:auto}:not(pre) > code[class*=\"language-\"],\npre[class*=\"language-\"]{background:#2d2d2d}:not(pre) > code[class*=\"language-\"]{padding:.1em;border-radius:.3em;white-space:normal}.token.comment,\n.token.block-comment,\n.token.prolog,\n.token.doctype,\n.token.cdata{color:#999}.token.punctuation{color:#ccc}.token.tag,\n.token.attr-name,\n.token.namespace,\n.token.deleted{color:#e2777a}.token.function-name{color:#6196cc}.token.boolean,\n.token.number,\n.token.function{color:#f08d49}.token.property,\n.token.class-name,\n.token.constant,\n.token.symbol{color:#f8c555}.token.selector,\n.token.important,\n.token.atrule,\n.token.keyword,\n.token.builtin{color:#cc99cd}.token.string,\n.token.char,\n.token.attr-value,\n.token.regex,\n.token.variable{color:#7ec699}.token.operator,\n.token.entity,\n.token.url{color:#67cdcc}.token.important,\n.token.bold{font-weight:bold}.token.italic{font-style:italic}.token.entity{cursor:help}.token.inserted{color:green}`, \"\"]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___.toString();\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nfunction StyleToObject(style, iterator) {\n    var styleObject = null;\n    if (!style || typeof style !== 'string') {\n        return styleObject;\n    }\n    var declarations = (0, inline_style_parser_1.default)(style);\n    var hasIterator = typeof iterator === 'function';\n    declarations.forEach(function (declaration) {\n        if (declaration.type !== 'declaration') {\n            return;\n        }\n        var property = declaration.property, value = declaration.value;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        }\n        else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n}\nexports.default = StyleToObject;\n//# sourceMappingURL=index.js.map","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n */\n\n/**\n * Get the plain-text value of a hast node.\n *\n * @param {Nodes} node\n *   Node to serialize.\n * @returns {string}\n *   Serialized node.\n */\nexport function toString(node) {\n  // “The concatenation of data of all the Text node descendants of the context\n  // object, in tree order.”\n  if ('children' in node) {\n    return all(node)\n  }\n\n  // “Context object’s data.”\n  return 'value' in node ? node.value : ''\n}\n\n/**\n * @param {Nodes} node\n *   Node.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node) {\n  if (node.type === 'text') {\n    return node.value\n  }\n\n  return 'children' in node ? all(node) : ''\n}\n\n/**\n * @param {Parents} node\n *   Node.\n * @returns {string}\n *   Serialized node.\n */\nfunction all(node) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n\n  while (++index < node.children.length) {\n    result[index] = one(node.children[index])\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","// Register MDX nodes in mdast:\n/// <reference types=\"mdast-util-mdx-expression\" />\n/// <reference types=\"mdast-util-mdx-jsx\" />\n/// <reference types=\"mdast-util-mdxjs-esm\" />\n\n/**\n * @typedef {import('estree').Identifier} Identifier\n * @typedef {import('estree').Literal} Literal\n * @typedef {import('estree').MemberExpression} MemberExpression\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement\n *\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Position} Position\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @callback CreateEvaluater\n *   Create an evaluator that turns ESTree ASTs from embedded MDX into values.\n * @returns {Evaluater}\n *   Evaluater.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @callback EvaluateExpression\n *   Turn an MDX expression into a value.\n * @param {Expression} expression\n *   ESTree expression.\n * @returns {unknown}\n *   Result of expression.\n *\n * @callback EvaluateProgram\n *   Turn an MDX program (export/import statements) into a value.\n * @param {Program} expression\n *   ESTree program.\n * @returns {unknown}\n *   Result of program;\n *   should likely be `undefined` as ESM changes the scope but doesn’t yield\n *   something.\n *\n * @typedef Evaluater\n *   Evaluator that turns ESTree ASTs from embedded MDX into values.\n * @property {EvaluateExpression} evaluateExpression\n *   Evaluate an expression.\n * @property {EvaluateProgram} evaluateProgram\n *   Evaluate a program.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | MdxJsxFlowElement | MdxJsxTextElement | undefined, [prop: string]: Array<Child> | Child | Element | MdxJsxFlowElement | MdxJsxTextElement | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {CreateEvaluater | null | undefined} [createEvaluater]\n *   Create an evaluator that turns ESTree ASTs into values (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {Evaluater | undefined} evaluater\n *   Evaluator that turns ESTree ASTs into values.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsm} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElement | MdxJsxTextElement} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    // @ts-expect-error: `style-to-object` types are broken.\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Options} Options\n * @typedef {import('unified').Compiler<Root, JSX.Element>} Compiler\n * @typedef {import('unified').Processor<undefined, undefined, undefined, Root, JSX.Element>} Processor\n */\n\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\n\n/**\n * Turn HTML into preact, react, solid, svelte, vue, etc.\n *\n * @param {Options} options\n *   Configuration (required).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function rehypeReact(options) {\n  // @ts-expect-error: TypeScript doesn’t handle `this` well.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n\n  self.compiler = compiler\n\n  /** @type {Compiler} */\n  function compiler(tree, file) {\n    return toJsxRuntime(tree, {filePath: file.path, ...options})\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > 👉 **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} ToHastOptions\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(options || destination)})\n    )\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ // eslint-disable-next-line complexity\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n  return compiler(options)(\n    postprocess(\n      parse(options).document().write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      switch (event[1].type) {\n        case 'listUnordered':\n        case 'listOrdered':\n        case 'blockQuote': {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n          atMarker = undefined\n          break\n        }\n        case 'lineEndingBlank': {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n            atMarker = undefined\n          }\n          break\n        }\n        case 'linePrefix':\n        case 'listItemValue':\n        case 'listItemMarker':\n        case 'listItemPrefix':\n        case 'listItemPrefixWhitespace': {\n          // Empty.\n\n          break\n        }\n        default: {\n          atMarker = undefined\n        }\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n    let tail = siblings[siblings.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    this.data.inReference = true\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","toString","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","exports","style","options","TypeError","lineno","column","updatePosition","lines","match","length","i","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","prototype","content","errorsList","error","msg","err","Error","reason","filename","silent","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","value","decl","decls","declarations","f","k","Symbol","for","l","Object","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","ref","__self","__source","q","a","g","b","d","e","h","call","defaultProps","$$typeof","props","_owner","current","Fragment","jsx","jsxs","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","list","idCountMap","identifiers","item","base","count","concat","indexByIdentifier","obj","css","media","sourceMap","supports","layer","references","updater","addElementStyle","byIndex","splice","api","domAPI","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","insert","target","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","getTarget","appendChild","element","createElement","setAttributes","attributes","styleElement","nonce","setAttribute","insertStyleElement","needLayer","btoa","unescape","encodeURIComponent","JSON","stringify","styleTagTransform","apply","parentNode","removeChild","removeStyleElement","styleSheet","cssText","firstChild","createTextNode","__importDefault","mod","__esModule","defineProperty","inline_style_parser_1","iterator","styleObject","default","hasIterator","forEach","ok","all","one","children","join","nameRe","nameReJsx","emptyOptions","name","test","empty","hastToReact","classId","dataType","itemId","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","typeOf","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlnsXLink","own","emptyMap","Map","cap","dashSomething","tableElements","Set","tableCellElement","docs","state","parentSchema","schema","tagName","toLowerCase","space","ancestors","findComponentFromName","alignValue","properties","createProperty","tableCellAlignToStyle","has","stylePropertyNameCase","createElementProps","createChildren","filter","child","thing","addNode","addChildren","pop","create","data","estree","evaluater","expression","body","evaluateExpression","crashEstree","mdxExpression","attribute","objectExpression","assign","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","_","passNode","countsByName","passKeys","undefined","get","set","info","find","Number","isNaN","Array","isArray","commaSeparated","toCamel","ignoreInvalidStyle","cause","message","ruleId","file","filePath","url","parseStyle","String","domCasing","cssCasing","from","transformStyleToCssCasing","transformStylesToCssCasing","elementAttributeNameCase","allowExpression","includes","split","object","computed","Boolean","optional","components","place","to","toDash","$1","toUpperCase","$0","rehypeReact","compiler","tree","development","jsxDEV","isStaticChildren","point","columnNumber","fileName","lineNumber","developmentCreate","fn","createEvaluater","toJsxRuntime","path","env","self","globalThis","deserialize","serialized","$","as","out","unpair","arr","Date","flags","RegExp","map","add","BigInt","deserializer","EMPTY","keys","asString","shouldSkip","TYPE","serialize","json","lossy","strict","pair","entry","valueOf","toJSON","entries","toISOString","serializer","structuredClone","any","asciiAlphanumeric","regexCheck","regex","code","fromCharCode","normalizeUri","skip","charCodeAt","next","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","referenceType","suffix","label","alt","contents","unshift","tail","listItemLoose","spread","tab","trimLines","search","last","trimLine","startIndex","endIndex","codePointAt","blockquote","wrap","patch","applyData","break","lang","className","meta","delete","emphasis","footnoteReference","clobberPrefix","safeId","footnoteOrder","indexOf","counter","reuseCounter","footnoteCounts","link","href","dataFootnoteRef","ariaDescribedBy","sup","heading","depth","html","allowDangerousHtml","imageReference","def","definitionById","src","title","image","inlineCode","text","linkReference","listItem","parent","results","loose","listLoose","checked","paragraph","disabled","ordered","strong","table","rows","firstRow","shift","tableContent","tableCell","tableRow","siblings","align","cellIndex","cells","cell","thematicBreak","toml","ignore","yaml","definition","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","settings","footnoteById","handlers","values","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","remarkRehype","destination","async","hastTree","run","pointEnd","pointStart","offset","stringifyPosition","convert","castFactory","tests","checks","parameters","anyFactory","check","checkAsRecord","nodeAsRecord","propsFactory","testFunction","looksLikeANode","CONTINUE","EXIT","SKIP","visit","testOrVisitor","visitorOrReverse","maybeReverse","reverse","visitor","is","step","factory","parents","subresult","grandparents","toResult","nodeAsParent","visitParents","VFileMessage","constructor","causeOrReason","optionsOrParentOrPlace","origin","super","legacyCause","fatal","stack","actual","expected","note","includeImageAlt","includeHtml","items","chunkStart","subtokenize","events","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","adjust","breaks","sliceStream","defineSkip","_gfmTasklistFirstContentOfListItem","write","syntaxExtension","extension","hook","left","right","constructs","existing","before","asciiAlpha","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","factorySpace","effects","max","limit","POSITIVE_INFINITY","size","enter","prefix","consume","exit","tokenize","contentStart","attempt","contentInitial","lineStart","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","nok","disable","null","blankLine","after","partial","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","chunkIndex","go","main","expectedCode","startBufferIndex","endBufferIndex","view","sliceChunks","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","contentBefore","beforeContentChunk","contentChunk","characterReference","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","between","tailExitIndex","headEnterIndex","decodeNumericCharacterReference","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","autolink","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeText","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlowData","htmlText","htmlTextData","_spread","listItemValue","expectingFirstListItemValue","listOrdered","listUnordered","reference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","closer","atxHeadingSequence","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","characterReferenceType","resume","flowCodeInside","codeFencedFence","onexithardbreak","inReference","fragment","labelText","ancestor","decodeString","atHardBreak","setextHeadingSlurpLineEnding","resource","setextHeadingLineSequence","setextHeadingText","configure","mdastExtensions","tokenStack","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","and","errorHandler","onExitError","postprocess","extensions","combineExtensions","parse","atCarriageReturn","endPosition","TextDecoder","lastIndex","Math","ceil","preprocess","combined","remarkParse","doc","isPlainObject","getPrototypeOf","toStringTag","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","unmatchedSlash","startPart","startDot","preDotState","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","normalize","proc","isUrl","fileUrlOrPath","protocol","auth","order","VFile","isUint8Array","cwd","history","messages","stored","basename","assertNonEmpty","assertPart","dirname","extname","stem","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","urlToPath","fail","part","CallableInstance","proto","func","arguments","setPrototypeOf","names","getOwnPropertyNames","descriptor","getOwnPropertyDescriptor","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","trough","copy","attacher","extend","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","done","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","bail","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","rest","currentPrimary","unified","asyncName","looksLikeAVFile"],"sourceRoot":""}