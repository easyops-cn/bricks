{"version":3,"file":"chunks/4145.3dc192c4.js","mappings":"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","sources":["webpack:///./src/chat-view/index.tsx","webpack:///./src/chat-agent/index.tsx","webpack:///./src/chat-agent/styles.shadow.css"],"sourcesContent":["import React, { forwardRef, useEffect } from \"react\";\nimport { EventEmitter, createDecorators } from \"@next-core/element\";\nimport { ReactNextElement } from \"@next-core/react-element\";\nimport {\n  ChatViewContext,\n  QuickAnswerConfig,\n  snippet,\n} from \"./ChatViewContext.js\";\nimport { MessageList } from \"./components/MessageList.js\";\nimport { useChatViewInfo } from \"./hooks/useChatViewInfo.js\";\nimport { SessionList } from \"./components/SessionList.js\";\nimport { SearchInput, SearchInputRef } from \"./components/SearchInput.js\";\nimport \"@next-core/theme\";\nimport \"./host-context.css\";\nimport \"./index.css\";\nimport { commandBrickConf } from \"./ChatViewContext\";\nimport { UseBrickConf } from \"@next-core/types\";\nimport { ChatBody } from \"./ChatService.js\";\n\nconst { defineElement, property, method, event } = createDecorators();\n\ntype InputToolbarBrick = { useBrick: UseBrickConf };\n\nexport interface ChatViewProps {\n  agentId: string;\n  robotId: string;\n  sessionId?: string;\n  readonly?: boolean;\n  showAvatar?: boolean;\n  showSessionList?: boolean;\n  showLike?: boolean;\n  showShare?: boolean;\n  useSpiltWord?: boolean;\n  quickAnswerConfig?: QuickAnswerConfig;\n  snippetList?: snippet[];\n  enterInterval?: number;\n  debug?: boolean;\n  commandBricks?: commandBrickConf;\n  answerLanguage?: string;\n  inputToolbarBrick?: InputToolbarBrick;\n  showToolCalls?: boolean;\n  onSessionIdChange: (sessionId: string | undefined) => void;\n  onRobotIdChange: (robotId: string | undefined) => void;\n  onQaFinish: (sessionId: string | undefined) => void;\n}\n\nexport function LegacyChatViewComponent(\n  {\n    agentId,\n    robotId,\n    sessionId,\n    showAvatar,\n    showSessionList = true,\n    readonly = false,\n    showLike = true,\n    showShare = true,\n    quickAnswerConfig,\n    snippetList,\n    enterInterval,\n    debug = false,\n    useSpiltWord = false,\n    commandBricks,\n    answerLanguage,\n    inputToolbarBrick,\n    showToolCalls,\n    onSessionIdChange,\n    onRobotIdChange,\n    onQaFinish,\n  }: ChatViewProps,\n  ref: React.Ref<SearchInputRef>\n) {\n  const {\n    sessionEnd,\n    sessionLoading,\n    activeSessionId,\n    msgEnd,\n    msgLoading,\n    msgList,\n    sessionList,\n    loading,\n    chatting,\n    searchStr,\n    toolNames,\n    setAgent,\n    handleIsLike,\n    handleChat,\n    stopChat,\n    createSession,\n    deleteSession,\n    updateSession,\n    checkSession,\n    setSearchStr,\n    querySessionHistory,\n  } = useChatViewInfo({\n    agentId,\n    robotId,\n    sessionId,\n    enterInterval,\n    debug,\n    answerLanguage,\n    useSpiltWord,\n    showToolCalls,\n  });\n\n  useEffect(() => {\n    if (activeSessionId) {\n      onSessionIdChange(activeSessionId);\n      onRobotIdChange(\n        sessionList.find((item) => item.conversationId === activeSessionId)\n          ?.robotId\n      );\n    }\n  }, [activeSessionId, onRobotIdChange, onSessionIdChange, sessionList]);\n\n  useEffect(() => {\n    if (!chatting && activeSessionId) {\n      // 当此时存在activeSessionId，且chatting是从true变为false时触发，不需要加入activeSessionId的依赖判断\n      onQaFinish(activeSessionId);\n    }\n  }, [chatting]);\n\n  return (\n    <ChatViewContext.Provider\n      value={{\n        sessionEnd,\n        sessionLoading,\n        activeSessionId,\n        sessionList,\n        msgEnd,\n        msgLoading,\n        msgList,\n        chatting,\n        loading,\n        searchStr,\n        showLike,\n        showShare,\n        readonly,\n        quickAnswerConfig,\n        snippetList,\n        commandBricks,\n        showToolCalls,\n        toolNames,\n        setAgent,\n        handleIsLike,\n        handleChat,\n        stopChat,\n        createSession,\n        deleteSession,\n        updateSession,\n        checkSession,\n        setSearchStr,\n        querySessionHistory,\n      }}\n    >\n      <div className=\"chat-view-container\">\n        {showSessionList && (\n          <div className=\"chat-view-selector\">\n            <SessionList />\n          </div>\n        )}\n        <div className=\"chat-view-content\">\n          <MessageList showAvatar={showAvatar} />\n          {!readonly && (\n            <SearchInput inputToolbarBrick={inputToolbarBrick} ref={ref} />\n          )}\n        </div>\n      </div>\n    </ChatViewContext.Provider>\n  );\n}\n\nexport const ChatViewComponent = forwardRef(LegacyChatViewComponent);\n\n/**\n * AI 对话终端\n */\nexport\n@defineElement(\"ai.chat-view\", {\n  // shadow 模式下，会导致 useBrick 样式丢失\n  // 如：commandBricks 配置 cmdb-instances.instance-list\n  shadowOptions: false,\n})\nclass ChatView extends ReactNextElement {\n  @property()\n  accessor sessionId: string | undefined;\n\n  /**\n   * 智能体id\n   */\n  @property()\n  accessor agentId!: string;\n\n  /**\n   * 机器人id\n   */\n  @property()\n  accessor robotId!: string;\n\n  /**\n   * 指定智能体回答代码时所使用的语言\n   */\n  @property()\n  accessor answerLanguage: string | undefined;\n\n  /**\n   * 是否为debug模式\n   */\n  @property({\n    type: Boolean,\n  })\n  accessor debug: boolean | undefined;\n\n  /**\n   * 是否展示对话用户头像\n   * @default true\n   */\n  @property({\n    type: Boolean,\n  })\n  accessor showAvatar: boolean | undefined;\n\n  /**\n   * 是否展示历史会话信息\n   * @default true\n   */\n  @property({\n    type: Boolean,\n  })\n  accessor showSessionList: boolean | undefined;\n\n  /**\n   * 只读模式\n   */\n  @property({\n    type: Boolean,\n  })\n  accessor readonly: boolean | undefined;\n\n  /**\n   * 是否展示点赞能力\n   * @default true\n   */\n  @property({\n    type: Boolean,\n  })\n  accessor showLike: boolean | undefined;\n\n  /**\n   * 是否展示分享能力\n   * @default true\n   */\n  @property({\n    type: Boolean,\n  })\n  accessor showShare: boolean | undefined;\n\n  /**\n   * 是否开启前端分词\n   * @default false\n   */\n  @property({\n    type: Boolean,\n  })\n  accessor useSpiltWord: boolean | undefined;\n\n  /**\n   * 输入间隔，设置为 -1 使用新的方式对大段消息进行模拟打字效果节流输出\n   *\n   * @default 50\n   */\n  @property({\n    type: Number,\n  })\n  accessor enterInterval: number | undefined;\n\n  /**\n   * 快速入口列表\n   */\n  @property({\n    attribute: false,\n  })\n  accessor quickAnswerConfig: QuickAnswerConfig | undefined;\n\n  /**\n   * 常用语列表\n   */\n  @property({\n    attribute: false,\n  })\n  accessor snippetList: snippet[] | undefined;\n\n  /**\n   * 自定义语言配置\n   */\n  @property({\n    attribute: false,\n  })\n  accessor commandBricks: commandBrickConf | undefined;\n\n  /**\n   * 输入框工具栏 useBrick\n   */\n  @property({\n    attribute: false,\n  })\n  accessor inputToolbarBrick: InputToolbarBrick | undefined;\n\n  /**\n   * 是否显示工具调用过程\n   */\n  @property({ type: Boolean })\n  accessor showToolCalls: boolean | undefined;\n\n  #ref = React.createRef<SearchInputRef>();\n\n  @event({ type: \"sessionId.change\" })\n  accessor #sessionIdChange!: EventEmitter<string | undefined>;\n\n  #handleSessionIdChange = (activeSessionId: string | undefined) => {\n    this.#sessionIdChange.emit(activeSessionId);\n  };\n\n  @event({ type: \"robotId.change\" })\n  accessor #robotIdChange!: EventEmitter<string | undefined>;\n\n  #handleRobotIdChange = (robotId: string | undefined) => {\n    this.#robotIdChange.emit(robotId);\n  };\n\n  @event({ type: \"qa.finish\" })\n  accessor #qaFinish!: EventEmitter<string | undefined>;\n\n  #handleQaFinish = (activeSessionId: string | undefined) => {\n    this.#qaFinish.emit(activeSessionId);\n  };\n\n  /**\n   *\n   * @description 调用方法进行提问\n   */\n  @method()\n  insertQuestion(args: { value: string }): void {\n    const { value } = args;\n    if (!value) return;\n    this.#ref.current?.handleInsertQuestion(value);\n  }\n\n  /**\n   * @description 外部提问\n   */\n  @method()\n  sendMsg(msg: string | ChatBody): void {\n    this.#ref.current?.sendMsg(msg);\n  }\n\n  render() {\n    return (\n      <ChatViewComponent\n        agentId={this.agentId}\n        robotId={this.robotId}\n        debug={this.debug}\n        sessionId={this.sessionId}\n        readonly={this.readonly}\n        showAvatar={this.showAvatar}\n        showSessionList={this.showSessionList}\n        showLike={this.showLike}\n        showShare={this.showShare}\n        useSpiltWord={this.useSpiltWord}\n        quickAnswerConfig={this.quickAnswerConfig}\n        snippetList={this.snippetList}\n        enterInterval={this.enterInterval}\n        commandBricks={this.commandBricks}\n        answerLanguage={this.answerLanguage}\n        inputToolbarBrick={this.inputToolbarBrick}\n        showToolCalls={this.showToolCalls}\n        onSessionIdChange={this.#handleSessionIdChange}\n        onRobotIdChange={this.#handleRobotIdChange}\n        onQaFinish={this.#handleQaFinish}\n        ref={this.#ref}\n      />\n    );\n  }\n}\n","import React, {\n  createRef,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\";\nimport { createDecorators, type EventEmitter } from \"@next-core/element\";\nimport { ReactNextElement } from \"@next-core/react-element\";\nimport { getBasePath } from \"@next-core/runtime\";\nimport { createSSEStream, type Options } from \"@next-core/utils/general\";\nimport styleText from \"./styles.shadow.css\";\n\nconst { defineElement, property, event, method } = createDecorators();\n\nexport interface ChatAgentProps {\n  agentId?: string;\n  robotId?: string;\n  conversationId?: string;\n  alwaysUseNewConversation?: boolean;\n}\n\nexport interface Message extends BaseMessage {\n  key: number;\n  partial?: boolean;\n  failed?: boolean;\n}\n\nexport interface BaseMessage {\n  role: \"user\" | \"assistant\";\n  content: string;\n}\n\nexport interface MessageChunk {\n  delta: BaseMessage;\n  conversationId?: string;\n  key: number;\n  partial?: boolean;\n}\n\nexport interface LowLevelMessageChunk {\n  choices: LowLevelChoice[];\n}\n\nexport interface LowLevelChoice {\n  delta: {\n    role: \"assistant\";\n    content?: string;\n  };\n}\n\nexport const ChatAgentComponent = forwardRef(LegacyChatAgentComponent);\n\n/**\n * 用于与 AI 机器人进行对话的代理构件，处理通信并整合消息。\n */\nexport\n@defineElement(\"ai.chat-agent\", {\n  styleTexts: [styleText],\n})\nclass ChatAgent extends ReactNextElement implements ChatAgentProps {\n  @property()\n  accessor agentId: string | undefined;\n\n  @property()\n  accessor robotId: string | undefined;\n\n  @property()\n  accessor conversationId: string | undefined;\n\n  @property()\n  accessor alwaysUseNewConversation: boolean | undefined;\n\n  /**\n   * 发送消息到默认的聊天 API\n   */\n  @method()\n  postMessage(content: string) {\n    return this.#ref.current?.postMessage(content);\n  }\n\n  /**\n   * 发送聊天请求到指定的 URL\n   */\n  @method()\n  sendRequest(\n    leadingMessages: string | BaseMessage[],\n    url: string,\n    options: Options<MessageChunk>\n  ) {\n    return this.#ref.current?.sendRequest(leadingMessages, url, options);\n  }\n\n  /**\n   * 发送底层聊天请求到指定的 URL。接口的请求和响应的数据结构和 OpenAI 聊天接口一致。\n   */\n  @method()\n  lowLevelSendRequest(\n    leadingMessages: string | BaseMessage[],\n    url: string,\n    options: Options<MessageChunk>\n  ) {\n    return this.#ref.current?.lowLevelSendRequest(\n      leadingMessages,\n      url,\n      options\n    );\n  }\n\n  @method()\n  newConversation() {\n    this.#ref.current?.newConversation();\n  }\n\n  // @event({ type: \"messageChunk.push\" })\n  // accessor #messageChunkPushEvent!: EventEmitter<MessageChunk>;\n\n  // #handleMessageChunkPush = (msg: MessageChunk) => {\n  //   this.#messageChunkPushEvent.emit(msg);\n  // };\n\n  @event({ type: \"messages.update\" })\n  accessor #messagesUpdate!: EventEmitter<Message[]>;\n\n  #handleMessagesUpdate = (messages: Message[]) => {\n    this.#messagesUpdate.emit(messages);\n  };\n\n  @event({ type: \"busy.change\" })\n  accessor #busyChangeEvent!: EventEmitter<boolean>;\n\n  #handleBusyChange = (busy: boolean) => {\n    this.#busyChangeEvent.emit(busy);\n  };\n\n  @event({ type: \"conversationId.change\" })\n  accessor #conversationIdChangeEvent!: EventEmitter<string | null>;\n\n  #handleConversationIdChange = (conversationId: string | null) => {\n    this.#conversationIdChangeEvent.emit(conversationId);\n  };\n\n  #ref = createRef<ChatAgentRef>();\n\n  render() {\n    return (\n      <ChatAgentComponent\n        ref={this.#ref}\n        agentId={this.agentId}\n        robotId={this.robotId}\n        conversationId={this.conversationId}\n        alwaysUseNewConversation={this.alwaysUseNewConversation}\n        // onMessageChunkPush={this.#handleMessageChunkPush}\n        onMessagesUpdate={this.#handleMessagesUpdate}\n        onBusyChange={this.#handleBusyChange}\n        onConversationIdChange={this.#handleConversationIdChange}\n      />\n    );\n  }\n}\n\nexport interface ChatAgentComponentProps extends ChatAgentProps {\n  onMessageChunkPush?(msg: MessageChunk): void;\n  onMessagesUpdate?(messages: Message[]): void;\n  onBusyChange?(busy: boolean): void;\n  onConversationIdChange?(conversationId: string | null): void;\n}\n\nexport interface ChatAgentRef {\n  postMessage(content: string): Promise<string | null>;\n  sendRequest(\n    leadingMessages: string | BaseMessage[],\n    url: string,\n    options: Options<MessageChunk>\n  ): Promise<string | null>;\n  lowLevelSendRequest(\n    leadingMessages: string | BaseMessage[],\n    url: string,\n    options: Options<MessageChunk>\n  ): Promise<string | null>;\n  newConversation(): void;\n}\n\nexport function LegacyChatAgentComponent(\n  {\n    agentId,\n    robotId,\n    conversationId: propConversationId,\n    alwaysUseNewConversation,\n    onMessageChunkPush,\n    onMessagesUpdate,\n    onBusyChange,\n    onConversationIdChange,\n  }: ChatAgentComponentProps,\n  ref: React.Ref<ChatAgentRef>\n) {\n  const didMountRef = useRef(false);\n  const chatIdRef = useRef(1);\n  const busyRef = useRef(false);\n  const [conversationId, setConversationId] = useState<string | null>(null);\n\n  useEffect(() => {\n    setConversationId(propConversationId ?? null);\n  }, [propConversationId]);\n\n  useEffect(() => {\n    didMountRef.current && onConversationIdChange?.(conversationId);\n  }, [conversationId, onConversationIdChange]);\n\n  const counterRef = useRef(0);\n  const getMessageChunkKey = useCallback(() => counterRef.current++, []);\n\n  const [fullMessages, setFullMessages] = useState<Message[]>([]);\n\n  const pushPartialMessage = useCallback(\n    (chunk: MessageChunk) => {\n      onMessageChunkPush?.(chunk);\n      setFullMessages((prev) => {\n        const last = prev[prev.length - 1];\n        if (last && last.key === chunk.key) {\n          last.content += chunk.delta.content;\n          return [...prev];\n        }\n        if (last?.partial) {\n          last.partial = false;\n        }\n        return [\n          ...prev,\n          { ...chunk.delta, key: chunk.key, partial: chunk.partial },\n        ];\n      });\n    },\n    [onMessageChunkPush]\n  );\n\n  const legacySendRequest = useCallback(\n    async (\n      isLowLevel: boolean,\n      leadingMessages: string | BaseMessage[],\n      url: string,\n      options: Options<MessageChunk | LowLevelMessageChunk>\n    ) => {\n      // Use ref instead of state to handle sync sequential calls.\n      if (busyRef.current) {\n        return null;\n      }\n      if (alwaysUseNewConversation || isLowLevel) {\n        setFullMessages((prev) => (prev.length === 0 ? prev : []));\n      }\n      const thisChatId = chatIdRef.current;\n      let newConversationError: Error | undefined;\n      const checkNewConversation = async () => {\n        if (thisChatId !== chatIdRef.current) {\n          // istanbul ignore else: should never happen\n          if (!newConversationError) {\n            newConversationError = new Error(\"New conversation started\");\n          }\n          throw newConversationError;\n        }\n      };\n\n      const userKey = getMessageChunkKey();\n      const assistantKey = getMessageChunkKey();\n      let currentConversationId =\n        alwaysUseNewConversation || isLowLevel ? null : conversationId;\n\n      onBusyChange?.((busyRef.current = true));\n\n      try {\n        if (Array.isArray(leadingMessages)) {\n          for (const msg of leadingMessages) {\n            const isAssistant = msg.role === \"assistant\";\n            if (isAssistant || msg.role === \"user\") {\n              pushPartialMessage?.({\n                key: isAssistant ? assistantKey : userKey,\n                delta: {\n                  role: msg.role,\n                  content: msg.content,\n                },\n              });\n            }\n          }\n        } else {\n          pushPartialMessage?.({\n            key: userKey,\n            delta: {\n              content: leadingMessages,\n              role: \"user\",\n            },\n          });\n        }\n        const request = createSSEStream<MessageChunk | LowLevelMessageChunk>(\n          new URL(url, `${location.origin}${getBasePath()}`).toString(),\n          options\n        );\n\n        // Put a placeholder assistant message to indicate that the assistant\n        // is processing if the request takes longer than one second.\n        await Promise.race([\n          request,\n          new Promise((resolve) => setTimeout(resolve, 1000)),\n        ]);\n\n        await checkNewConversation();\n\n        pushPartialMessage?.({\n          key: assistantKey,\n          delta: {\n            content: \"\",\n            role: \"assistant\",\n          },\n          partial: true,\n        });\n\n        const stream = await request;\n        for await (const value of stream) {\n          // istanbul ignore next\n          // if (process.env.NODE_ENV === \"development\") {\n          //   // eslint-disable-next-line no-console\n          //   console.log(\"stream iterated:\", value);\n          // }\n\n          await checkNewConversation();\n\n          if (isLowLevel) {\n            const delta = (value as LowLevelMessageChunk).choices?.[0]?.delta;\n            if (delta?.content) {\n              pushPartialMessage({\n                delta: {\n                  role: delta.role,\n                  content: delta.content,\n                },\n                key: assistantKey,\n                partial: true,\n              });\n            }\n          } else {\n            pushPartialMessage?.({\n              delta: (value as MessageChunk).delta,\n              key: assistantKey,\n              partial: true,\n            });\n            if (\n              !alwaysUseNewConversation &&\n              (value as MessageChunk).conversationId &&\n              !currentConversationId\n            ) {\n              setConversationId(\n                (currentConversationId = (value as MessageChunk)\n                  .conversationId!)\n              );\n            }\n          }\n        }\n\n        await checkNewConversation();\n\n        setFullMessages((prev) => {\n          const last = prev[prev.length - 1];\n          if (last?.partial) {\n            last.partial = false;\n          }\n          return [...prev];\n        });\n      } catch (error) {\n        if (error && error === newConversationError) {\n          throw error;\n        }\n\n        // eslint-disable-next-line no-console\n        console.error(\"stream failed:\", error);\n        await checkNewConversation();\n\n        setFullMessages((prev) => {\n          const last = prev[prev.length - 1];\n          let keep = prev;\n          if (last?.key === assistantKey) {\n            if (last.content) {\n              last.partial = false;\n              last.failed = true;\n            } else {\n              // Ignore the empty assistant message.\n              keep = prev.slice(0, -1);\n            }\n          }\n          return [\n            ...keep,\n            {\n              role: \"assistant\",\n              content: \"系统错误\",\n              key: getMessageChunkKey(),\n              failed: true,\n            },\n          ];\n        });\n      }\n\n      await checkNewConversation();\n\n      onBusyChange?.((busyRef.current = false));\n\n      return currentConversationId;\n    },\n    [\n      conversationId,\n      alwaysUseNewConversation,\n      getMessageChunkKey,\n      onBusyChange,\n      pushPartialMessage,\n    ]\n  );\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      lowLevelSendRequest: (...args) => legacySendRequest(true, ...args),\n      sendRequest: (...args) => legacySendRequest(false, ...args),\n      postMessage(content: string) {\n        return legacySendRequest(\n          false,\n          content,\n          \"api/gateway/easyops.api.aiops_chat.manage.LLMChatProxy@1.0.0/api/aiops_chat/v1/chat/completions\",\n          {\n            method: \"POST\",\n            body: JSON.stringify({\n              agentId,\n              robotId,\n              input: content,\n              stream: true,\n              conversationId:\n                alwaysUseNewConversation || conversationId === null\n                  ? undefined\n                  : conversationId,\n            }),\n            headers: {\n              \"giraffe-contract-name\":\n                \"easyops.api.aiops_chat.manage.LLMChatProxy\",\n            },\n          }\n        );\n      },\n      newConversation() {\n        chatIdRef.current++;\n        setConversationId(null);\n        setFullMessages((prev) => (prev.length === 0 ? prev : []));\n        if (busyRef.current) {\n          onBusyChange?.((busyRef.current = false));\n        }\n      },\n    }),\n    [\n      legacySendRequest,\n      agentId,\n      robotId,\n      alwaysUseNewConversation,\n      conversationId,\n      onBusyChange,\n    ]\n  );\n\n  useEffect(() => {\n    didMountRef.current && onMessagesUpdate?.(fullMessages);\n  }, [fullMessages, onMessagesUpdate]);\n\n  useEffect(() => {\n    didMountRef.current = true;\n  }, []);\n\n  return null;\n}\n","// Imports\nimport ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/noSourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `:host{display:none}`, \"\"]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___.toString();\n"],"names":["defineElement","property","method","event","createDecorators","LegacyChatViewComponent","_ref","ref","agentId","robotId","sessionId","showAvatar","showSessionList","readonly","showLike","showShare","quickAnswerConfig","snippetList","enterInterval","debug","useSpiltWord","commandBricks","answerLanguage","inputToolbarBrick","showToolCalls","onSessionIdChange","onRobotIdChange","onQaFinish","sessionEnd","sessionLoading","activeSessionId","msgEnd","msgLoading","msgList","sessionList","loading","chatting","searchStr","toolNames","setAgent","handleIsLike","handleChat","stopChat","createSession","deleteSession","updateSession","checkSession","setSearchStr","querySessionHistory","useChatViewInfo","useEffect","_sessionList$find","find","item","conversationId","React","ChatViewContext","Provider","value","className","SessionList","MessageList","SearchInput","ChatViewComponent","forwardRef","_ChatView","_A","WeakMap","_B","_C","_D","_E","_F","_G","_H","_I","_J","_K","_L","_M","_N","_O","_P","_Q","_ref2","_R","_ChatView_brand","WeakSet","_handleSessionIdChange","_S","_handleRobotIdChange","_T","_handleQaFinish","ChatView","ReactNextElement","constructor","arguments","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_initProto","_init_sessionId","_init_extra_sessionId","_init_agentId","_init_extra_agentId","_init_robotId","_init_extra_robotId","_init_answerLanguage","_init_extra_answerLanguage","_init_debug","_init_extra_debug","_init_showAvatar","_init_extra_showAvatar","_init_showSessionList","_init_extra_showSessionList","_init_readonly","_init_extra_readonly","_init_showLike","_init_extra_showLike","_init_showShare","_init_extra_showShare","_init_useSpiltWord","_init_extra_useSpiltWord","_init_enterInterval","_init_extra_enterInterval","_init_quickAnswerConfig","_init_extra_quickAnswerConfig","_init_snippetList","_init_extra_snippetList","_init_commandBricks","_init_extra_commandBricks","_init_inputToolbarBrick","_init_extra_inputToolbarBrick","_init_showToolCalls","_init_extra_showToolCalls","_init_sessionIdChange","_init_extra_sessionIdChange","_classPrivateGetter","this","_get_sessionIdChange","emit","_init_robotIdChange","_init_extra_robotIdChange","_get_robotIdChange","_init_qaFinish","_init_extra_qaFinish","_get_qaFinish","_classPrivateFieldGet","v","_classPrivateFieldSet","insertQuestion","args","_classPrivateFieldGet2","current","handleInsertQuestion","sendMsg","msg","_classPrivateFieldGet3","render","_ChatView2","e","_set_sessionIdChange","_set_robotIdChange","_set_qaFinish","c","_initClass","_applyDecs","shadowOptions","type","Boolean","Number","attribute","o","_","has","_checkInRHS","ChatAgentComponent","LegacyChatAgentComponent","_ChatAgent","_ChatAgent_brand","_handleMessagesUpdate","_handleBusyChange","_handleConversationIdChange","ChatAgent","_init_conversationId","_init_extra_conversationId","_init_alwaysUseNewConversation","_init_extra_alwaysUseNewConversation","_init_messagesUpdate","_init_extra_messagesUpdate","messages","_get_messagesUpdate","_init_busyChangeEvent","_init_extra_busyChangeEvent","busy","_get_busyChangeEvent","_init_conversationIdChangeEvent","_init_extra_conversationIdChangeEvent","_get_conversationIdChangeEvent","createRef","alwaysUseNewConversation","postMessage","content","sendRequest","leadingMessages","url","options","lowLevelSendRequest","_classPrivateFieldGet4","newConversation","_classPrivateFieldGet5","onMessagesUpdate","onBusyChange","onConversationIdChange","propConversationId","onMessageChunkPush","didMountRef","useRef","chatIdRef","busyRef","setConversationId","useState","counterRef","getMessageChunkKey","useCallback","fullMessages","setFullMessages","pushPartialMessage","chunk","prev","last","length","key","delta","partial","legacySendRequest","async","isLowLevel","thisChatId","newConversationError","checkNewConversation","Error","userKey","assistantKey","currentConversationId","Array","isArray","isAssistant","role","request","createSSEStream","URL","location","origin","getBasePath","toString","Promise","race","resolve","setTimeout","stream","_choices","choices","error","console","keep","failed","slice","useImperativeHandle","_len","_key","_len2","_key2","body","JSON","stringify","input","undefined","headers","_ChatAgent2","_set_messagesUpdate","_set_busyChangeEvent","_set_conversationIdChangeEvent","styleTexts","styleText","___CSS_LOADER_EXPORT___","push","module","id"],"sourceRoot":""}