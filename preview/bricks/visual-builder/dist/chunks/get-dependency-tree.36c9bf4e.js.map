{"version":3,"file":"chunks/get-dependency-tree.36c9bf4e.js","mappings":"0NAIO,SAASA,EACdC,EACAC,GAEA,MAAMC,EAAU,IAAIC,IAEpB,IAAK,MAAMC,KAAeJ,EAAc,CACtC,MAAMK,GAAQC,EAAAA,EAAAA,oBACZ,CAACF,EAAYG,GAAIH,EAAYI,MAAOJ,EAAYK,SAChDR,GAEFC,EAAQQ,IAAIN,EAAaC,EAC3B,CAEA,OAAOH,CACT,CAEAS,eAAeC,OACb,gCACAC,EAAAA,EAAAA,qBAAoBd,G,2FCUtB,SAASe,EAAgBC,EAAsBC,GAC7CD,EAASE,SAASC,KAKpB,SAAyBC,EAAoBH,GAAsB,IAAAI,EACjE,MAAM,eAAEC,EAAc,SAAEN,EAAQ,QAAEO,EAAO,OAAEC,GAAWP,EAEhDQ,GAAOC,EAAAA,EAAAA,WAAUN,GACvBI,EAAOG,KAAKF,GAEZ,MAAMG,EAAON,EAAeM,MAAMC,GAAQA,EAAIV,KAAKW,MAAQL,EAAKK,MAEhE,GAAa,QAATT,EAAAO,EAAKG,YAAI,IAAAV,GAATA,EAAWW,SAAWT,EAAQU,MAAMC,GAASA,EAAKJ,MAAQL,EAAKK,MAAM,CACvE,MAAMK,EAAYV,EAAKU,SAAW,IAUtC,SAAyBC,EAAoBnB,GAC3C,MAAMoB,EAAW,GAEjBD,EAASL,KAAKb,SAASoB,IAErB,MAAMC,EAAUtB,EAAQD,SAASwB,QAAQN,GAASA,EAAKI,OAASA,IAChED,EAASV,QAAQY,EAAQ,IAG3BxB,EAAgBsB,EAAUpB,EAC5B,CAnBIwB,CAAgBb,EAAM,CACpBN,iBACAN,WACAO,QAAS,IAAIA,EAASE,GACtBD,OAAQW,GAEZ,CACF,CArBIO,CAAgBvB,EAAM,IAAKF,EAASD,YAAW,GAEnD,CAiCO,SAAS2B,EACdC,EACA3B,GAIA,MAAMD,EAAW4B,EACXC,GAAgB7C,EAAAA,EAAAA,mBACpBgB,EAAS8B,KAAKZ,GAASA,EAAKT,OAC5BR,EAAQ8B,UAGJzB,EAAiB,GACvB,IAAK,MAAO0B,EAASvC,KAAUoC,EAC7BvB,EAAeK,KAAK,CAClBI,KAAMkB,MAAMC,KAAKzC,EAAM0C,gBACvBhC,KAAMH,EAASY,MAAMT,GAASA,EAAKM,OAASuB,MAIhD,MAAMxB,EAAS,GAQf,OANAT,EAAgBC,EAAU,CACxBQ,SACAF,iBACAC,QAAS,KAGJC,CACT,CAEAZ,eAAeC,OACb,sCACAC,EAAAA,EAAAA,qBAAoB6B,G","sources":["webpack:///./src/data-providers/get-data-dependency.ts","webpack:///./src/data-providers/get-dependency-tree.ts"],"sourcesContent":["import { createProviderClass } from \"@next-core/utils/general\";\nimport { collectMemberUsage, MemberUsage } from \"@next-core/utils/storyboard\";\nimport { ContextConf } from \"@next-core/types\";\n\nexport function getDataDependency(\n  contextConfs: ContextConf[],\n  keyword: string\n): Map<ContextConf, MemberUsage> {\n  const depsMap = new Map<ContextConf, MemberUsage>();\n\n  for (const contextConf of contextConfs) {\n    const stats = collectMemberUsage(\n      [contextConf.if, contextConf.value, contextConf.resolve],\n      keyword\n    );\n    depsMap.set(contextConf, stats);\n  }\n\n  return depsMap;\n}\n\ncustomElements.define(\n  \"visual-builder.get-data-deps\",\n  createProviderClass(getDataDependency)\n);\n","import { ContextConf } from \"@next-core/types\";\nimport { createProviderClass } from \"@next-core/utils/general\";\nimport { MenuIcon } from \"@next-shared/general/types\";\nimport { getDataDependency } from \"./get-data-dependency\";\nimport { cloneDeep } from \"lodash\";\n\ninterface DataItem extends ContextConf {\n  $key?: string;\n  path?: string;\n}\n\ninterface NodeItem {\n  name: string;\n  key: string;\n  path?: string;\n  icon?: MenuIcon;\n  data?: DataItem;\n  unreachable?: boolean;\n  children?: NodeItem[];\n}\n\ninterface DepsItem {\n  deps: string[];\n  node: NodeItem;\n}\n\ninterface DepsOptions {\n  nodeList?: NodeItem[];\n  dependencyList: DepsItem[];\n  parents?: NodeItem[];\n  result?: NodeItem[];\n}\n\nfunction processNodeList(nodeList: NodeItem[], options: DepsOptions) {\n  nodeList.forEach((node) => {\n    processNodeItem(node, { ...options, nodeList });\n  });\n}\n\nfunction processNodeItem(nodeItem: NodeItem, options: DepsOptions) {\n  const { dependencyList, nodeList, parents, result } = options;\n\n  const data = cloneDeep(nodeItem);\n  result.push(data);\n\n  const find = dependencyList.find((dep) => dep.node.key === data.key);\n\n  if (find.deps?.length && !parents.some((item) => item.key === data.key)) {\n    const children = (data.children = []) as NodeItem[];\n    processDataDeps(find, {\n      dependencyList,\n      nodeList,\n      parents: [...parents, data],\n      result: children,\n    });\n  }\n}\n\nfunction processDataDeps(depsData: DepsItem, options: DepsOptions) {\n  const collects = [] as NodeItem[];\n\n  depsData.deps.forEach((name) => {\n    // 有可能存在同名的两个数据，一起展示\n    const matches = options.nodeList.filter((item) => item.name === name);\n    collects.push(...matches);\n  });\n\n  processNodeList(collects, options);\n}\n\nexport function getDependencyTree(\n  nodeDataList: NodeItem[],\n  options: {\n    dataType: string;\n  }\n): NodeItem[] {\n  const nodeList = nodeDataList;\n  const dependencyMap = getDataDependency(\n    nodeList.map((item) => item.data),\n    options.dataType\n  );\n\n  const dependencyList = [] as DepsItem[];\n  for (const [curData, value] of dependencyMap) {\n    dependencyList.push({\n      deps: Array.from(value.usedProperties),\n      node: nodeList.find((node) => node.data === curData),\n    });\n  }\n\n  const result = [] as NodeItem[];\n\n  processNodeList(nodeList, {\n    result,\n    dependencyList,\n    parents: [],\n  });\n\n  return result;\n}\n\ncustomElements.define(\n  \"visual-builder.get-dependency-tree\",\n  createProviderClass(getDependencyTree)\n);\n"],"names":["getDataDependency","contextConfs","keyword","depsMap","Map","contextConf","stats","collectMemberUsage","if","value","resolve","set","customElements","define","createProviderClass","processNodeList","nodeList","options","forEach","node","nodeItem","_find$deps","dependencyList","parents","result","data","cloneDeep","push","find","dep","key","deps","length","some","item","children","depsData","collects","name","matches","filter","processDataDeps","processNodeItem","getDependencyTree","nodeDataList","dependencyMap","map","dataType","curData","Array","from","usedProperties"],"sourceRoot":""}