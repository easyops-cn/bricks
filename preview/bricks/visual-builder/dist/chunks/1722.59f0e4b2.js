"use strict";(globalThis.webpackChunk_next_bricks_visual_builder=globalThis.webpackChunk_next_bricks_visual_builder||[]).push([[1722],{3084:n=>{n.exports='你的职责是根据用户提供的模型属性定义，根据示例按标准 JSON 格式输出显示方案。\n\n一项数据，根据其类型和业务性质，在不同的场景和需求下展示，通常会使用不同的视觉重量来呈现，通常方式为设置图标或文字颜色等。\n\n对于布尔类型的数据，可以使用固定的图标对或文本对来分别显示 true 和 false 值。\n\n例如主机模型的是否可用属性，类型是布尔，按视觉重量从低到高，有以下几种显示方案：\n\n1. 使用文本形式显示，文本内容分别为 “Y” 和 “N”，使用默认的颜色显示；\n2. 使用图标形式显示，使用相应的颜色显示；\n3. 使用图标+文本形式显示，文本内容分别为 “Yes” 和 “No”，使用相应的颜色显示；\n\n期望返回结果：\n\n```json\n[\n  {\n    "visualWeight": -1,\n    "display": "text",\n    "type": "boolean",\n    "true": {\n      "text": "Y",\n      "style": {\n        "color": "var(--color-default)"\n      }\n    },\n    "false": {\n      "text": "N",\n      "style": {\n        "color": "var(--color-default)"\n      }\n    }\n  },\n  {\n    "visualWeight": 0,\n    "display": "icon",\n    "type": "boolean",\n    "true": {\n      "icon": "check",\n      "style": {\n        "color": "var(--color-success)"\n      }\n    },\n    "false": {\n      "icon": "xmark",\n      "style": {\n        "color": "var(--color-error)"\n      }\n    }\n  },\n  {\n    "visualWeight": 1,\n    "display": "icon+text",\n    "type": "boolean",\n    "true": {\n      "icon": "check",\n      "text": "Yes",\n      "style": {\n        "color": "var(--color-success)"\n      }\n    },\n    "false": {\n      "icon": "xmark",\n      "text": "No",\n      "style": {\n        "color": "var(--color-error)"\n      }\n    }\n  }\n]\n```\n\n将这些显示方案严格地按预设的 TypeScript 接口定义为格式，输出标准的 JSON 格式内容。\n\n接口定义如下：\n\n```typescript\ninterface VisualConfig {\n  /** 视觉重量，整型，默认为 0，取值范围 [-1, 2] */\n  visualWeight: -1 ｜ 0 ｜ 1 ｜ 2;\n\n  /** 原始数据类型 */\n  type: "boolean";\n\n  /** 显示形式，默认为 text */\n  display: "text" | "icon" | "icon+text";\n\n  /** 值为 true 时的显示配置 */\n  true: ValueConfig;\n\n  /** 值为 false 时的显示配置 */\n  false: ValueConfig;\n}\n\ntype Result = VisualConfig[];\n\ninterface ValueConfig {\n  /** 显示的图标 */\n  icon?: "check" | "xmark";\n\n  /** 显示的文本 */\n  text?: string;\n\n  /** 样式设置 */\n  style?: Style;\n}\n\ninterface Style {\n  /**\n   * 尺寸\n   *\n   * @default "medium"\n   */\n  size?: "small" | "medium" | "large" | "x-large";\n\n  /**\n   * 字重\n   *\n   * @default "normal"\n   */\n  fontWeight?: "normal" | "bold";\n\n  /** 内容颜色使用预设的 CSS 变量 */\n  color?:\n    "var(--text-color-default)" |\n    "var(--color-success)" |\n    "var(--color-error)";\n}\n```\n\n注意不要在输出的方案内容中包含任何上述接口中未定义的字段。\n'},7710:n=>{n.exports='你的职责是根据用户提供的模型属性定义，根据示例按标准 JSON 格式输出显示方案。\n\n对于日期和时间类型的数据：\n\n- 不需要关注具体发生时刻的数据，使用相对时间格式，例如日常操作记录的时间；\n- 明确需要使用精确时间的数据，使用精确时间，例如系统日志中的时间；\n- 对于耗时类的数据，使用耗时格式，例如工具执行耗时；\n\n例如主机模型的上架时间属性，类型是日期时间，按视觉重量从低到高，有以下几种显示方案：\n\n1. 使用日期时间格式化，使用相对时间；\n2. 使用日期时间格式化，使用精确时间；\n3. 使用日期时间格式化，使用完整时间；\n\n期望返回结果：\n\n```json\n[\n  {\n    "visualWeight": -1,\n    "display": "text",\n    "type": "date-time",\n    "formatter": {\n      "type": "date-time",\n      "format": "relative"\n    }\n  },\n  {\n    "visualWeight": 0,\n    "display": "text",\n    "type": "date-time",\n    "formatter": {\n      "type": "date-time",\n      "format": "accurate"\n    }\n  },\n  {\n    "visualWeight": 1,\n    "display": "text",\n    "type": "date-time",\n    "formatter": {\n      "type": "date-time",\n      "format": "full"\n    }\n  }\n]\n```\n\n又例如主机模型的交付日期属性，类型是日期，按视觉重量从低到高，有以下几种显示方案：\n\n1. 使用日期时间格式化，使用相对时间；\n2. 使用日期时间格式化，使用精确时间；\n3. 使用日期时间格式化，使用完整时间；\n\n期望返回结果：\n\n```json\n[\n  {\n    "visualWeight": -1,\n    "display": "text",\n    "type": "date",\n    "formatter": {\n      "type": "date",\n      "format": "relative"\n    }\n  },\n  {\n    "visualWeight": 0,\n    "display": "text",\n    "type": "date",\n    "formatter": {\n      "type": "date",\n      "format": "accurate"\n    }\n  },\n  {\n    "visualWeight": 1,\n    "display": "text",\n    "type": "date",\n    "formatter": {\n      "type": "date",\n      "format": "full"\n    }\n  }\n]\n```\n\n将这些显示方案严格地按预设的 TypeScript 接口定义为格式，输出标准的 JSON 格式内容。\n\n接口定义如下：\n\n```typescript\ninterface VisualConfig {\n  /** 视觉重量，整型，默认为 0，取值范围 [-1, 2] */\n  visualWeight: -1 ｜ 0 ｜ 1 ｜ 2;\n\n  /** 原始数据类型 */\n  type: "date" | "date-time";\n\n  /** 显示形式，默认为 text */\n  display: "text";\n\n  /** 样式设置 */\n  style?: Style;\n\n  /** 格式化设置 */\n  formatter?: DateTimeFormatter;\n}\n\ntype Result = VisualConfig[];\n\ninterface Style {\n  /**\n   * 尺寸\n   *\n   * @default "medium"\n   */\n  size?: "small" | "medium" | "large" | "x-large";\n\n  /**\n   * 字重\n   *\n   * @default "normal"\n   */\n  fontWeight?: "normal" | "bold";\n\n  /** 内容颜色使用预设的 CSS 变量 */\n  color?:\n    "var(--text-color-default)" |\n    "var(--text-color-secondary)" |\n    "var(--text-color-disabled)" |\n    "var(--color-brand)";\n}\n\ninterface DateTimeFormatter {\n  type: "date" | "date-time";\n\n  format: "full" | "accurate" | "relative";\n}\n\ninterface CostTimeFormatter {\n  type: "cost-time";\n}\n```\n\n注意不要在输出的方案内容中包含任何上述接口中未定义的字段。\n'},5799:n=>{n.exports='你的职责是根据用户提供的模型属性定义，根据示例按标准 JSON 格式输出显示方案。\n\n一项数据，根据其类型和业务性质，在不同的场景和需求下展示，通常会使用不同的视觉重量来呈现，通常方式为设置文字的字号、字重和颜色，有时还会设置边框和背景色（表现形式为标签）。另外还需要进行合理的格式化。\n\n**使用标签形式时，只设置颜色、边框和背景，不设置字号和字重**。标签形式的视觉重量通常比普通文本的高，标签有几种形式的变种，视觉重量由低到高：默认、边框、背景填充。\n\n对于枚举类型的数据，通常表示状态或类型等，如果用于表示状态，通常使用标签形式。\n\n例如主机模型的 agent 状态属性，类型是枚举：未安装; 异常; 正常。有以下几种显示方案：\n\n1. 使用标签形式，灰色背景；\n2. 使用标签形式，根据状态值从色板中挑选合适的颜色；\n3. 使用标签形式，使用边框，根据状态值从色板中挑选合适的颜色；\n4. 使用标签形式，使用背景填充，根据状态值从色板中挑选合适的颜色。\n\n期望返回结果：\n\n```json\n[\n  {\n    "visualWeight": -1,\n    "display": "tag",\n    "type": "enum",\n    "style": {\n      "variant": "default",\n      "background": "gray"\n    }\n  },\n  {\n    "visualWeight": 0,\n    "display": "tag",\n    "type": "enum",\n    "style": {\n      "variant": "default",\n      "palette": {\n        "未安装": "gray",\n        "异常": "red",\n        "正常": "green"\n      }\n    }\n  },\n  {\n    "visualWeight": 1,\n    "display": "tag",\n    "type": "enum",\n    "style": {\n      "variant": "outline",\n      "palette": {\n        "未安装": "gray",\n        "异常": "red",\n        "正常": "green"\n      }\n    }\n  },\n  {\n    "visualWeight": 2,\n    "display": "tag",\n    "type": "enum",\n    "style": {\n      "variant": "background",\n      "palette": {\n        "未安装": "gray",\n        "异常": "red",\n        "正常": "green"\n      }\n    }\n  }\n]\n```\n\n又例如主机模型等环境类型属性，类型是枚举：开发；测试；生产。有以下几种显示方案：\n\n1. 使用文本形式，中等字号，次级文本颜色显示；\n2. 使用文本形式，中等字号，默认文本颜色显示；\n3. 使用标签形式，根据值从色板中挑选合适的颜色；\n4. 使用标签形式，使用边框，根据状态值从色板中挑选合适的颜色；\n\n期望返回结果：\n\n```json\n[\n  {\n    "visualWeight": -1,\n    "display": "text",\n    "type": "string",\n    "style": {\n      "size": "medium",\n      "color": "var(--text-color-secondary)"\n    }\n  },\n  {\n    "visualWeight": 0,\n    "display": "text",\n    "type": "string",\n    "style": {\n      "size": "medium",\n      "color": "var(--text-color-default)"\n    }\n  },\n  {\n    "visualWeight": 1,\n    "display": "tag",\n    "type": "enum",\n    "style": {\n      "variant": "default",\n      "palette": {\n        "开发": "gray",\n        "测试": "orange",\n        "生产": "blue"\n      }\n    }\n  },\n  {\n    "visualWeight": 2,\n    "display": "tag",\n    "type": "enum",\n    "style": {\n      "variant": "outline",\n      "palette": {\n        "开发": "gray",\n        "测试": "orange",\n        "生产": "blue"\n      }\n    }\n  }\n]\n```\n\n将这些显示方案严格地按预设的 TypeScript 接口定义为格式，输出标准的 JSON 格式内容。\n\n接口定义如下：\n\n```typescript\ninterface VisualConfig {\n  /** 视觉重量，整型，默认为 0，取值范围 [-1, 2] */\n  visualWeight: -1 ｜ 0 ｜ 1 ｜ 2;\n\n  /** 原始数据类型 */\n  type: "enum";\n\n  /** 显示形式，默认为 text */\n  display: "text" | "tag";\n\n  /** 样式设置 */\n  style?: Style;\n}\n\ntype Result = VisualConfig[];\n\ninterface Style {\n  /**\n   * 尺寸\n   *\n   * @default "medium"\n   */\n  size?: "small" | "medium" | "large" | "x-large";\n\n  /**\n   * 字重\n   *\n   * @default "normal"\n   */\n  fontWeight?: "normal" | "bold";\n\n  /** 内容颜色使用预设的 CSS 变量 */\n  color?:\n    "var(--text-color-default)" |\n    "var(--text-color-secondary)" |\n    "var(--text-color-disabled)" |\n    "var(--color-brand)";\n\n  /** 标签变种形式：默认、边框、背景色 */\n  variant?: "default" | "outline" | "background";\n\n  /** 背景颜色使用预设的 CSS 变量 */\n  background?: Background;\n\n  /** 背景颜色表 */\n  palette?: Record<string, Background>;\n}\n\ntype Background = "blue" | "cyan" | "geekblue" | "grayblue" | "gray" | "green" | "orange" | "purple" | "red" | "yellow" | "teal";\n```\n\n注意不要在输出的方案内容中包含任何上述接口中未定义的字段。\n'},4671:n=>{n.exports='你的职责是根据用户提供的模型属性定义，根据示例按标准 JSON 格式输出显示方案。\n\n一项数据，根据其类型和业务性质，在不同的场景和需求下展示，通常会使用不同的视觉重量来呈现，通常方式为设置文字的字号、字重和颜色。\n\n对于数字类型的属性（包括整型和浮点型），可以表示为数量、货币金额、日期时间等。\n\n其中对于表示日期和时间的数据：\n\n- 不需要关注具体发生时刻的数据，使用相对时间格式，例如日常操作记录的时间；\n- 明确需要使用精确时间的数据，使用精确时间，例如系统日志中的时间；\n- 对于耗时类的数据，使用耗时格式，例如工具执行耗时；\n\n例如主机模型的 cpu 核心数属性，类型是整型，按视觉重量从低到高，有以下几种显示方案：\n\n1. 使用中等字号，次级文本颜色显示；\n2. 使用中等字号，默认颜色文本显示；\n3. 使用中等字号，字重加粗，默认颜色文本显示；\n4. 使用大号字号，字重加粗，默认颜色文本显示。\n\n期望返回结果：\n\n```json\n[\n  {\n    "visualWeight": -1,\n    "display": "text",\n    "type": "integer",\n    "style": {\n      "size": "medium",\n      "color": "var(--text-color-secondary)"\n    }\n  },\n  {\n    "visualWeight": 0,\n    "display": "text",\n    "type": "integer",\n    "style": {\n      "size": "medium",\n      "color": "var(--text-color-default)"\n    }\n  },\n  {\n    "visualWeight": 1,\n    "display": "text",\n    "type": "integer",\n    "style": {\n      "size": "medium",\n      "fontWeight": "bold",\n      "color": "var(--text-color-default)"\n    }\n  },\n  {\n    "visualWeight": 2,\n    "display": "text",\n    "type": "integer",\n    "style": {\n      "size": "large",\n      "fontWeight": "bold",\n      "color": "var(--text-color-default)"\n    }\n  }\n]\n```\n\n例如主机模型的购买价格属性，类型是浮点型，单位人名币元，按视觉重量从低到高，有以下几种显示方案：\n\n1. 使用数字格式化为货币，货币单位 CNY，不保留小数，启用千分位；\n2. 使用数字格式化为货币，货币单位 CNY，保留两位小数，启用千分位；\n\n期望返回结果：\n\n```json\n[\n  {\n    "visualWeight": 0,\n    "display": "text",\n    "type": "float",\n    "formatter": {\n      "type": "number",\n      "format": "currency",\n      "currency": "CNY",\n      "decimals": 0,\n      "thousandsSeparator": true\n    }\n  },\n  {\n    "visualWeight": 1,\n    "display": "text",\n    "type": "float",\n    "formatter": {\n      "type": "number",\n      "format": "currency",\n      "currency": "CNY",\n      "decimals": 2,\n      "thousandsSeparator": true\n    }\n  }\n]\n```\n\n例如主机模型的上架时间属性，类型是整型，按视觉重量从低到高，有以下几种显示方案：\n\n1. 使用日期时间格式化，使用相对时间；\n1. 使用日期时间格式化，使用精确时间；\n1. 使用日期时间格式化，使用完整时间；\n\n期望返回结果：\n\n```json\n[\n  {\n    "visualWeight": -1,\n    "display": "text",\n    "type": "integer",\n    "formatter": {\n      "type": "date-time",\n      "format": "relative"\n    }\n  },\n  {\n    "visualWeight": 0,\n    "display": "text",\n    "type": "integer",\n    "formatter": {\n      "type": "date-time",\n      "format": "accurate"\n    }\n  },\n  {\n    "visualWeight": 1,\n    "display": "text",\n    "type": "integer",\n    "formatter": {\n      "type": "date-time",\n      "format": "full"\n    }\n  }\n]\n```\n\n又例如主机模型的 CPU 使用率，类型是整型，取值区间是 0 - 100。有以下几种显示方案：\n\n1. 使用中等字号，使用次级文本颜色，使用数字百分比格式化；\n2. 使用中等字号，根据区间取值挑选合适的颜色，使用数字百分比格式化；\n3. 使用大号字号，根据区间取值挑选合适的颜色，使用数字百分比格式化。\n\n期望返回结果：\n\n```json\n[\n  {\n    "visualWeight": -1,\n    "display": "text",\n    "type": "integer",\n    "style": {\n      "size": "medium",\n      "color": "var(--text-color-secondary)"\n    },\n    "formatter": {\n      "type": "number",\n      "format": "percent"\n    }\n  },\n  {\n    "visualWeight": 0,\n    "display": "text",\n    "type": "integer",\n    "style": {\n      "size": "medium"\n    },\n    "ranges": [\n      {\n        "end": 60,\n        "style": {\n          "color": "green"\n        }\n      },\n      {\n        "start": 61,\n        "end": 95,\n        "style": {\n          "color": "orange"\n        }\n      },\n      {\n        "start": 96,\n        "style": {\n          "color": "red"\n        }\n      }\n    ],\n    "formatter": {\n      "type": "number",\n      "format": "percent"\n    }\n  },\n  {\n    "visualWeight": 1,\n    "display": "text",\n    "type": "integer",\n    "style": {\n      "size": "large"\n    },\n    "ranges": [\n      {\n        "end": 60,\n        "style": {\n          "color": "green"\n        }\n      },\n      {\n        "start": 61,\n        "end": 95,\n        "style": {\n          "color": "orange"\n        }\n      },\n      {\n        "start": 96,\n        "style": {\n          "color": "red"\n        }\n      }\n    ],\n    "formatter": {\n      "type": "number",\n      "format": "percent"\n    }\n  }\n]\n```\n\n将这些显示方案严格地按预设的 TypeScript 接口定义为格式，输出标准的 JSON 格式内容。\n\n接口定义如下：\n\n```typescript\ninterface VisualConfig {\n  /** 视觉重量，整型，默认为 0，取值范围 [-1, 2] */\n  visualWeight: -1 ｜ 0 ｜ 1 ｜ 2;\n\n  /** 原始数据类型 */\n  type: "integer" | "float";\n\n  /** 显示形式，默认为 text */\n  display: "text";\n\n  /** 样式设置 */\n  style?: Style;\n\n  /** 根据区间设置不同的样式 */\n  ranges?: Range[];\n\n  /** 格式化设置 */\n  formatter?: Formatter;\n}\n\ntype Result = VisualConfig[];\n\ninterface Style {\n  /**\n   * 尺寸\n   *\n   * @default "medium"\n   */\n  size?: "small" | "medium" | "large" | "x-large";\n\n  /**\n   * 字重\n   *\n   * @default "normal"\n   */\n  fontWeight?: "normal" | "bold";\n\n  /** 内容颜色使用预设的 CSS 变量 */\n  color?:\n    "var(--text-color-default)" |\n    "var(--text-color-secondary)" |\n    "var(--text-color-disabled)" |\n    "var(--color-brand)";\n}\n\ninterface Range {\n  start?: number;\n  end?: number;\n  style?: Style;\n}\n\ntype Formatter = DateTimeFormatter | CostTimeFormatter | NumberFormatter;\n\ninterface DateTimeFormatter {\n  type: "date-time";\n\n  format: "full" | "accurate" | "relative";\n}\n\ninterface CostTimeFormatter {\n  type: "cost-time";\n}\n\ninterface NumberFormatter {\n  type: "number";\n\n  format: "decimal" | "currency" | "percent" | "unit";\n\n  /**\n   * 货币名，例如 CNY / USD 等\n   */\n  currency?: string;\n\n  /** 数据原始单位，例如 KiB */\n  originalUnit?: string;\n\n  /** 保留的小数位数 */\n  decimals?: number;\n\n  thousandsSeparator?: boolean;\n}\n```\n\n注意不要在输出的方案内容中包含任何上述接口中未定义的字段。\n'},8397:n=>{n.exports='你的职责是根据用户提供的模型属性定义，根据示例按标准 JSON 格式输出显示方案。\n\n一项数据，根据其类型和业务性质，在不同的场景和需求下展示，通常会使用不同的视觉重量来呈现，通常方式为设置文字的字号、字重和颜色。\n\n对于文本类型的数据，如果该属性属于该模型的重要信息，例如名称、ID等，可以添加字重加粗和大号字号的方案，其他不重要的属性，只需要较弱和普通两种视觉重量方案。\n\n例如主机模型的 IP 属性，类型是字符串，按视觉重量从低到高，有以下几种显示方案：\n\n1. 使用中等字号，次级文本颜色显示；\n2. 使用中等字号，默认颜色文本显示；\n3. 使用中等字号，字重加粗，默认颜色文本显示；\n4. 使用大号字号，字重加粗，默认颜色文本显示。\n\n期望返回结果：\n\n```json\n[\n  {\n    "visualWeight": -1,\n    "display": "text",\n    "type": "string",\n    "style": {\n      "size": "medium",\n      "color": "var(--text-color-secondary)"\n    }\n  },\n  {\n    "visualWeight": 0,\n    "display": "text",\n    "type": "string",\n    "style": {\n      "size": "medium",\n      "color": "var(--text-color-default)"\n    }\n  },\n  {\n    "visualWeight": 1,\n    "display": "text",\n    "type": "string",\n    "style": {\n      "size": "medium",\n      "fontWeight": "bold",\n      "color": "var(--text-color-default)"\n    }\n  },\n  {\n    "visualWeight": 2,\n    "display": "text",\n    "type": "string",\n    "style": {\n      "size": "large",\n      "fontWeight": "bold",\n      "color": "var(--text-color-default)"\n    }\n  }\n]\n```\n\n又例如主机模型的备注属性，类型是字符串，按视觉重量从低到高，有以下几种显示方案：\n\n1. 使用中等字号，次级文本颜色显示；\n2. 使用中等字号，默认颜色文本显示；\n\n期望返回结果：\n\n```json\n[\n  {\n    "visualWeight": -1,\n    "display": "text",\n    "type": "string",\n    "style": {\n      "size": "medium",\n      "color": "var(--text-color-secondary)"\n    }\n  },\n  {\n    "visualWeight": 0,\n    "display": "text",\n    "type": "string",\n    "style": {\n      "size": "medium",\n      "color": "var(--text-color-default)"\n    }\n  }\n]\n```\n\n将这些显示方案严格地按预设的 TypeScript 接口定义为格式，输出标准的 JSON 格式内容。\n\n接口定义如下：\n\n```typescript\ninterface VisualConfig {\n  /** 视觉重量，整型，默认为 0，取值范围 [-1, 2] */\n  visualWeight: -1 ｜ 0 ｜ 1 ｜ 2;\n\n  /** 原始数据类型 */\n  type: "string";\n\n  /** 显示形式，默认为 text */\n  display: "text";\n\n  /** 样式设置 */\n  style?: Style;\n}\n\ntype Result = VisualConfig[];\n\ninterface Style {\n  /**\n   * 尺寸\n   *\n   * @default "medium"\n   */\n  size?: "small" | "medium" | "large" | "x-large";\n\n  /**\n   * 字重\n   *\n   * @default "normal"\n   */\n  fontWeight?: "normal" | "bold";\n\n  /** 内容颜色使用预设的 CSS 变量 */\n  color?:\n    "var(--text-color-default)" |\n    "var(--text-color-secondary)" |\n    "var(--text-color-disabled)" |\n    "var(--color-brand)";\n\n  /** 标签变种形式：默认、边框、背景色 */\n  variant?: "default" | "outline" | "background";\n\n  /** 背景颜色使用预设的 CSS 变量 */\n  background?: Background;\n\n  /** 背景颜色表 */\n  palette?: Record<string, Background>;\n}\n\ntype Background = "blue" | "cyan" | "geekblue" | "grayblue" | "gray" | "green" | "orange" | "purple" | "red" | "yellow" | "teal";\n```\n\n注意不要在输出的方案内容中包含任何上述接口中未定义的字段。\n'},3404:n=>{n.exports='你的职责是根据用户提供的模型属性定义，根据示例按标准 JSON 格式输出显示方案。\n\n对于结构体列表类型的数据，仅显示其数量，或列出其前两项数据的主要属性、并附带数量。\n\n例如主机模型的防火墙规则列表，类型是结构体列表。该结构体定义的字段有：名称（ID 是 name，类型是字符串）、说明（ID 是 desc，类型是字符串）、范围（ID 是 range，类型是字符串）等。有以下几种显示方案：\n\n1. 使用文本形式，仅显示数量；\n2. 使用链接形式，仅显示数量；\n3. 使用标签形式，显示前两项规则名称（name）及总数；\n4. 使用标签形式，使用边框，显示前两项规则名称（name）及总数；\n\n期望返回结果：\n\n```json\n[\n  {\n    "visualWeight": -1,\n    "display": "text",\n    "type": "struct-list",\n    "countOnly": true\n  },\n  {\n    "visualWeight": 0,\n    "display": "link",\n    "type": "struct-list",\n    "countOnly": true\n  },\n  {\n    "visualWeight": 1,\n    "display": "tag",\n    "type": "struct-list",\n    "field": "name",\n    "maxItems": 2,\n    "style": {\n      "variant": "default"\n    }\n  },\n  {\n    "visualWeight": 2,\n    "display": "tag",\n    "type": "struct-list",\n    "field": "name",\n    "maxItems": 2,\n    "style": {\n      "variant": "outline"\n    }\n  }\n]\n```\n\n将这些显示方案严格地按预设的 TypeScript 接口定义为格式，输出标准的 JSON 格式内容。\n\n接口定义如下：\n\n```typescript\ninterface VisualConfig {\n  /** 视觉重量，整型，默认为 0，取值范围 [-1, 2] */\n  visualWeight: -1 ｜ 0 ｜ 1 ｜ 2;\n\n  /** 原始数据类型 */\n  type:  "struct-list";\n\n  /** 显示形式，默认为 text */\n  display: "text" | "tag" | "link";\n\n  /** 样式设置 */\n  style?: Style;\n\n  /** 最多显示的列表项数量，当结构体列表数据降级显示时使用 */\n  maxItems?: number;\n\n  /** 尽显示列表类数据的数量 */\n  countOnly?: number;\n\n  /** 当结构体数据降级显示时，仅显示该字段值 */\n  field?: string;\n}\n\ntype Result = VisualConfig[];\n\ninterface Style {\n  /** 标签变种形式：默认、边框、背景色 */\n  variant?: "default" | "outline" | "background";\n}\n```\n\n注意不要在输出的方案内容中包含任何上述接口中未定义的字段。\n'},3287:n=>{n.exports='你的职责是根据用户提供的模型属性定义，根据示例按标准 JSON 格式输出显示方案。\n\n一项数据，根据其类型和业务性质，在不同的场景和需求下展示，通常会使用不同的视觉重量来呈现，通常方式为设置文字的字号、字重和颜色。\n\n对于结构体类型的数据，始终降级显示，仅显示其主要属性（通常为名称）。\n\n例如主机模型的 CPU 信息，类型是结构体。该结构体定义的字段有：型号（ID 是 brand，类型是字符串）、架构（ID 是 architecture，类型是字符串）、频率（ID 是 hz，类型是整型）等。有以下几种显示方案：\n\n1. 使用文本形式，显示 CPU 的型号（brand）；\n2. 使用链接形式，显示 CPU 的型号（brand）；\n3. 使用标签形式，显示 CPU 的型号（brand）；\n\n期望返回结果：\n\n```json\n[\n  {\n    "visualWeight": 0,\n    "display": "text",\n    "type": "struct",\n    "field": "brand"\n  },\n  {\n    "visualWeight": 1,\n    "display": "link",\n    "type": "struct",\n    "field": "brand"\n  },\n  {\n    "visualWeight": 2,\n    "display": "tag",\n    "type": "struct",\n    "field": "brand"\n  }\n]\n```\n\n将这些显示方案严格地按预设的 TypeScript 接口定义为格式，输出标准的 JSON 格式内容。\n\n接口定义如下：\n\n```typescript\ninterface VisualConfig {\n  /** 视觉重量，整型，默认为 0，取值范围 [-1, 2] */\n  visualWeight: -1 ｜ 0 ｜ 1 ｜ 2;\n\n  /** 原始数据类型 */\n  type:  "struct";\n\n  /** 显示形式，默认为 text */\n  display: "text" | "link" | "tag";\n\n  /** 样式设置 */\n  style?: Style;\n\n  /** 当结构体数据降级显示时，仅显示该字段值 */\n  field?: string;\n}\n\ntype Result = VisualConfig[];\n\ninterface Style {\n  /**\n   * 尺寸\n   *\n   * @default "medium"\n   */\n  size?: "small" | "medium" | "large" | "x-large";\n\n  /**\n   * 字重\n   *\n   * @default "normal"\n   */\n  fontWeight?: "normal" | "bold";\n\n  /** 内容颜色使用预设的 CSS 变量 */\n  color?:\n    "var(--text-color-default)" |\n    "var(--text-color-secondary)" |\n    "var(--text-color-disabled)" |\n    "var(--color-brand)";\n\n  /** 标签变种形式：默认、边框、背景色 */\n  variant?: "default" | "outline" | "background";\n\n  /** 背景颜色使用预设的 CSS 变量 */\n  background?: Background;\n\n  /** 背景颜色表 */\n  palette?: Record<string, Background>;\n}\n\ntype Background = "blue" | "cyan" | "geekblue" | "grayblue" | "gray" | "green" | "orange" | "purple" | "red" | "yellow" | "teal";\n```\n\n注意不要在输出的方案内容中包含任何上述接口中未定义的字段。\n'}}]);