{"version":3,"file":"chunks/parse-path.39c437b5.js","mappings":"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","sources":["webpack:///./src/data-providers/parse-path.ts","webpack:///../../node_modules/path-to-regexp/dist.es2015/index.js"],"sourcesContent":["import { createProviderClass } from \"@next-core/utils/general\";\nimport { defaults } from \"lodash\";\nimport { pathToRegexp, Key } from \"path-to-regexp\";\n\ninterface Option {\n  end?: boolean;\n  strict?: boolean;\n  sensitive?: boolean;\n}\n\nexport async function parsePath(path: string, options?: Option) {\n  const defaultParams = { end: false, strict: false, sensitive: true };\n\n  const keys: Key[] = [];\n  const regexp = pathToRegexp(path, keys, defaults(options, defaultParams));\n\n  return {\n    regexp,\n    keys,\n  };\n}\n\ncustomElements.define(\n  \"visual-builder.parse-path\",\n  createProviderClass(parsePath)\n);\n","/**\n * Tokenize input string.\n */\nfunction lexer(str) {\n    var tokens = [];\n    var i = 0;\n    while (i < str.length) {\n        var char = str[i];\n        if (char === \"*\" || char === \"+\" || char === \"?\") {\n            tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n            continue;\n        }\n        if (char === \"\\\\\") {\n            tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n            continue;\n        }\n        if (char === \"{\") {\n            tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n            continue;\n        }\n        if (char === \"}\") {\n            tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n            continue;\n        }\n        if (char === \":\") {\n            var name = \"\";\n            var j = i + 1;\n            while (j < str.length) {\n                var code = str.charCodeAt(j);\n                if (\n                // `0-9`\n                (code >= 48 && code <= 57) ||\n                    // `A-Z`\n                    (code >= 65 && code <= 90) ||\n                    // `a-z`\n                    (code >= 97 && code <= 122) ||\n                    // `_`\n                    code === 95) {\n                    name += str[j++];\n                    continue;\n                }\n                break;\n            }\n            if (!name)\n                throw new TypeError(\"Missing parameter name at \".concat(i));\n            tokens.push({ type: \"NAME\", index: i, value: name });\n            i = j;\n            continue;\n        }\n        if (char === \"(\") {\n            var count = 1;\n            var pattern = \"\";\n            var j = i + 1;\n            if (str[j] === \"?\") {\n                throw new TypeError(\"Pattern cannot start with \\\"?\\\" at \".concat(j));\n            }\n            while (j < str.length) {\n                if (str[j] === \"\\\\\") {\n                    pattern += str[j++] + str[j++];\n                    continue;\n                }\n                if (str[j] === \")\") {\n                    count--;\n                    if (count === 0) {\n                        j++;\n                        break;\n                    }\n                }\n                else if (str[j] === \"(\") {\n                    count++;\n                    if (str[j + 1] !== \"?\") {\n                        throw new TypeError(\"Capturing groups are not allowed at \".concat(j));\n                    }\n                }\n                pattern += str[j++];\n            }\n            if (count)\n                throw new TypeError(\"Unbalanced pattern at \".concat(i));\n            if (!pattern)\n                throw new TypeError(\"Missing pattern at \".concat(i));\n            tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n            i = j;\n            continue;\n        }\n        tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n    }\n    tokens.push({ type: \"END\", index: i, value: \"\" });\n    return tokens;\n}\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str, options) {\n    if (options === void 0) { options = {}; }\n    var tokens = lexer(str);\n    var _a = options.prefixes, prefixes = _a === void 0 ? \"./\" : _a, _b = options.delimiter, delimiter = _b === void 0 ? \"/#?\" : _b;\n    var result = [];\n    var key = 0;\n    var i = 0;\n    var path = \"\";\n    var tryConsume = function (type) {\n        if (i < tokens.length && tokens[i].type === type)\n            return tokens[i++].value;\n    };\n    var mustConsume = function (type) {\n        var value = tryConsume(type);\n        if (value !== undefined)\n            return value;\n        var _a = tokens[i], nextType = _a.type, index = _a.index;\n        throw new TypeError(\"Unexpected \".concat(nextType, \" at \").concat(index, \", expected \").concat(type));\n    };\n    var consumeText = function () {\n        var result = \"\";\n        var value;\n        while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n            result += value;\n        }\n        return result;\n    };\n    var isSafe = function (value) {\n        for (var _i = 0, delimiter_1 = delimiter; _i < delimiter_1.length; _i++) {\n            var char = delimiter_1[_i];\n            if (value.indexOf(char) > -1)\n                return true;\n        }\n        return false;\n    };\n    var safePattern = function (prefix) {\n        var prev = result[result.length - 1];\n        var prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n        if (prev && !prevText) {\n            throw new TypeError(\"Must have text between two parameters, missing text after \\\"\".concat(prev.name, \"\\\"\"));\n        }\n        if (!prevText || isSafe(prevText))\n            return \"[^\".concat(escapeString(delimiter), \"]+?\");\n        return \"(?:(?!\".concat(escapeString(prevText), \")[^\").concat(escapeString(delimiter), \"])+?\");\n    };\n    while (i < tokens.length) {\n        var char = tryConsume(\"CHAR\");\n        var name = tryConsume(\"NAME\");\n        var pattern = tryConsume(\"PATTERN\");\n        if (name || pattern) {\n            var prefix = char || \"\";\n            if (prefixes.indexOf(prefix) === -1) {\n                path += prefix;\n                prefix = \"\";\n            }\n            if (path) {\n                result.push(path);\n                path = \"\";\n            }\n            result.push({\n                name: name || key++,\n                prefix: prefix,\n                suffix: \"\",\n                pattern: pattern || safePattern(prefix),\n                modifier: tryConsume(\"MODIFIER\") || \"\",\n            });\n            continue;\n        }\n        var value = char || tryConsume(\"ESCAPED_CHAR\");\n        if (value) {\n            path += value;\n            continue;\n        }\n        if (path) {\n            result.push(path);\n            path = \"\";\n        }\n        var open = tryConsume(\"OPEN\");\n        if (open) {\n            var prefix = consumeText();\n            var name_1 = tryConsume(\"NAME\") || \"\";\n            var pattern_1 = tryConsume(\"PATTERN\") || \"\";\n            var suffix = consumeText();\n            mustConsume(\"CLOSE\");\n            result.push({\n                name: name_1 || (pattern_1 ? key++ : \"\"),\n                pattern: name_1 && !pattern_1 ? safePattern(prefix) : pattern_1,\n                prefix: prefix,\n                suffix: suffix,\n                modifier: tryConsume(\"MODIFIER\") || \"\",\n            });\n            continue;\n        }\n        mustConsume(\"END\");\n    }\n    return result;\n}\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile(str, options) {\n    return tokensToFunction(parse(str, options), options);\n}\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction(tokens, options) {\n    if (options === void 0) { options = {}; }\n    var reFlags = flags(options);\n    var _a = options.encode, encode = _a === void 0 ? function (x) { return x; } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;\n    // Compile all the tokens into regexps.\n    var matches = tokens.map(function (token) {\n        if (typeof token === \"object\") {\n            return new RegExp(\"^(?:\".concat(token.pattern, \")$\"), reFlags);\n        }\n    });\n    return function (data) {\n        var path = \"\";\n        for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i];\n            if (typeof token === \"string\") {\n                path += token;\n                continue;\n            }\n            var value = data ? data[token.name] : undefined;\n            var optional = token.modifier === \"?\" || token.modifier === \"*\";\n            var repeat = token.modifier === \"*\" || token.modifier === \"+\";\n            if (Array.isArray(value)) {\n                if (!repeat) {\n                    throw new TypeError(\"Expected \\\"\".concat(token.name, \"\\\" to not repeat, but got an array\"));\n                }\n                if (value.length === 0) {\n                    if (optional)\n                        continue;\n                    throw new TypeError(\"Expected \\\"\".concat(token.name, \"\\\" to not be empty\"));\n                }\n                for (var j = 0; j < value.length; j++) {\n                    var segment = encode(value[j], token);\n                    if (validate && !matches[i].test(segment)) {\n                        throw new TypeError(\"Expected all \\\"\".concat(token.name, \"\\\" to match \\\"\").concat(token.pattern, \"\\\", but got \\\"\").concat(segment, \"\\\"\"));\n                    }\n                    path += token.prefix + segment + token.suffix;\n                }\n                continue;\n            }\n            if (typeof value === \"string\" || typeof value === \"number\") {\n                var segment = encode(String(value), token);\n                if (validate && !matches[i].test(segment)) {\n                    throw new TypeError(\"Expected \\\"\".concat(token.name, \"\\\" to match \\\"\").concat(token.pattern, \"\\\", but got \\\"\").concat(segment, \"\\\"\"));\n                }\n                path += token.prefix + segment + token.suffix;\n                continue;\n            }\n            if (optional)\n                continue;\n            var typeOfMessage = repeat ? \"an array\" : \"a string\";\n            throw new TypeError(\"Expected \\\"\".concat(token.name, \"\\\" to be \").concat(typeOfMessage));\n        }\n        return path;\n    };\n}\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match(str, options) {\n    var keys = [];\n    var re = pathToRegexp(str, keys, options);\n    return regexpToFunction(re, keys, options);\n}\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction(re, keys, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.decode, decode = _a === void 0 ? function (x) { return x; } : _a;\n    return function (pathname) {\n        var m = re.exec(pathname);\n        if (!m)\n            return false;\n        var path = m[0], index = m.index;\n        var params = Object.create(null);\n        var _loop_1 = function (i) {\n            if (m[i] === undefined)\n                return \"continue\";\n            var key = keys[i - 1];\n            if (key.modifier === \"*\" || key.modifier === \"+\") {\n                params[key.name] = m[i].split(key.prefix + key.suffix).map(function (value) {\n                    return decode(value, key);\n                });\n            }\n            else {\n                params[key.name] = decode(m[i], key);\n            }\n        };\n        for (var i = 1; i < m.length; i++) {\n            _loop_1(i);\n        }\n        return { path: path, index: index, params: params };\n    };\n}\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str) {\n    return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options) {\n    return options && options.sensitive ? \"\" : \"i\";\n}\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path, keys) {\n    if (!keys)\n        return path;\n    var groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n    var index = 0;\n    var execResult = groupsRegex.exec(path.source);\n    while (execResult) {\n        keys.push({\n            // Use parenthesized substring match if available, index otherwise\n            name: execResult[1] || index++,\n            prefix: \"\",\n            suffix: \"\",\n            modifier: \"\",\n            pattern: \"\",\n        });\n        execResult = groupsRegex.exec(path.source);\n    }\n    return path;\n}\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(paths, keys, options) {\n    var parts = paths.map(function (path) { return pathToRegexp(path, keys, options).source; });\n    return new RegExp(\"(?:\".concat(parts.join(\"|\"), \")\"), flags(options));\n}\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(path, keys, options) {\n    return tokensToRegexp(parse(path, options), keys, options);\n}\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(tokens, keys, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function (x) { return x; } : _d, _e = options.delimiter, delimiter = _e === void 0 ? \"/#?\" : _e, _f = options.endsWith, endsWith = _f === void 0 ? \"\" : _f;\n    var endsWithRe = \"[\".concat(escapeString(endsWith), \"]|$\");\n    var delimiterRe = \"[\".concat(escapeString(delimiter), \"]\");\n    var route = start ? \"^\" : \"\";\n    // Iterate over the tokens and create our regexp string.\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n        var token = tokens_1[_i];\n        if (typeof token === \"string\") {\n            route += escapeString(encode(token));\n        }\n        else {\n            var prefix = escapeString(encode(token.prefix));\n            var suffix = escapeString(encode(token.suffix));\n            if (token.pattern) {\n                if (keys)\n                    keys.push(token);\n                if (prefix || suffix) {\n                    if (token.modifier === \"+\" || token.modifier === \"*\") {\n                        var mod = token.modifier === \"*\" ? \"?\" : \"\";\n                        route += \"(?:\".concat(prefix, \"((?:\").concat(token.pattern, \")(?:\").concat(suffix).concat(prefix, \"(?:\").concat(token.pattern, \"))*)\").concat(suffix, \")\").concat(mod);\n                    }\n                    else {\n                        route += \"(?:\".concat(prefix, \"(\").concat(token.pattern, \")\").concat(suffix, \")\").concat(token.modifier);\n                    }\n                }\n                else {\n                    if (token.modifier === \"+\" || token.modifier === \"*\") {\n                        throw new TypeError(\"Can not repeat \\\"\".concat(token.name, \"\\\" without a prefix and suffix\"));\n                    }\n                    route += \"(\".concat(token.pattern, \")\").concat(token.modifier);\n                }\n            }\n            else {\n                route += \"(?:\".concat(prefix).concat(suffix, \")\").concat(token.modifier);\n            }\n        }\n    }\n    if (end) {\n        if (!strict)\n            route += \"\".concat(delimiterRe, \"?\");\n        route += !options.endsWith ? \"$\" : \"(?=\".concat(endsWithRe, \")\");\n    }\n    else {\n        var endToken = tokens[tokens.length - 1];\n        var isEndDelimited = typeof endToken === \"string\"\n            ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n            : endToken === undefined;\n        if (!strict) {\n            route += \"(?:\".concat(delimiterRe, \"(?=\").concat(endsWithRe, \"))?\");\n        }\n        if (!isEndDelimited) {\n            route += \"(?=\".concat(delimiterRe, \"|\").concat(endsWithRe, \")\");\n        }\n    }\n    return new RegExp(route, flags(options));\n}\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(path, keys, options) {\n    if (path instanceof RegExp)\n        return regexpToRegexp(path, keys);\n    if (Array.isArray(path))\n        return arrayToRegexp(path, keys, options);\n    return stringToRegexp(path, keys, options);\n}\n//# sourceMappingURL=index.js.map"],"names":["async","parsePath","path","options","keys","regexp","pathToRegexp","defaults","end","strict","sensitive","customElements","define","createProviderClass","escapeString","str","replace","flags","stringToRegexp","tokens","_a","_b","start","_c","_d","encode","x","_e","delimiter","_f","endsWith","endsWithRe","concat","delimiterRe","route","_i","tokens_1","length","token","prefix","suffix","pattern","push","modifier","mod","TypeError","name","endToken","isEndDelimited","indexOf","undefined","RegExp","tokensToRegexp","i","char","type","index","value","count","j","code","charCodeAt","lexer","prefixes","result","key","tryConsume","mustConsume","nextType","consumeText","safePattern","prev","prevText","delimiter_1","isSafe","name_1","pattern_1","parse","groupsRegex","execResult","exec","source","regexpToRegexp","Array","isArray","paths","parts","map","join","arrayToRegexp"],"sourceRoot":""}