{"version":3,"file":"chunks/inject-chat-preview-agent.b147f181.js","mappings":"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","sources":["webpack:///./src/data-providers/chat-preview/inspector.ts","webpack:///./src/data-providers/inject-chat-preview-agent.ts"],"sourcesContent":["// istanbul ignore file: working in progress\n// https://github.com/facebook/react/blob/cae635054e17a6f107a39d328649137b83f25972/packages/react-devtools-shared/src/backend/views/Highlighter/index.js\nimport { debounce } from \"lodash\";\nimport type {\n  InspectOutline,\n  InspectSelector,\n  InspectTarget,\n} from \"./interfaces.js\";\n\nlet isInspecting = false;\nconst IID_ITEM_PREFIX = \"item:\";\nlet currentHoverElement: Element | null = null;\n\nexport function toggleInspecting(inspecting: boolean): void {\n  if (isInspecting === inspecting) {\n    return;\n  }\n  isInspecting = inspecting;\n\n  const method = inspecting ? \"addEventListener\" : \"removeEventListener\";\n\n  window[method](\"click\", onClick as EventListener, true);\n  window[method](\"mousedown\", onMouseEvent as EventListener, true);\n  window[method](\"mouseover\", onMouseEvent as EventListener, true);\n  window[method](\"mouseup\", onMouseEvent as EventListener, true);\n  window[method](\"pointerdown\", onMouseEvent as EventListener, true);\n  window[method](\"pointerover\", onMouseEvent as EventListener, true);\n  window[method](\"pointerup\", onMouseEvent as EventListener, true);\n  window[method](\"pointerleave\", onPointerLeave as EventListener, true);\n  window[method](\"pointermove\", onPointerMove as EventListener, true);\n}\n\nfunction getElementsIncludingInShadowDOM(\n  iid: string,\n  isRoot?: boolean\n): HTMLElement[] {\n  const elements: HTMLElement[] = [];\n\n  function walk(root: Document | ShadowRoot) {\n    const candidates = root.querySelectorAll<HTMLElement>(\n      isRoot ? iid : `[data-iid=\"${iid}\"]`\n    );\n    elements.push(...candidates);\n\n    // If elements are found in the document, we should stop searching in shadow DOM.\n    if (root === document && candidates.length > 0) {\n      return;\n    }\n\n    // These useBrick in v3 bricks will be inside shadow DOM.\n    for (const item of root.querySelectorAll(\"*\")) {\n      if (item.shadowRoot) {\n        walk(item.shadowRoot);\n      }\n    }\n  }\n\n  walk(document);\n\n  return elements;\n}\n\nexport function select(selector: InspectSelector) {\n  const iid = `${selector.type}:${selector.uuid}`;\n  const elements = getElementsIncludingInShadowDOM(iid);\n  window.parent.postMessage(\n    {\n      channel: \"chat-preview\",\n      type: \"inspect-active\",\n      payload: {\n        outlines: elements.map((element) =>\n          getTargetOutline({ ...selector, element, label: getLabel(element) })\n        ),\n      },\n    },\n    location.origin\n  );\n}\n\nfunction onClick(event: MouseEvent): void {\n  event.preventDefault();\n  event.stopPropagation();\n  selectByClick(event);\n}\n\nfunction onMouseEvent(event: MouseEvent): void {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\nconst hoverOnTarget = debounce(\n  (eventTargets: EventTarget[], clientX: number, clientY: number) => {\n    let targets = getPossibleBrickTargets(eventTargets);\n    if (targets.length === 0) {\n      for (const element of eventTargets) {\n        if (element instanceof HTMLElement && element.shadowRoot) {\n          targets = getPossibleBrickTargets(\n            element.shadowRoot.elementsFromPoint(clientX, clientY)\n          );\n          break;\n        }\n      }\n    }\n    const hoverElement = targets.length > 0 ? targets[0].element : null;\n    if (hoverElement !== currentHoverElement) {\n      currentHoverElement = hoverElement;\n      window.parent.postMessage(\n        {\n          channel: \"chat-preview\",\n          type: \"inspect-hover\",\n          payload: {\n            outlines: targets.map(getTargetOutline),\n          },\n        },\n        location.origin\n      );\n    }\n  },\n  20,\n  { leading: true }\n);\n\nfunction onPointerMove(event: MouseEvent): void {\n  // `event.composedPath()` will be unavailable in debounced callback\n  hoverOnTarget(event.composedPath(), event.clientX, event.clientY);\n}\n\nfunction onPointerLeave(event: MouseEvent): void {\n  event.preventDefault();\n  event.stopPropagation();\n  currentHoverElement = null;\n  window.parent.postMessage(\n    {\n      channel: \"chat-preview\",\n      type: \"inspect-hover\",\n      payload: { outlines: [] },\n    },\n    location.origin\n  );\n}\n\nfunction selectByClick(event: MouseEvent): void {\n  const targets = getPossibleBrickTargets(event.composedPath());\n  window.parent.postMessage(\n    {\n      channel: \"chat-preview\",\n      type: \"inspect-active\",\n      payload: {\n        outlines: targets.map(getTargetOutline),\n      },\n    },\n    location.origin\n  );\n}\n\nfunction getPossibleBrickTargets(eventTargets: EventTarget[]) {\n  const inspectTargets: InspectTarget[] = [];\n  eventTargets.forEach((item) => {\n    let iid: string | undefined;\n    if (\n      (item as Node).nodeType === Node.ELEMENT_NODE &&\n      item instanceof HTMLElement &&\n      (iid = item.dataset.iid) &&\n      iid.startsWith(IID_ITEM_PREFIX)\n    ) {\n      const uuid = iid.substring(IID_ITEM_PREFIX.length);\n      inspectTargets.push({\n        type: \"item\",\n        uuid,\n        label: getLabel(item),\n        element: item,\n      });\n    }\n  });\n  return inspectTargets;\n}\n\nfunction getTargetOutline(target: InspectTarget): InspectOutline {\n  const { element, type, uuid, label } = target;\n  const { width, height, left, top } = element.getBoundingClientRect();\n  return {\n    width,\n    height,\n    left: left + window.scrollX,\n    top: top + window.scrollY,\n    type,\n    uuid,\n    label,\n  };\n}\n\nfunction getLabel(element: Element) {\n  return element.tagName.toLowerCase().split(\".\").pop();\n}\n","import { createProviderClass } from \"@next-core/utils/general\";\nimport { select, toggleInspecting } from \"./chat-preview/inspector\";\n\nlet injected = false;\n\nexport async function injectChatPreviewAgent(): Promise<unknown> {\n  if (injected) {\n    return;\n  }\n  injected = true;\n  import(\"./chat-preview/styles.css\");\n\n  sendMessage({ type: \"initialized\" });\n\n  window.addEventListener(\"message\", (e) => {\n    if (e.data?.channel === \"chat-preview\") {\n      switch (e.data.type) {\n        case \"toggle-inspecting\":\n          toggleInspecting(e.data.payload.inspecting);\n          break;\n        case \"select\":\n          select(e.data.payload);\n          break;\n      }\n    }\n  });\n\n  window.addEventListener(\"scroll\", () => {\n    sendMessage({\n      type: \"scroll\",\n      payload: {\n        x: window.scrollX,\n        y: window.scrollY,\n      },\n    });\n  });\n}\n\nfunction sendMessage(message: object) {\n  window.parent.postMessage(\n    {\n      channel: \"chat-preview\",\n      ...message,\n    },\n    location.origin\n  );\n}\n\ncustomElements.define(\n  \"visual-builder.inject-chat-preview-agent\",\n  createProviderClass(injectChatPreviewAgent)\n);\n"],"names":["isInspecting","IID_ITEM_PREFIX","currentHoverElement","toggleInspecting","inspecting","method","window","onClick","onMouseEvent","onPointerLeave","onPointerMove","select","selector","elements","iid","isRoot","walk","root","candidates","querySelectorAll","push","document","length","item","shadowRoot","getElementsIncludingInShadowDOM","type","uuid","parent","postMessage","channel","payload","outlines","map","element","getTargetOutline","label","getLabel","location","origin","event","preventDefault","stopPropagation","targets","getPossibleBrickTargets","composedPath","selectByClick","hoverOnTarget","debounce","eventTargets","clientX","clientY","HTMLElement","elementsFromPoint","hoverElement","leading","inspectTargets","forEach","nodeType","Node","ELEMENT_NODE","dataset","startsWith","substring","target","width","height","left","top","getBoundingClientRect","scrollX","scrollY","tagName","toLowerCase","split","pop","injected","async","injectChatPreviewAgent","sendMessage","addEventListener","e","_e$data","data","x","y","message","customElements","define","createProviderClass"],"sourceRoot":""}