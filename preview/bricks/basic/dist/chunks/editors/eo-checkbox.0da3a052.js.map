{"version":3,"file":"chunks/editors/eo-checkbox.0da3a052.js","mappings":"oJAAO,MAAMA,EAAmB,CAC9BC,KAAM,SACNC,KAAM,OACNC,UAAW,CACTF,KAAM,aACNG,MAAO,CACLC,OAAQ,aAGZC,SAAU,CACR,CACEL,KAAM,sBACNC,KAAM,OACNK,UAAW,CACTN,KAAM,gBACNG,MAAO,CACLI,KAAM,SAIZ,CACEP,KAAM,OACNQ,MAAO,MACPP,KAAM,UAER,CACED,KAAM,QACNQ,MAAO,KACPP,KAAM,UAER,CACED,KAAM,QACNQ,MAAO,IACPP,KAAM,SACNC,UAAW,CACTF,KAAM,cAERM,UAAW,2BAEb,CACEN,KAAM,WACNQ,MAAO,OACPP,KAAM,WAER,CACED,KAAM,yBACNC,KAAM,OACNK,UAAW,CACTN,KAAM,gBACNG,MAAO,CACLI,KAAM,SAIZ,CACEP,KAAM,UACNC,KAAM,SACNO,MAAO,KACPN,UAAW,CACTF,KAAM,cAERM,UAAW,2BAEb,CACEN,KAAM,OACNQ,MAAO,KACPP,KAAM,SACNC,UAAW,CACTF,KAAM,SACNG,MAAO,CACLM,YAAa,UACbC,YAAY,EACZC,QAAS,CAAC,UAAW,QAAQC,KAAKC,IAAI,CACpCC,MAAOD,EACPE,MAAOF,SAKf,CACEb,KAAM,UACNQ,MAAO,QACPP,KAAM,UACNC,UAAW,CACTC,MAAO,CACLa,KAAM,UAGV,cAAe,CACb,CACEC,OAAQ,eACRC,QAAS,CACPC,MAAO,CACLC,QAAS,uBAMnB,CACEpB,KAAM,eACNQ,MAAO,YACPP,KAAM,SACNC,UAAW,CACTF,KAAM,cAERM,UAAW,2BAEb,CACEN,KAAM,0BACNC,KAAM,OACNK,UAAW,CACTN,KAAM,gBACNG,MAAO,CACLI,KAAM,QAIZ,CACEP,KAAM,WACNQ,MAAO,KACPP,KAAM,UACNC,UAAW,CACTC,MAAO,CACLa,KAAM,UAGV,cAAe,CACb,CACEC,OAAQ,wBACRC,QAAS,CACPC,MAAO,CACLC,QAAS,uBAMnB,CACEpB,KAAM,wBACNQ,MAAO,SACPP,KAAM,W,+CC5FZoB,EAAAA,cAAcC,OAAO,eA5CrB,SAAkCC,GAChC,OAAO,SACLpB,GAEA,MAAM,qBACJqB,EAAoB,uBACpBC,EAAsB,aACtBC,EAAY,MACZC,EAAK,KACLC,GACEzB,EA2BJ,OAzBAoB,EAAMM,WAAU,KACdD,EAAKE,iBAAiB,CACpBC,UAAU,EACVC,SAAS,GACT,GACD,CAACJ,IAoBGL,EAAMU,cAAcT,EAAsB,CAC/CU,OAAQT,EAAuB1B,EAAAA,EAAyB2B,GACxDC,SAEJ,CACF,G","sources":["webpack:///./src/editors/eo-checkbox/eoCheckbox.schema.tsx","webpack:///./src/editors/eo-checkbox/index.tsx"],"sourcesContent":["export const eoCheckboxSchema = {\n  name: \"layout\",\n  type: \"void\",\n  component: {\n    name: \"FormLayout\",\n    props: {\n      layout: \"vertical\",\n    },\n  },\n  children: [\n    {\n      name: \"categoryTitle_basic\",\n      type: \"void\",\n      decorator: {\n        name: \"CategoryTitle\",\n        props: {\n          text: \"表单项\",\n        },\n      },\n    },\n    {\n      name: \"name\",\n      title: \"字段名\",\n      type: \"string\",\n    },\n    {\n      name: \"label\",\n      title: \"标签\",\n      type: \"string\",\n    },\n    {\n      name: \"value\",\n      title: \"值\",\n      type: \"string\",\n      component: {\n        name: \"CodeEditor\",\n      },\n      decorator: \"FormItemWithoutAdvanced\",\n    },\n    {\n      name: \"disabled\",\n      title: \"是否禁用\",\n      type: \"boolean\",\n    },\n    {\n      name: \"categoryTitle_checkbox\",\n      type: \"void\",\n      decorator: {\n        name: \"CategoryTitle\",\n        props: {\n          text: \"复选框\",\n        },\n      },\n    },\n    {\n      name: \"options\",\n      type: \"string\",\n      title: \"选项\",\n      component: {\n        name: \"CodeEditor\",\n      },\n      decorator: \"FormItemWithoutAdvanced\",\n    },\n    {\n      name: \"type\",\n      title: \"类型\",\n      type: \"string\",\n      component: {\n        name: \"Select\",\n        props: {\n          placeholder: \"请选择按钮类型\",\n          allowClear: true,\n          options: [\"default\", \"icon\"].map((item) => ({\n            label: item,\n            value: item,\n          })),\n        },\n      },\n    },\n    {\n      name: \"isGroup\",\n      title: \"分组复选框\",\n      type: \"boolean\",\n      component: {\n        props: {\n          size: \"small\",\n        },\n      },\n      \"x-reactions\": [\n        {\n          target: \"optionGroups\",\n          fulfill: {\n            state: {\n              visible: \"{{$self.value}}\",\n            },\n          },\n        },\n      ],\n    },\n    {\n      name: \"optionGroups\",\n      title: \"多选框选项分组数据\",\n      type: \"string\",\n      component: {\n        name: \"CodeEditor\",\n      },\n      decorator: \"FormItemWithoutAdvanced\",\n    },\n    {\n      name: \"categoryTitle_validator\",\n      type: \"void\",\n      decorator: {\n        name: \"CategoryTitle\",\n        props: {\n          text: \"校验\",\n        },\n      },\n    },\n    {\n      name: \"required\",\n      title: \"必填\",\n      type: \"boolean\",\n      component: {\n        props: {\n          size: \"small\",\n        },\n      },\n      \"x-reactions\": [\n        {\n          target: \"requiredValidatorText\",\n          fulfill: {\n            state: {\n              visible: \"{{$self.value}}\",\n            },\n          },\n        },\n      ],\n    },\n    {\n      name: \"requiredValidatorText\",\n      title: \"必填提示文字\",\n      type: \"string\",\n    },\n  ],\n};\n","import type _React from \"react\";\nimport { customEditors } from \"@next-core/runtime\";\nimport type { EditorComponentProps } from \"@next-shared/property-editor\";\nimport { eoCheckboxSchema } from \"./eoCheckbox.schema\";\n\nfunction EoButtonComponentFactory(React: typeof _React) {\n  return function EoButtonComponent(\n    props: EditorComponentProps\n  ): React.ReactElement {\n    const {\n      SchemaFieldComponent,\n      formilySchemaFormatter,\n      advancedMode,\n      scope,\n      form,\n    } = props;\n\n    React.useEffect(() => {\n      form.setInitialValues({\n        required: false,\n        isGroup: false,\n      });\n    }, [form]);\n\n    // TODO codeEditor模式的\n    // React.useEffect(() => {\n    //   const { onSubmit } = effects;\n    //   form.addEffects(\"formEffect\", () => {\n    //     onSubmit((value, form) => {\n    //       const transformValue = yaml.load(value.options);\n\n    //       return transformValue;\n    //     })\n    //   })\n    // }, [])\n\n    // React.useEffect(() => {\n    //   form.setInitialValues({\n    //     options: `# - label: 开发\\n#   value: dev\\n# - label: 测\\n#   value: test\\n# - label: 预发布\\n#   value: uat\\n`\n    //   })\n    // }, [])\n\n    return React.createElement(SchemaFieldComponent, {\n      schema: formilySchemaFormatter(eoCheckboxSchema as any, advancedMode!),\n      scope,\n    });\n  };\n}\n\ncustomEditors.define(\"eo-checkbox\", EoButtonComponentFactory);\n"],"names":["eoCheckboxSchema","name","type","component","props","layout","children","decorator","text","title","placeholder","allowClear","options","map","item","label","value","size","target","fulfill","state","visible","customEditors","define","React","SchemaFieldComponent","formilySchemaFormatter","advancedMode","scope","form","useEffect","setInitialValues","required","isGroup","createElement","schema"],"sourceRoot":""}