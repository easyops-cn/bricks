{"version":3,"file":"chunks/eo-draw-canvas.75290631.js","mappings":"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","sources":["webpack:///./src/draw-canvas/index.tsx"],"sourcesContent":["import React, {\n  createRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport { createDecorators, type EventEmitter } from \"@next-core/element\";\nimport { ReactNextElement } from \"@next-core/react-element\";\nimport type { UseSingleBrickConf } from \"@next-core/react-runtime\";\nimport { unwrapProvider } from \"@next-core/utils/general\";\nimport \"@next-core/theme\";\nimport { uniqueId } from \"lodash\";\nimport classNames from \"classnames\";\nimport { select } from \"d3-selection\";\nimport type { lockBodyScroll as _lockBodyScroll } from \"@next-bricks/basic/data-providers/lock-body-scroll/lock-body-scroll\";\nimport type {\n  NodePosition,\n  PositionTuple,\n  RangeTuple,\n  SizeTuple,\n  TransformLiteral,\n} from \"../diagram/interfaces\";\nimport type {\n  ActiveTarget,\n  Cell,\n  EdgeCell,\n  InitialCell,\n  NodeBrickConf,\n  NodeCell,\n  NodeId,\n  DecoratorCell,\n  DecoratorType,\n  CellContextMenuDetail,\n  ConnectLineState,\n  Deferred,\n  ConnectNodesDetail,\n  EdgeLineConf,\n  DecoratorTextChangeDetail,\n  NodeView,\n  LayoutType,\n  LayoutOptions,\n  SmartConnectLineState,\n  LineConnecterConf,\n  Direction,\n  EditableLineInfo,\n  LineEditorState,\n  EdgeView,\n  LineSettings,\n} from \"./interfaces\";\nimport { rootReducer } from \"./reducers\";\nimport { MarkerComponent } from \"../diagram/MarkerComponent\";\nimport {\n  isContainerDecoratorCell,\n  isEdgeCell,\n  isEdgeSide,\n  isNodeCell,\n  isNodeOrAreaDecoratorCell,\n  isTextDecoratorCell,\n} from \"./processors/asserts\";\nimport type {\n  EdgeViewChangePayload,\n  LineTuple,\n  MoveCellPayload,\n  ResizeCellPayload,\n} from \"./reducers/interfaces\";\nimport { sameTarget } from \"./processors/sameTarget\";\nimport { handleKeyboard } from \"./processors/handleKeyboard\";\nimport { CellComponent } from \"./CellComponent\";\nimport { ConnectLineComponent } from \"./ConnectLineComponent\";\nimport { initializeCells } from \"./processors/initializeCells\";\nimport { updateCells } from \"./processors/updateCells\";\nimport { getUnrelatedCells } from \"./processors/getUnrelatedCells\";\nimport {\n  DEFAULT_NODE_SIZE,\n  DEFAULT_AREA_WIDTH,\n  DEFAULT_AREA_HEIGHT,\n  DEFAULT_DEGRADED_THRESHOLD,\n  DEFAULT_NODE_PADDING_FOR_SMART_LINES,\n} from \"./constants\";\nimport { useZoom } from \"../shared/canvas/useZoom\";\nimport { useActiveTarget } from \"../shared/canvas/useActiveTarget\";\nimport { ZoomBarComponent } from \"../shared/canvas/ZoomBarComponent\";\nimport { useLayout } from \"../shared/canvas/useLayout\";\nimport { useReady } from \"../shared/canvas/useReady\";\nimport { useLineMarkers } from \"../shared/canvas/useLineMarkers\";\nimport { getConnectPointsOfRectangle } from \"../shared/canvas/shapes/Rectangle\";\nimport { LineConnectorComponent } from \"./LineConnectorComponent\";\nimport { HoverStateContext, type HoverState } from \"./HoverStateContext\";\nimport { handleLasso } from \"./processors/handleLasso\";\nimport styleText from \"../shared/canvas/styles.shadow.css\";\nimport zoomBarStyleText from \"../shared/canvas/ZoomBarComponent.shadow.css\";\nimport { SmartConnectLineComponent } from \"./SmartConnectLineComponent\";\nimport { cellToTarget } from \"./processors/cellToTarget\";\nimport { handleNodeContainedChange } from \"./processors/handleNodeContainedChange\";\nimport { LineEditorComponent } from \"./LineEditorComponent\";\nimport { EditingLineComponent } from \"./EditingLineComponent\";\n\nconst lockBodyScroll = unwrapProvider<typeof _lockBodyScroll>(\n  \"basic.lock-body-scroll\"\n);\n\nconst { defineElement, property, method, event } = createDecorators();\n\nexport interface EoDrawCanvasProps {\n  cells: InitialCell[] | undefined;\n  layout: LayoutType;\n  layoutOptions?: LayoutOptions;\n  defaultNodeSize: SizeTuple;\n  defaultNodeBricks?: NodeBrickConf[];\n  defaultEdgeLines?: EdgeLineConf[];\n  degradedThreshold?: number;\n  degradedNodeLabel?: string;\n  activeTarget?: ActiveTarget | null;\n  fadeUnrelatedCells?: boolean;\n  zoomable?: boolean;\n  scrollable?: boolean;\n  pannable?: boolean;\n  dragBehavior?: DragBehavior;\n  ctrlDragBehavior?: CtrlDragBehavior;\n  scaleRange?: RangeTuple;\n  lineSettings?: LineSettings;\n  lineConnector?: LineConnecterConf | boolean;\n  allowEdgeToArea?: boolean;\n}\n\nexport type DragBehavior = \"none\" | \"lasso\" | \"grab\";\nexport type CtrlDragBehavior = \"none\" | \"grab\";\n\nexport interface DropNodeInfo extends AddNodeInfo {\n  /** [PointerEvent::clientX, PointerEvent::clientY] */\n  position: PositionTuple;\n}\n\nexport interface DropDecoratorInfo {\n  decorator: DecoratorType;\n  /** [PointerEvent::clientX, PointerEvent::clientY] */\n  position: PositionTuple;\n  text?: string;\n  direction?: Direction;\n}\n\nexport interface AddNodeInfo {\n  id: NodeId;\n  useBrick?: UseSingleBrickConf;\n  data?: unknown;\n  size?: SizeTuple;\n}\n\nexport interface AddEdgeInfo {\n  source: NodeId;\n  target: NodeId;\n  data?: unknown;\n}\n\nexport interface UpdateCellsContext {\n  reason: \"add-related-nodes\";\n  parent: NodeId;\n}\n\nexport interface AddNodesContext {\n  defaultNodeSize: SizeTuple;\n  canvasWidth: number;\n  canvasHeight: number;\n}\n\nexport const EoDrawCanvasComponent = React.forwardRef(\n  LegacyEoDrawCanvasComponent\n);\n\n/**\n * 用于手工绘图的画布。\n *\n * 注意：将配套另外一个用于展示的画布构件。\n */\nexport\n@defineElement(\"eo-draw-canvas\", {\n  styleTexts: [styleText, zoomBarStyleText],\n})\nclass EoDrawCanvas extends ReactNextElement implements EoDrawCanvasProps {\n  /**\n   * 仅当初始化时使用，渲染后重新设置 `cells` 将无效。\n   */\n  @property({ attribute: false })\n  accessor cells: InitialCell[] | undefined;\n\n  @property({ type: String })\n  accessor layout: LayoutType;\n\n  @property({ attribute: false })\n  accessor layoutOptions: LayoutOptions | undefined;\n\n  /**\n   * @default [100,20]\n   */\n  @property({ attribute: false })\n  accessor defaultNodeSize: SizeTuple = [DEFAULT_NODE_SIZE, DEFAULT_NODE_SIZE];\n\n  @property({ attribute: false })\n  accessor defaultNodeBricks: NodeBrickConf[] | undefined;\n\n  /**\n   * 当节点数量达到或超过 `degradedThreshold` 时，节点将被降级展示。\n   *\n   * @default 500\n   */\n  @property({ type: Number })\n  accessor degradedThreshold: number | undefined;\n\n  // Set `attribute` to `false` even if it accepts string value.\n  // Because when passing like \"<% DATA.node.data.name %>\", it will be\n  // evaluated as object temporarily.\n  /**\n   * 设置节点将降级展示时显示的名称。\n   *\n   * @default \"<% DATA.node.id %>\"\n   */\n  @property({ attribute: false })\n  accessor degradedNodeLabel: string | undefined;\n\n  /**\n   * 使用条件判断设置默认的边对应的连线。在 `if` 表达式中 `DATA` 为 `{ edge }`，例如：\n   *\n   * ```yaml\n   * defaultEdgeLines:\n   *   - if: <% DATA.edge.data?.virtual %>\n   *     dashed: true\n   * ```\n   */\n  @property({ attribute: false })\n  accessor defaultEdgeLines: EdgeLineConf[] | undefined;\n\n  @property({ attribute: false })\n  accessor activeTarget: ActiveTarget | null | undefined;\n\n  /**\n   * 当 `activeTarget` 不为 `null` 时，隐藏其他跟该 `activeTarget` 无关的元素。\n   */\n  @property({ type: Boolean })\n  accessor fadeUnrelatedCells: boolean | undefined;\n\n  @property({ type: Boolean })\n  accessor zoomable: boolean | undefined = true;\n\n  @property({ type: Boolean })\n  accessor scrollable: boolean | undefined = true;\n\n  @property({ type: Boolean })\n  accessor pannable: boolean | undefined = true;\n\n  @property({ type: Boolean })\n  accessor allowEdgeToArea: boolean | undefined = false;\n\n  /**\n   * 按住鼠标拖动时的行为：\n   *  - `none`：无\n   *  - `lasso`：绘制选区\n   *  - `grab`：拖动画布\n   *\n   * @default \"none\"\n   */\n  @property()\n  accessor dragBehavior: DragBehavior | undefined;\n\n  /**\n   * 按住 ctrl 键并按住鼠标拖动时的行为：\n   *  - `none`：无\n   *  - `grab`：拖动画布\n   *\n   * @default \"none\"\n   */\n  @property()\n  accessor ctrlDragBehavior: CtrlDragBehavior | undefined;\n\n  @property({ attribute: false })\n  accessor scaleRange: RangeTuple | undefined;\n\n  @property({ attribute: false })\n  accessor lineSettings: LineSettings | undefined;\n\n  @property({ attribute: false })\n  accessor lineConnector: LineConnecterConf | boolean | undefined;\n\n  @event({ type: \"activeTarget.change\" })\n  accessor #activeTargetChangeEvent!: EventEmitter<ActiveTarget | null>;\n\n  #handleActiveTargetChange = (target: ActiveTarget | null) => {\n    this.#activeTargetChangeEvent.emit(target);\n  };\n\n  #handleSwitchActiveTarget = (target: ActiveTarget | null) => {\n    if (!sameTarget(target, this.activeTarget)) {\n      this.activeTarget = target;\n    }\n  };\n\n  /**\n   * @deprecated Use `cell.move` instead.\n   */\n  @event({ type: \"node.move\" })\n  accessor #nodeMoveEvent!: EventEmitter<MoveCellPayload>;\n\n  @event({ type: \"cell.move\" })\n  accessor #cellMoveEvent!: EventEmitter<MoveCellPayload>;\n\n  #handleCellMove = (info: MoveCellPayload) => {\n    this.#cellMoveEvent.emit(info);\n    if (info.type === \"node\") {\n      this.#nodeMoveEvent.emit(info);\n    }\n  };\n\n  @event({ type: \"cells.move\" })\n  accessor #cellsMoveEvent!: EventEmitter<MoveCellPayload[]>;\n\n  #handleCellsMove = (info: MoveCellPayload[]) => {\n    this.#cellsMoveEvent.emit(info);\n  };\n\n  @event({ type: \"cell.resize\" })\n  accessor #cellResizeEvent!: EventEmitter<ResizeCellPayload>;\n\n  #handleCellResize = (info: ResizeCellPayload) => {\n    this.#cellResizeEvent.emit(info);\n  };\n\n  /**\n   * @deprecated Use `cell.delete` instead.\n   */\n  @event({ type: \"node.delete\" })\n  accessor #nodeDelete!: EventEmitter<Cell>;\n\n  @event({ type: \"cell.delete\" })\n  accessor #cellDelete!: EventEmitter<Cell>;\n\n  #handleCellDelete = (cell: Cell) => {\n    this.#cellDelete.emit(cell);\n    if (cell.type === \"node\") {\n      this.#nodeDelete.emit(cell);\n    }\n  };\n\n  @event({ type: \"cells.delete\" })\n  accessor #cellsDelete!: EventEmitter<Cell[]>;\n\n  #handleCellsDelete = (cells: Cell[]) => {\n    this.#cellsDelete.emit(cells);\n  };\n\n  @event({ type: \"cell.contextmenu\" })\n  accessor #cellContextMenu!: EventEmitter<CellContextMenuDetail>;\n\n  #handleCellContextMenu = (detail: CellContextMenuDetail) => {\n    this.#cellContextMenu.emit(detail);\n  };\n\n  /**\n   * 通过画布绘图的方式添加边（手动调用 `addEdge` 方法不会触发该事件）。\n   */\n  @event({ type: \"edge.add\" })\n  accessor #edgeAdd!: EventEmitter<ConnectNodesDetail>;\n\n  #handleEdgeAdd = (edge: ConnectNodesDetail) => {\n    this.#edgeAdd.emit(edge);\n  };\n\n  @event({ type: \"edge.view.change\" })\n  accessor #edgeViewChange!: EventEmitter<EdgeViewChangePayload>;\n\n  #handleEdgeViewChange = (detail: EdgeViewChangePayload) => {\n    this.#edgeViewChange.emit(detail);\n  };\n\n  @event({ type: \"decorator.text.change\" })\n  accessor #decoratorTextChange!: EventEmitter<DecoratorTextChangeDetail>;\n\n  #handleDecoratorTextChange = (detail: DecoratorTextChangeDetail) => {\n    this.#decoratorTextChange.emit(detail);\n  };\n\n  /**\n   * node节点跟容器组关系改变事件，有containerCell是新增关系，否则删除关系\n   */\n  @event({ type: \"node.container.change\" })\n  accessor #containerContainerChange!: EventEmitter<MoveCellPayload[]>;\n\n  #handleContainerContainerChange = (detail: MoveCellPayload[]) => {\n    this.#containerContainerChange.emit(detail);\n  };\n\n  /**\n   * 缩放变化后，从素材库拖拽元素进画布时，拖拽图像应设置对应的缩放比例。\n   */\n  @event({ type: \"scale.change\" })\n  accessor #scaleChange!: EventEmitter<number>;\n\n  #handleScaleChange = (scale: number) => {\n    this.#scaleChange.emit(scale);\n  };\n\n  @method()\n  async dropNode({\n    id,\n    position,\n    size,\n    data,\n    useBrick,\n  }: DropNodeInfo): Promise<NodeCell | null> {\n    // Drag and then drop a node\n    const droppedInside = document\n      .elementsFromPoint?.(position[0], position[1])\n      ?.includes(this);\n    if (droppedInside) {\n      const boundingClientRect = this.getBoundingClientRect();\n      const transform = this.#canvasRef.current!.getTransform();\n      const newNode = {\n        type: \"node\",\n        id,\n        view: {\n          ...(this.layout === \"force\" || this.layout === \"dagre\"\n            ? null\n            : {\n                x:\n                  (position[0] - boundingClientRect.left - transform.x) /\n                  transform.k,\n                y:\n                  (position[1] - boundingClientRect.top - transform.y) /\n                  transform.k,\n              }),\n          width: size?.[0] ?? this.defaultNodeSize[0],\n          height: size?.[1] ?? this.defaultNodeSize[0],\n        },\n        data,\n        useBrick,\n      } as NodeCell;\n      this.#canvasRef.current?.dropNode(newNode);\n      return newNode;\n    }\n    return null;\n  }\n\n  @method()\n  async dropDecorator({\n    position,\n    decorator,\n    text,\n    direction,\n  }: DropDecoratorInfo): Promise<DecoratorCell | null> {\n    // Drag and then drop a node\n    const droppedInside = document\n      .elementsFromPoint?.(position[0], position[1])\n      ?.includes(this);\n    if (droppedInside) {\n      const boundingClientRect = this.getBoundingClientRect();\n      const transform = this.#canvasRef.current!.getTransform();\n      const newDecorator: DecoratorCell = {\n        type: \"decorator\",\n        decorator,\n        id: uuidV4(),\n        view: {\n          x:\n            (position[0] - boundingClientRect.left - transform.x) / transform.k,\n          y: (position[1] - boundingClientRect.top - transform.y) / transform.k,\n          width: DEFAULT_AREA_WIDTH,\n          height: DEFAULT_AREA_HEIGHT,\n          text,\n          direction,\n        },\n      };\n      this.#canvasRef.current?.dropDecorator(newDecorator);\n      return newDecorator;\n    }\n    return null;\n  }\n\n  @method()\n  async addNodes(nodes: AddNodeInfo[]): Promise<NodeCell[]> {\n    if (nodes.length === 0) {\n      return [];\n    }\n    const newNodes = nodes.map<NodeCell>(({ size, useBrick, id, data }) => ({\n      type: \"node\",\n      id,\n      data,\n      view: {\n        width: size?.[0] ?? this.defaultNodeSize[0],\n        height: size?.[1] ?? this.defaultNodeSize[0],\n      } as NodeView,\n      useBrick,\n    }));\n    return this.#canvasRef.current!.addNodes(newNodes, {\n      defaultNodeSize: this.defaultNodeSize,\n      canvasWidth: this.clientWidth,\n      canvasHeight: this.clientHeight,\n    });\n  }\n\n  @method()\n  async addEdge({ source, target, data }: AddEdgeInfo): Promise<EdgeCell> {\n    const newEdge: EdgeCell = {\n      type: \"edge\",\n      source,\n      target,\n      data,\n      view: this.lineSettings,\n    };\n    this.#canvasRef.current?.addEdge(newEdge);\n    return newEdge;\n  }\n\n  @method()\n  manuallyConnectNodes(source: NodeId): Promise<ConnectNodesDetail> {\n    return this.#canvasRef.current!.manuallyConnectNodes(source);\n  }\n\n  @method()\n  async updateCells(\n    cells: InitialCell[],\n    ctx?: UpdateCellsContext\n  ): Promise<{ updated: Cell[] }> {\n    await this.#waitForCanvasRef();\n    const { updated } = this.#canvasRef.current!.updateCells(cells, {\n      ...ctx,\n      defaultNodeSize: this.defaultNodeSize,\n      canvasWidth: this.clientWidth,\n      canvasHeight: this.clientHeight,\n    });\n    return { updated };\n  }\n\n  #waitForCanvasRef() {\n    return new Promise<void>((resolve) => {\n      const check = () => {\n        if (this.#canvasRef.current) {\n          resolve();\n        } else {\n          setTimeout(check, 10);\n        }\n      };\n      check();\n    });\n  }\n\n  #canvasRef = createRef<DrawCanvasRef>();\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    lockBodyScroll(this, false);\n  }\n\n  render() {\n    return (\n      <EoDrawCanvasComponent\n        host={this}\n        ref={this.#canvasRef}\n        layout={this.layout}\n        layoutOptions={this.layoutOptions}\n        cells={this.cells}\n        defaultNodeSize={this.defaultNodeSize}\n        defaultNodeBricks={this.defaultNodeBricks}\n        defaultEdgeLines={this.defaultEdgeLines}\n        degradedThreshold={this.degradedThreshold}\n        degradedNodeLabel={this.degradedNodeLabel}\n        activeTarget={this.activeTarget}\n        fadeUnrelatedCells={this.fadeUnrelatedCells}\n        zoomable={this.zoomable}\n        scrollable={this.scrollable}\n        pannable={this.pannable}\n        dragBehavior={this.dragBehavior}\n        ctrlDragBehavior={this.ctrlDragBehavior}\n        scaleRange={this.scaleRange}\n        lineSettings={this.lineSettings}\n        lineConnector={this.lineConnector}\n        allowEdgeToArea={this.allowEdgeToArea}\n        onActiveTargetChange={this.#handleActiveTargetChange}\n        onSwitchActiveTarget={this.#handleSwitchActiveTarget}\n        onCellMove={this.#handleCellMove}\n        onCellsMove={this.#handleCellsMove}\n        onCellResize={this.#handleCellResize}\n        onCellDelete={this.#handleCellDelete}\n        onCellsDelete={this.#handleCellsDelete}\n        onEdgeAdd={this.#handleEdgeAdd}\n        onCellContextMenu={this.#handleCellContextMenu}\n        onDecoratorTextChange={this.#handleDecoratorTextChange}\n        onContainerContainerChange={this.#handleContainerContainerChange}\n        onScaleChange={this.#handleScaleChange}\n        onEdgeViewChange={this.#handleEdgeViewChange}\n      />\n    );\n  }\n}\n\nexport interface EoDrawCanvasComponentProps extends EoDrawCanvasProps {\n  host: HTMLElement;\n  onActiveTargetChange(target: ActiveTarget | null): void;\n  onSwitchActiveTarget(target: ActiveTarget | null): void;\n  onCellMove(info: MoveCellPayload): void;\n  onCellResize(cell: ResizeCellPayload): void;\n  onCellDelete(cell: Cell): void;\n  onCellsMove(info: MoveCellPayload[]): void;\n  onCellsDelete(cells: Cell[]): void;\n  onCellContextMenu(detail: CellContextMenuDetail): void;\n  onEdgeAdd(detail: ConnectNodesDetail): void;\n  onEdgeViewChange(detail: EdgeViewChangePayload): void;\n  onDecoratorTextChange(detail: DecoratorTextChangeDetail): void;\n  onContainerContainerChange(detail: MoveCellPayload[]): void;\n  onScaleChange(scale: number): void;\n}\n\nexport interface DrawCanvasRef {\n  dropNode(node: NodeCell): void;\n  dropDecorator(decorator: DecoratorCell): void;\n  addNodes(nodes: NodeCell[], ctx: AddNodesContext): NodeCell[];\n  addEdge(edge: EdgeCell): void;\n  manuallyConnectNodes(source: NodeId): Promise<ConnectNodesDetail>;\n  updateCells(\n    cells: InitialCell[],\n    ctx: Partial<UpdateCellsContext> & {\n      defaultNodeSize: SizeTuple;\n      canvasWidth: number;\n      canvasHeight: number;\n    }\n  ): {\n    cells: Cell[];\n    updated: Cell[];\n  };\n  getTransform(): TransformLiteral;\n}\n\nfunction LegacyEoDrawCanvasComponent(\n  {\n    host,\n    layout,\n    layoutOptions,\n    cells: initialCells,\n    defaultNodeSize,\n    defaultNodeBricks,\n    defaultEdgeLines,\n    degradedThreshold,\n    degradedNodeLabel,\n    activeTarget: _activeTarget,\n    fadeUnrelatedCells,\n    zoomable,\n    scrollable,\n    pannable,\n    dragBehavior,\n    ctrlDragBehavior,\n    scaleRange: _scaleRange,\n    lineSettings,\n    lineConnector,\n    allowEdgeToArea,\n    onActiveTargetChange,\n    onSwitchActiveTarget,\n    onCellMove,\n    onCellResize,\n    onCellDelete,\n    onCellsMove,\n    onCellsDelete,\n    onCellContextMenu,\n    onEdgeAdd,\n    onDecoratorTextChange,\n    onScaleChange,\n    onContainerContainerChange,\n    onEdgeViewChange,\n  }: EoDrawCanvasComponentProps,\n  ref: React.Ref<DrawCanvasRef>\n) {\n  const [{ cells, layoutKey }, dispatch] = useReducer(\n    rootReducer,\n    initialCells,\n    (initialCells) => ({\n      cells: initializeCells(initialCells, { defaultNodeSize }),\n      layoutKey: 0,\n    })\n  );\n\n  // When nodes are greater or equal to threshold, the diagram will be degraded.\n  // Thus all nodes will be displayed as simple svg elements instead of bricks.\n  const degraded = useMemo(\n    () =>\n      cells.filter(isNodeCell).length >=\n      (degradedThreshold ?? DEFAULT_DEGRADED_THRESHOLD),\n    [cells, degradedThreshold]\n  );\n\n  const rootRef = useRef<SVGSVGElement>(null);\n  const manualConnectDeferredRef = useRef<Deferred<ConnectNodesDetail> | null>(\n    null\n  );\n  const [editingTexts, setEditingTexts] = useState<string[]>([]);\n  const [activeContainers, setActiveContainers] = useState<string[]>([]);\n  const { grabbing, transform, zoomer, scaleRange } = useZoom({\n    rootRef,\n    zoomable,\n    scrollable,\n    pannable,\n    draggable: dragBehavior === \"grab\",\n    ctrlDraggable: ctrlDragBehavior === \"grab\",\n    scaleRange: _scaleRange,\n    onSwitchActiveTarget,\n  });\n\n  useEffect(() => {\n    onScaleChange(transform.k);\n  }, [onScaleChange, transform.k]);\n\n  const [lassoRect, setLassoRect] = useState<NodeView | null>(null);\n\n  const [connectLineState, setConnectLineState] =\n    useState<ConnectLineState | null>(null);\n\n  const { centered, setCentered, getNextLayoutKey } = useLayout({\n    layout,\n    layoutOptions,\n    rootRef,\n    cells,\n    zoomable,\n    zoomer,\n    scaleRange,\n    layoutKey,\n    allowEdgeToArea,\n    dispatch,\n  });\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      dropNode(node) {\n        // Do not apply auto centering when dropping a node in manual layout.\n        if (layout !== \"dagre\" && layout !== \"force\") {\n          setCentered(true);\n        }\n        dispatch({ type: \"drop-node\", payload: node });\n      },\n      dropDecorator(decorator) {\n        // Do not apply auto centering when dropping a decorator in manual layout.\n        if (layout !== \"dagre\" && layout !== \"force\") {\n          setCentered(true);\n        }\n        dispatch({ type: \"drop-decorator\", payload: decorator });\n      },\n      addNodes(\n        nodes,\n        { defaultNodeSize, canvasWidth, canvasHeight }: AddNodesContext\n      ) {\n        const index =\n          cells.findLastIndex(\n            (cell) => !(cell.type === \"decorator\" && cell.decorator === \"text\")\n          ) + 1;\n        const newCells = [\n          ...cells.slice(0, index),\n          ...nodes,\n          ...cells.slice(index),\n        ];\n        const {\n          cells: allCells,\n          updated,\n          shouldReCenter,\n        } = updateCells({\n          cells: newCells,\n          layout,\n          previousCells: cells,\n          defaultNodeSize,\n          canvasWidth,\n          canvasHeight,\n          scaleRange,\n          transform,\n          allowEdgeToArea,\n        });\n        if (shouldReCenter) {\n          setCentered(false);\n        }\n        dispatch({ type: \"update-cells\", payload: allCells });\n        return updated.filter((node) =>\n          nodes.includes(node as NodeCell)\n        ) as NodeCell[];\n      },\n      addEdge(edge) {\n        dispatch({ type: \"add-edge\", payload: edge });\n      },\n      updateCells(newCells, ctx) {\n        const { shouldReCenter, ...result } = updateCells({\n          ...ctx,\n          layout,\n          previousCells: cells,\n          cells: newCells,\n          scaleRange,\n          transform,\n          allowEdgeToArea,\n        });\n        if (shouldReCenter) {\n          setCentered(false);\n        }\n        dispatch({ type: \"update-cells\", payload: result.cells });\n        return result;\n      },\n      getTransform() {\n        return transform;\n      },\n      manuallyConnectNodes(sourceId) {\n        const source = cells.find(\n          (cell) => isEdgeSide(cell, allowEdgeToArea) && cell.id === sourceId\n        ) as NodeCell | DecoratorCell | undefined;\n        if (source) {\n          const rect = rootRef.current!.getBoundingClientRect();\n          setConnectLineState({\n            source,\n            from: [\n              source.view.x + source.view.width / 2,\n              source.view.y + source.view.height / 2,\n            ],\n            offset: [rect.left, rect.top],\n          });\n          const promise = new Promise<ConnectNodesDetail>((resolve, reject) => {\n            manualConnectDeferredRef.current = { resolve, reject };\n          });\n          return promise;\n        }\n        return Promise.reject(null);\n      },\n    }),\n    [cells, layout, scaleRange, setCentered, transform, allowEdgeToArea]\n  );\n\n  const handleConnect = useCallback(\n    (state: ConnectLineState, to: PositionTuple) => {\n      // Find the target node from top bo bottom,\n      // detect whether the pointer is inside the target node.\n      for (let i = cells.length - 1; i >= 0; i--) {\n        const cell = cells[i];\n        // Currently ignore connecting to self\n        if (isEdgeSide(cell, allowEdgeToArea) && cell.id !== state.source.id) {\n          if (\n            cell.view.x < to[0] &&\n            cell.view.x + cell.view.width > to[0] &&\n            cell.view.y < to[1] &&\n            cell.view.y + cell.view.height > to[1]\n          ) {\n            manualConnectDeferredRef.current?.resolve({\n              source: state.source,\n              target: cell,\n            });\n            break;\n          }\n        }\n      }\n      manualConnectDeferredRef.current?.reject(null);\n      setConnectLineState(null);\n    },\n    [allowEdgeToArea, cells]\n  );\n  const [smartConnectLineState, setSmartConnectLineState] =\n    useState<SmartConnectLineState | null>(null);\n\n  useEffect(() => {\n    lockBodyScroll(\n      host,\n      !!(connectLineState || !!smartConnectLineState || lassoRect)\n    );\n  }, [connectLineState, host, smartConnectLineState, lassoRect]);\n\n  const activeTarget = useActiveTarget({\n    rootRef,\n    activeTarget: _activeTarget,\n    onActiveTargetChange,\n  });\n\n  const [unrelatedCells, setUnrelatedCells] = useState<Cell[]>([]);\n  useEffect(() => {\n    const nextUnrelated = fadeUnrelatedCells\n      ? getUnrelatedCells(\n          cells,\n          connectLineState,\n          activeTarget,\n          allowEdgeToArea\n        )\n      : [];\n    // Do not update the state when prev and next are both empty.\n    setUnrelatedCells((prev) =>\n      prev.length === 0 && nextUnrelated.length === 0 ? prev : nextUnrelated\n    );\n  }, [\n    activeTarget,\n    cells,\n    connectLineState,\n    fadeUnrelatedCells,\n    allowEdgeToArea,\n  ]);\n\n  useEffect(() => {\n    const root = rootRef.current;\n    if (!root || editingTexts.length > 0) {\n      return;\n    }\n    const onKeydown = (event: KeyboardEvent) => {\n      const action = handleKeyboard(event, {\n        cells,\n        activeTarget,\n      });\n\n      switch (action?.action) {\n        case \"delete-cells\":\n          onCellsDelete(action.cells);\n          if (action.cells.length === 1) {\n            onCellDelete(action.cells[0]);\n          }\n          break;\n      }\n    };\n    root.addEventListener(\"keydown\", onKeydown);\n    return () => {\n      root.removeEventListener(\"keydown\", onKeydown);\n    };\n  }, [activeTarget, cells, editingTexts.length, onCellDelete, onCellsDelete]);\n\n  const defPrefix = useMemo(() => `${uniqueId(\"diagram-\")}-`, []);\n  const markerPrefix = `${defPrefix}line-arrow-`;\n\n  const [guideLines, setGuideLines] = useState<LineTuple[]>([]);\n\n  /* istanbul ignore next */\n  const handleCellsMoving = useCallback(\n    (info: MoveCellPayload[]) => {\n      dispatch({ type: \"move-cells\", payload: info });\n      const containedIds: string[] = [];\n      handleNodeContainedChange(info, cells).forEach((c) => {\n        if (c.containerCell?.id) containedIds.push(c.containerCell?.id);\n      });\n      setActiveContainers(containedIds);\n      setGuideLines(info.flatMap((c) => c.guideLines ?? []));\n    },\n    [cells]\n  );\n\n  /* istanbul ignore next */\n  const handleCellsMoved = useCallback(\n    (info: MoveCellPayload[]) => {\n      dispatch({ type: \"move-cells\", payload: info });\n      onCellsMove(info);\n      if (info.length === 1) {\n        onCellMove(info[0]);\n      }\n      handleNodeContainedChange(info, cells, onContainerContainerChange);\n      setActiveContainers([]);\n      setGuideLines([]);\n    },\n    [onCellMove, onCellsMove, cells, onContainerContainerChange]\n  );\n\n  const handleCellResizing = useCallback((info: ResizeCellPayload) => {\n    dispatch({ type: \"resize-cell\", payload: info });\n  }, []);\n\n  const handleCellResized = useCallback(\n    (info: ResizeCellPayload) => {\n      dispatch({ type: \"resize-cell\", payload: info });\n      onCellResize(info);\n    },\n    [onCellResize]\n  );\n\n  const handleDecoratorTextEditing = useCallback(\n    ({ id, editing }: { id: string; editing: boolean }) => {\n      if (editing) {\n        setEditingTexts((texts) =>\n          texts.includes(id) ? texts : [...texts, id]\n        );\n      } else {\n        setEditingTexts((texts) => texts.filter((text) => text !== id));\n      }\n    },\n    []\n  );\n\n  const handleNodeBrickResize = useCallback(\n    (id: string, size: SizeTuple | null) => {\n      const nextLayoutKey = getNextLayoutKey();\n      dispatch({\n        type: \"update-node-size\",\n        payload: { id, size },\n        layoutKey: nextLayoutKey,\n      });\n    },\n    [getNextLayoutKey]\n  );\n\n  const handleZoomSlide = useCallback(\n    (value: number) => {\n      // istanbul ignore next\n      if (process.env.NODE_ENV !== \"test\") {\n        zoomer.scaleTo(select(rootRef.current!), value / 100);\n      }\n    },\n    [zoomer]\n  );\n\n  const reCenter = useCallback(() => {\n    setCentered(false);\n  }, [setCentered]);\n  const { lineConfMap, lineConnectorConf, markers } = useLineMarkers({\n    cells,\n    defaultEdgeLines,\n    lineConnector,\n    markerPrefix,\n  });\n\n  const ready = useReady({ cells, layout, centered });\n\n  const [hoverState, setHoverState] = useState<HoverState | null>(null);\n  const unsetHoverStateTimeoutRef = useRef<number | null>(null);\n\n  const [activeEditableLine, setActiveEditableLine] =\n    useState<EditableLineInfo | null>(null);\n  const [lineEditorState, setLineEditorState] =\n    useState<LineEditorState | null>(null);\n\n  // istanbul ignore next\n  const handleCellMouseEnter = useCallback(\n    (cell: Cell) => {\n      if (\n        lineConnectorConf &&\n        isEdgeSide(cell, allowEdgeToArea) &&\n        (!lineEditorState || lineEditorState.type !== \"control\")\n      ) {\n        if (unsetHoverStateTimeoutRef.current !== null) {\n          clearTimeout(unsetHoverStateTimeoutRef.current);\n          unsetHoverStateTimeoutRef.current = null;\n        }\n        const relativePoints = getConnectPointsOfRectangle();\n        setHoverState({\n          cell,\n          relativePoints,\n          points: getConnectPoints(relativePoints, cell.view),\n        });\n      }\n    },\n    [allowEdgeToArea, lineConnectorConf, lineEditorState]\n  );\n\n  const handleCellMouseLeave = useCallback(\n    (cell: Cell) => {\n      if (lineConnectorConf && isNodeCell(cell)) {\n        unsetHoverStateTimeoutRef.current = setTimeout(() => {\n          setHoverState(null);\n        }) as unknown as number;\n      }\n    },\n    [lineConnectorConf]\n  );\n\n  // istanbul ignore next\n  const handleSmartConnect = useCallback(\n    (\n      source: NodeCell | DecoratorCell,\n      target: NodeCell | DecoratorCell,\n      exitPosition: NodePosition,\n      entryPosition: NodePosition | undefined\n    ) => {\n      const payload: EdgeViewChangePayload = {\n        source: source.id,\n        target: target.id,\n        view: {\n          ...lineSettings,\n          exitPosition,\n          entryPosition,\n          vertices: null,\n        },\n      };\n      const existedEdge = cells.find(\n        (cell) =>\n          cell.type === \"edge\" &&\n          cell.source === source.id &&\n          cell.target === target.id\n      );\n      if (existedEdge) {\n        dispatch({\n          type: \"change-edge-view\",\n          payload,\n        });\n        onEdgeViewChange?.(payload);\n      } else {\n        const newEdge: EdgeCell = {\n          type: \"edge\",\n          ...payload,\n        };\n        dispatch({\n          type: \"add-edge\",\n          payload: newEdge,\n        });\n        onEdgeAdd({\n          source,\n          target,\n          view: newEdge.view,\n        });\n      }\n    },\n    [cells, lineSettings, onEdgeAdd, onEdgeViewChange]\n  );\n\n  // istanbul ignore next\n  const handleEdgeChangeView = useCallback(\n    (\n      source: NodeCell | DecoratorCell,\n      target: NodeCell | DecoratorCell,\n      view: EdgeView\n    ) => {\n      const payload: EdgeViewChangePayload = {\n        source: source.id,\n        target: target.id,\n        view,\n      };\n      dispatch({\n        type: \"change-edge-view\",\n        payload,\n      });\n      onEdgeViewChange?.(payload);\n    },\n    [onEdgeViewChange]\n  );\n\n  // istanbul ignore next: experimental\n  const hoverStateContextValue = useMemo(\n    () => ({\n      rootRef,\n      smartConnectLineState,\n      unsetHoverStateTimeoutRef,\n      hoverState,\n      activeEditableLine,\n      lineEditorState,\n      setLineEditorState,\n      setActiveEditableLine,\n      setHoverState,\n      setSmartConnectLineState,\n      onConnect: handleSmartConnect,\n      onChangeEdgeView: handleEdgeChangeView,\n    }),\n    [\n      activeEditableLine,\n      handleEdgeChangeView,\n      handleSmartConnect,\n      hoverState,\n      lineEditorState,\n      smartConnectLineState,\n    ]\n  );\n\n  useEffect(() => {\n    const root = rootRef.current;\n    if (!root || dragBehavior !== \"lasso\") {\n      return;\n    }\n    const rootRect = root.getBoundingClientRect();\n    const onMouseDown = (event: MouseEvent) => {\n      handleLasso(event, {\n        transform,\n        offset: [rootRect.left, rootRect.top],\n        onLassoing(rect) {\n          setLassoRect(rect);\n        },\n        onLassoed(rect) {\n          setLassoRect(null);\n          const lassoedCells: (NodeCell | DecoratorCell)[] = [];\n          for (const cell of cells) {\n            if (\n              isContainerDecoratorCell(cell) ||\n              isNodeOrAreaDecoratorCell(cell) ||\n              isTextDecoratorCell(cell)\n            ) {\n              const x = cell.view.x;\n              const y = cell.view.y;\n              if (\n                x >= rect.x &&\n                x + cell.view.width <= rect.x + rect.width &&\n                y >= rect.y &&\n                y + cell.view.height <= rect.y + rect.height\n              ) {\n                lassoedCells.push(cell);\n              }\n            }\n          }\n          onSwitchActiveTarget?.(\n            lassoedCells.length > 1\n              ? { type: \"multi\", targets: lassoedCells.map(cellToTarget) }\n              : lassoedCells.length === 1\n                ? cellToTarget(lassoedCells[0])\n                : null\n          );\n        },\n      });\n    };\n    root.addEventListener(\"mousedown\", onMouseDown);\n    return () => {\n      root.removeEventListener(\"mousedown\", onMouseDown);\n    };\n  }, [transform, cells, dragBehavior, onSwitchActiveTarget]);\n\n  return (\n    <HoverStateContext.Provider value={hoverStateContextValue}>\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        ref={rootRef}\n        className={classNames(\"root\", { grabbing, pannable, ready })}\n        tabIndex={-1}\n      >\n        <defs>\n          {markers.map((marker, index) => (\n            <MarkerComponent\n              key={index}\n              id={`${markerPrefix}${index}`}\n              type={marker.markerType}\n              strokeColor={marker.strokeColor}\n            />\n          ))}\n        </defs>\n        <g\n          transform={`translate(${transform.x} ${transform.y}) scale(${transform.k})`}\n        >\n          <g className={classNames(\"cells\", { allowEdgeToArea })}>\n            {cells.map((cell) => (\n              <CellComponent\n                key={`${cell.type}:${isEdgeCell(cell) ? `${cell.source}~${cell.target}` : cell.id}`}\n                dragNodeToContainerActive={\n                  isEdgeCell(cell) ? false : activeContainers.includes(cell.id)\n                }\n                layout={layout}\n                layoutOptions={layoutOptions}\n                cell={cell}\n                cells={cells}\n                degraded={degraded}\n                degradedNodeLabel={degradedNodeLabel}\n                defaultNodeBricks={defaultNodeBricks}\n                transform={transform}\n                lineConfMap={lineConfMap}\n                activeTarget={activeTarget}\n                unrelatedCells={unrelatedCells}\n                allowEdgeToArea={allowEdgeToArea}\n                onCellsMoving={handleCellsMoving}\n                onCellsMoved={handleCellsMoved}\n                onCellResizing={handleCellResizing}\n                onCellResized={handleCellResized}\n                onSwitchActiveTarget={onSwitchActiveTarget}\n                onCellContextMenu={onCellContextMenu}\n                onDecoratorTextChange={onDecoratorTextChange}\n                onDecoratorTextEditing={handleDecoratorTextEditing}\n                onNodeBrickResize={handleNodeBrickResize}\n                onCellMouseEnter={handleCellMouseEnter}\n                onCellMouseLeave={handleCellMouseLeave}\n              />\n            ))}\n          </g>\n          <g>\n            <ConnectLineComponent\n              connectLineState={connectLineState}\n              transform={transform}\n              markerEnd={`${markerPrefix}0`}\n              onConnect={handleConnect}\n            />\n          </g>\n          {lassoRect && (\n            <rect\n              x={lassoRect.x}\n              y={lassoRect.y}\n              width={lassoRect.width}\n              height={lassoRect.height}\n              fill=\"var(--palette-gray-5)\"\n              fillOpacity={0.3}\n              stroke=\"var(--palette-gray-5)\"\n              strokeDasharray={2}\n            />\n          )}\n          {lineConnectorConf && (\n            <g>\n              <SmartConnectLineComponent\n                transform={transform}\n                lineSettings={lineSettings}\n                options={lineConnectorConf}\n              />\n              <EditingLineComponent\n                transform={transform}\n                options={lineConnectorConf}\n              />\n            </g>\n          )}\n          <g>\n            {guideLines.map((line, index) => (\n              <path\n                key={index}\n                d={`M${line[0].join(\" \")} L${line[1].join(\" \")}`}\n                stroke=\"var(--palette-orange-5)\"\n                fill=\"none\"\n                strokeWidth={1 / transform.k}\n              />\n            ))}\n          </g>\n          <g>\n            {lineConnectorConf && <LineEditorComponent scale={transform.k} />}\n          </g>\n          {lineConnectorConf && (\n            <LineConnectorComponent\n              activeTarget={activeTarget}\n              scale={transform.k}\n              disabled={!!connectLineState}\n            />\n          )}\n        </g>\n      </svg>\n      <ZoomBarComponent\n        shadowRoot={host.shadowRoot!}\n        scale={transform.k}\n        scaleRange={scaleRange}\n        onZoomChange={handleZoomSlide}\n        onReCenter={reCenter}\n      />\n    </HoverStateContext.Provider>\n  );\n}\n\nexport function uuidV4() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0,\n      v = c == \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nfunction getConnectPoints(\n  relativePoints: ReadonlyArray<NodePosition>,\n  view: NodeView,\n  border = 1\n) {\n  const padding = DEFAULT_NODE_PADDING_FOR_SMART_LINES;\n  const halfPadding = padding / 2;\n\n  const viewWithBorderAndPadding: NodeView = {\n    x: view.x + border / 2 - halfPadding,\n    y: view.y + border / 2 - halfPadding,\n    width: view.width - border + padding,\n    height: view.height - border + padding,\n  };\n\n  return relativePoints.map((p) => ({\n    x: viewWithBorderAndPadding.x + p.x * viewWithBorderAndPadding.width,\n    y: viewWithBorderAndPadding.y + p.y * viewWithBorderAndPadding.height,\n  }));\n}\n"],"names":["lockBodyScroll","unwrapProvider","defineElement","property","method","event","createDecorators","EoDrawCanvasComponent","React","LegacyEoDrawCanvasComponent","_EoDrawCanvas","_A","WeakMap","_B","_C","_D","_E","_F","_G","_H","_I","_J","_K","_L","_M","_N","_O","_P","_Q","_R","_S","_T","_EoDrawCanvas_brand","WeakSet","_handleActiveTargetChange","_handleSwitchActiveTarget","_U","_V","_handleCellMove","_W","_handleCellsMove","_X","_handleCellResize","_Y","_Z","_handleCellDelete","_a","_handleCellsDelete","_b","_handleCellContextMenu","_c","_handleEdgeAdd","_d","_handleEdgeViewChange","_e","_handleDecoratorTextChange","_f","_handleContainerContainerChange","_g","_handleScaleChange","_canvasRef","EoDrawCanvas","ReactNextElement","constructor","arguments","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_initProto","_init_cells","_init_extra_cells","_init_layout","_init_extra_layout","_init_layoutOptions","_init_extra_layoutOptions","_init_defaultNodeSize","DEFAULT_NODE_SIZE","_init_extra_defaultNodeSize","_init_defaultNodeBricks","_init_extra_defaultNodeBricks","_init_degradedThreshold","_init_extra_degradedThreshold","_init_degradedNodeLabel","_init_extra_degradedNodeLabel","_init_defaultEdgeLines","_init_extra_defaultEdgeLines","_init_activeTarget","_init_extra_activeTarget","_init_fadeUnrelatedCells","_init_extra_fadeUnrelatedCells","_init_zoomable","_init_extra_zoomable","_init_scrollable","_init_extra_scrollable","_init_pannable","_init_extra_pannable","_init_allowEdgeToArea","_init_extra_allowEdgeToArea","_init_dragBehavior","_init_extra_dragBehavior","_init_ctrlDragBehavior","_init_extra_ctrlDragBehavior","_init_scaleRange","_init_extra_scaleRange","_init_lineSettings","_init_extra_lineSettings","_init_lineConnector","_init_extra_lineConnector","_init_activeTargetChangeEvent","_init_extra_activeTargetChangeEvent","target","_classPrivateGetter","this","_get_activeTargetChangeEvent","emit","sameTarget","activeTarget","_init_nodeMoveEvent","_init_extra_nodeMoveEvent","_init_cellMoveEvent","_init_extra_cellMoveEvent","info","_get_cellMoveEvent","type","_get_nodeMoveEvent","_init_cellsMoveEvent","_init_extra_cellsMoveEvent","_get_cellsMoveEvent","_init_cellResizeEvent","_init_extra_cellResizeEvent","_get_cellResizeEvent","_init_nodeDelete","_init_extra_nodeDelete","_init_cellDelete","_init_extra_cellDelete","cell","_get_cellDelete","_get_nodeDelete","_init_cellsDelete","_init_extra_cellsDelete","cells","_get_cellsDelete","_init_cellContextMenu","_init_extra_cellContextMenu","detail","_get_cellContextMenu","_init_edgeAdd","_init_extra_edgeAdd","edge","_get_edgeAdd","_init_edgeViewChange","_init_extra_edgeViewChange","_get_edgeViewChange","_init_decoratorTextChange","_init_extra_decoratorTextChange","_get_decoratorTextChange","_init_containerContainerChange","_init_extra_containerContainerChange","_get_containerContainerChange","_init_scaleChange","_init_extra_scaleChange","scale","_get_scaleChange","createRef","_classPrivateFieldGet","v","_classPrivateFieldSet","layout","layoutOptions","defaultNodeSize","defaultNodeBricks","degradedThreshold","degradedNodeLabel","defaultEdgeLines","fadeUnrelatedCells","zoomable","scrollable","pannable","allowEdgeToArea","dragBehavior","ctrlDragBehavior","scaleRange","lineSettings","lineConnector","dropNode","_ref","_document$elementsFro","_document","id","position","size","data","useBrick","document","elementsFromPoint","call","includes","_classPrivateFieldGet2","boundingClientRect","getBoundingClientRect","transform","current","getTransform","newNode","view","x","left","k","y","top","width","height","dropDecorator","_ref2","_document$elementsFro2","_document2","decorator","text","direction","_classPrivateFieldGet3","newDecorator","uuidV4","DEFAULT_AREA_WIDTH","DEFAULT_AREA_HEIGHT","addNodes","nodes","length","newNodes","map","_ref3","canvasWidth","clientWidth","canvasHeight","clientHeight","addEdge","_ref4","_classPrivateFieldGet4","source","newEdge","manuallyConnectNodes","updateCells","ctx","_assertClassBrand","_waitForCanvasRef","updated","disconnectedCallback","super","render","host","ref","onActiveTargetChange","onSwitchActiveTarget","onCellMove","onCellsMove","onCellResize","onCellDelete","onCellsDelete","onEdgeAdd","onCellContextMenu","onDecoratorTextChange","onContainerContainerChange","onScaleChange","onEdgeViewChange","Promise","resolve","check","setTimeout","_ref5","initialCells","_activeTarget","_scaleRange","layoutKey","dispatch","useReducer","rootReducer","initializeCells","degraded","useMemo","filter","isNodeCell","DEFAULT_DEGRADED_THRESHOLD","rootRef","useRef","manualConnectDeferredRef","editingTexts","setEditingTexts","useState","activeContainers","setActiveContainers","grabbing","zoomer","useZoom","draggable","ctrlDraggable","useEffect","lassoRect","setLassoRect","connectLineState","setConnectLineState","centered","setCentered","getNextLayoutKey","useLayout","useImperativeHandle","node","payload","_ref6","index","findLastIndex","newCells","slice","allCells","shouldReCenter","previousCells","result","sourceId","find","isEdgeSide","rect","from","offset","reject","handleConnect","useCallback","state","to","_manualConnectDeferre2","i","_manualConnectDeferre","smartConnectLineState","setSmartConnectLineState","useActiveTarget","unrelatedCells","setUnrelatedCells","nextUnrelated","getUnrelatedCells","prev","root","onKeydown","action","handleKeyboard","addEventListener","removeEventListener","markerPrefix","uniqueId","guideLines","setGuideLines","handleCellsMoving","containedIds","handleNodeContainedChange","forEach","c","_c$containerCell","_c$containerCell2","containerCell","push","flatMap","handleCellsMoved","handleCellResizing","handleCellResized","handleDecoratorTextEditing","_ref7","editing","texts","handleNodeBrickResize","nextLayoutKey","handleZoomSlide","value","scaleTo","select","reCenter","lineConfMap","lineConnectorConf","markers","useLineMarkers","ready","useReady","hoverState","setHoverState","unsetHoverStateTimeoutRef","activeEditableLine","setActiveEditableLine","lineEditorState","setLineEditorState","handleCellMouseEnter","clearTimeout","relativePoints","getConnectPointsOfRectangle","points","getConnectPoints","handleCellMouseLeave","handleSmartConnect","exitPosition","entryPosition","vertices","handleEdgeChangeView","hoverStateContextValue","onConnect","onChangeEdgeView","rootRect","onMouseDown","handleLasso","onLassoing","onLassoed","lassoedCells","isContainerDecoratorCell","isNodeOrAreaDecoratorCell","isTextDecoratorCell","targets","cellToTarget","HoverStateContext","Provider","className","classNames","tabIndex","marker","MarkerComponent","key","markerType","strokeColor","CellComponent","isEdgeCell","dragNodeToContainerActive","onCellsMoving","onCellsMoved","onCellResizing","onCellResized","onDecoratorTextEditing","onNodeBrickResize","onCellMouseEnter","onCellMouseLeave","ConnectLineComponent","markerEnd","fill","fillOpacity","stroke","strokeDasharray","SmartConnectLineComponent","options","EditingLineComponent","line","d","join","strokeWidth","LineEditorComponent","LineConnectorComponent","disabled","ZoomBarComponent","shadowRoot","onZoomChange","onReCenter","replace","r","Math","random","toString","border","undefined","padding","DEFAULT_NODE_PADDING_FOR_SMART_LINES","halfPadding","viewWithBorderAndPadding","p","_EoDrawCanvas2","e","_set_activeTargetChangeEvent","_set_nodeMoveEvent","_set_cellMoveEvent","_set_cellsMoveEvent","_set_cellResizeEvent","_set_nodeDelete","_set_cellDelete","_set_cellsDelete","_set_cellContextMenu","_set_edgeAdd","_set_edgeViewChange","_set_decoratorTextChange","_set_containerContainerChange","_set_scaleChange","_initClass","_applyDecs","styleTexts","styleText","zoomBarStyleText","attribute","String","Number","Boolean","o","_","has","_checkInRHS"],"sourceRoot":""}