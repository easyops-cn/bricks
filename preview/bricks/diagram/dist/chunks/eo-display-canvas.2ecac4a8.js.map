{"version":3,"file":"chunks/eo-display-canvas.2ecac4a8.js","mappings":"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","sources":["webpack:///./src/display-canvas/index.tsx","webpack:///./src/draw-canvas/index.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport { createDecorators, type EventEmitter } from \"@next-core/element\";\nimport { ReactNextElement } from \"@next-core/react-element\";\nimport \"@next-core/theme\";\nimport { uniqueId } from \"lodash\";\nimport classNames from \"classnames\";\nimport { select } from \"d3-selection\";\nimport type { RangeTuple, SizeTuple } from \"../diagram/interfaces\";\nimport type {\n  ActiveTarget,\n  InitialCell,\n  NodeBrickConf,\n  CellContextMenuDetail,\n  EdgeLineConf,\n  Cell,\n  LayoutType,\n  LayoutOptions,\n} from \"../draw-canvas/interfaces\";\nimport { MarkerComponent } from \"../diagram/MarkerComponent\";\nimport { sameTarget } from \"../draw-canvas/processors/sameTarget\";\nimport { CellComponent } from \"../draw-canvas/CellComponent\";\nimport { initializeCells } from \"../draw-canvas/processors/initializeCells\";\nimport {\n  DEFAULT_DEGRADED_THRESHOLD,\n  DEFAULT_NODE_SIZE,\n} from \"../draw-canvas/constants\";\nimport { useZoom } from \"../shared/canvas/useZoom\";\nimport { useActiveTarget } from \"../shared/canvas/useActiveTarget\";\nimport { rootReducer } from \"../draw-canvas/reducers\";\nimport { getUnrelatedCells } from \"../draw-canvas/processors/getUnrelatedCells\";\nimport { isEdgeCell, isNodeCell } from \"../draw-canvas/processors/asserts\";\nimport { ZoomBarComponent } from \"../shared/canvas/ZoomBarComponent\";\nimport { useLayout } from \"../shared/canvas/useLayout\";\nimport { useReady } from \"../shared/canvas/useReady\";\nimport { useLineMarkers } from \"../shared/canvas/useLineMarkers\";\nimport { updateCells } from \"../draw-canvas/processors/updateCells\";\nimport styleText from \"../shared/canvas/styles.shadow.css\";\nimport zoomBarStyleText from \"../shared/canvas/ZoomBarComponent.shadow.css\";\n\nconst { defineElement, property, event } = createDecorators();\n\nexport interface EoDisplayCanvasProps {\n  cells: InitialCell[] | undefined;\n  layout: LayoutType;\n  layoutOptions?: LayoutOptions;\n  defaultNodeSize: SizeTuple;\n  defaultNodeBricks?: NodeBrickConf[];\n  defaultEdgeLines?: EdgeLineConf[];\n  degradedThreshold?: number;\n  degradedNodeLabel?: string;\n  activeTarget?: ActiveTarget | null;\n  fadeUnrelatedCells?: boolean;\n  zoomable?: boolean;\n  scrollable?: boolean;\n  pannable?: boolean;\n  scaleRange?: RangeTuple;\n  hideZoomBar?: boolean;\n  autoCenterWhenCellsChange?: boolean;\n}\n\n/**\n * 用于展示查看的画布。\n */\nexport\n@defineElement(\"eo-display-canvas\", {\n  styleTexts: [styleText, zoomBarStyleText],\n})\nclass EoDisplayCanvas extends ReactNextElement implements EoDisplayCanvasProps {\n  /**\n   * 用于查看的画布可以更新 `cells` 属性。\n   */\n  @property({ attribute: false })\n  accessor cells: InitialCell[] | undefined;\n\n  @property({ type: String })\n  accessor layout: LayoutType;\n\n  @property({ attribute: false })\n  accessor layoutOptions: LayoutOptions | undefined;\n\n  @property({ attribute: false })\n  accessor defaultNodeSize: SizeTuple = [DEFAULT_NODE_SIZE, DEFAULT_NODE_SIZE];\n\n  @property({ attribute: false })\n  accessor defaultNodeBricks: NodeBrickConf[] | undefined;\n\n  /**\n   * 当节点数量达到或超过 `degradedThreshold` 时，节点将被降级展示。\n   *\n   * @default 500\n   */\n  @property({ type: Number })\n  accessor degradedThreshold: number | undefined;\n\n  // Set `attribute` to `false` event if it accepts string value.\n  // Because when passing like \"<% DATA.node.data.name %>\", it will be\n  // evaluated as object temporarily.\n  /**\n   * 设置节点将降级展示时显示的名称。\n   *\n   * @default \"<% DATA.node.id %>\"\n   */\n  @property({ attribute: false })\n  accessor degradedNodeLabel: string | undefined;\n\n  /**\n   * 使用条件判断设置默认的边对应的连线。在 `if` 表达式中 `DATA` 为 `{ edge }`，例如：\n   *\n   * ```yaml\n   * defaultEdgeLines:\n   *   - if: <% DATA.edge.data?.virtual %>\n   *     dashed: true\n   * ```\n   */\n  @property({ attribute: false })\n  accessor defaultEdgeLines: EdgeLineConf[] | undefined;\n\n  @property({ attribute: false })\n  accessor activeTarget: ActiveTarget | null | undefined;\n\n  /**\n   * 当鼠标悬浮到某节点上时，隐藏其他跟该节点无关的元素。\n   */\n  @property({ type: Boolean })\n  accessor fadeUnrelatedCells: boolean | undefined;\n\n  @property({ type: Boolean })\n  accessor zoomable: boolean | undefined = true;\n\n  @property({ type: Boolean })\n  accessor scrollable: boolean | undefined = true;\n\n  @property({ type: Boolean })\n  accessor pannable: boolean | undefined = true;\n\n  @property({ attribute: false })\n  accessor scaleRange: RangeTuple | undefined;\n\n  /**\n   * 隐藏右下角放大缩小的控制栏\n   */\n  @property({ type: Boolean })\n  accessor hideZoomBar: boolean | undefined;\n\n  /**\n   * 每当 cells 改变时，重新自动居中\n   */\n  @property({ type: Boolean })\n  accessor autoCenterWhenCellsChange: boolean | undefined;\n\n  @event({ type: \"activeTarget.change\" })\n  accessor #activeTargetChangeEvent!: EventEmitter<ActiveTarget | null>;\n\n  #handleActiveTargetChange = (target: ActiveTarget | null) => {\n    this.#activeTargetChangeEvent.emit(target);\n  };\n\n  #handleSwitchActiveTarget = (target: ActiveTarget | null) => {\n    if (!sameTarget(target, this.activeTarget)) {\n      this.activeTarget = target;\n    }\n  };\n\n  @event({ type: \"cell.contextmenu\" })\n  accessor #cellContextMenu!: EventEmitter<CellContextMenuDetail>;\n\n  #handleCellContextMenu = (detail: CellContextMenuDetail) => {\n    this.#cellContextMenu.emit(detail);\n  };\n\n  @event({ type: \"cell.click\" })\n  accessor #cellClick!: EventEmitter<CellContextMenuDetail>;\n\n  #handleCellClick = (detail: CellContextMenuDetail) => {\n    this.#cellClick.emit(detail);\n  };\n\n  render() {\n    return (\n      <EoDisplayCanvasComponent\n        shadowRoot={this.shadowRoot!}\n        cells={this.cells}\n        layout={this.layout}\n        layoutOptions={this.layoutOptions}\n        defaultNodeSize={this.defaultNodeSize}\n        defaultNodeBricks={this.defaultNodeBricks}\n        defaultEdgeLines={this.defaultEdgeLines}\n        degradedThreshold={this.degradedThreshold}\n        degradedNodeLabel={this.degradedNodeLabel}\n        activeTarget={this.activeTarget}\n        fadeUnrelatedCells={this.fadeUnrelatedCells}\n        zoomable={this.zoomable}\n        scrollable={this.scrollable}\n        pannable={this.pannable}\n        scaleRange={this.scaleRange}\n        hideZoomBar={this.hideZoomBar}\n        autoCenterWhenCellsChange={this.autoCenterWhenCellsChange}\n        onActiveTargetChange={this.#handleActiveTargetChange}\n        onSwitchActiveTarget={this.#handleSwitchActiveTarget}\n        onCellContextMenu={this.#handleCellContextMenu}\n        onCellClick={this.#handleCellClick}\n      />\n    );\n  }\n}\n\nexport interface EoDisplayCanvasComponentProps extends EoDisplayCanvasProps {\n  shadowRoot: ShadowRoot;\n  onActiveTargetChange(target: ActiveTarget | null): void;\n  onSwitchActiveTarget(target: ActiveTarget | null): void;\n  onCellContextMenu(detail: CellContextMenuDetail): void;\n  onCellClick(detail: CellContextMenuDetail): void;\n}\n\nfunction EoDisplayCanvasComponent({\n  shadowRoot,\n  cells: initialCells,\n  layout,\n  layoutOptions,\n  defaultNodeSize,\n  defaultNodeBricks,\n  defaultEdgeLines,\n  degradedThreshold,\n  degradedNodeLabel,\n  activeTarget: _activeTarget,\n  fadeUnrelatedCells,\n  zoomable,\n  scrollable,\n  pannable,\n  scaleRange: _scaleRange,\n  hideZoomBar,\n  autoCenterWhenCellsChange,\n  onActiveTargetChange,\n  onSwitchActiveTarget,\n  onCellContextMenu,\n  onCellClick,\n}: EoDisplayCanvasComponentProps) {\n  const [{ cells, layoutKey }, dispatch] = useReducer(\n    rootReducer,\n    initialCells,\n    (initialCells) => ({\n      cells: initializeCells(initialCells, { defaultNodeSize }),\n      layoutKey: 1,\n    })\n  );\n\n  // When nodes are greater or equal to threshold, the diagram will be degraded.\n  // Thus all nodes will be displayed as simple svg elements instead of bricks.\n  const degraded = useMemo(\n    () =>\n      cells.filter(isNodeCell).length >=\n      (degradedThreshold ?? DEFAULT_DEGRADED_THRESHOLD),\n    [cells, degradedThreshold]\n  );\n\n  const rootRef = useRef<SVGSVGElement>(null);\n\n  const { grabbing, transform, zoomer, scaleRange } = useZoom({\n    rootRef,\n    zoomable,\n    scrollable,\n    pannable,\n    draggable: true,\n    scaleRange: _scaleRange,\n    onSwitchActiveTarget,\n  });\n\n  const { centered, setCentered, getNextLayoutKey } = useLayout({\n    layout,\n    layoutOptions,\n    rootRef,\n    cells,\n    zoomable,\n    zoomer,\n    scaleRange,\n    layoutKey,\n    autoCenterWhenCellsChange,\n    dispatch,\n  });\n\n  const reCenter = useCallback(() => {\n    setCentered(false);\n  }, [setCentered]);\n\n  const previousCellsRef = useRef(initialCells);\n\n  useEffect(() => {\n    if (initialCells !== previousCellsRef.current) {\n      previousCellsRef.current = initialCells;\n      const result = updateCells({\n        canvasWidth: shadowRoot.host.clientWidth,\n        canvasHeight: shadowRoot.host.clientHeight,\n        defaultNodeSize,\n        layout,\n        previousCells: cells,\n        cells: initialCells,\n        scaleRange,\n        transform,\n      });\n      dispatch({ type: \"update-cells\", payload: result.cells });\n    }\n  }, [\n    cells,\n    defaultNodeSize,\n    initialCells,\n    layout,\n    scaleRange,\n    shadowRoot,\n    transform,\n  ]);\n\n  const activeTarget = useActiveTarget({\n    rootRef,\n    activeTarget: _activeTarget,\n    onActiveTargetChange,\n  });\n\n  const defPrefix = useMemo(() => `${uniqueId(\"diagram-\")}-`, []);\n  const markerPrefix = `${defPrefix}line-arrow-`;\n\n  const handleNodeBrickResize = useCallback(\n    (id: string, size: SizeTuple | null) => {\n      dispatch({\n        type: \"update-node-size\",\n        payload: { id, size },\n        layoutKey: getNextLayoutKey(),\n      });\n    },\n    [getNextLayoutKey]\n  );\n\n  const [hoverCell, setHoverCell] = useState<Cell | null>(null);\n  const handleCellMouseEnter = useCallback((cell: Cell) => {\n    setHoverCell(cell);\n  }, []);\n  const handleCellMouseLeave = useCallback((cell: Cell) => {\n    setHoverCell((prev) => (prev === cell ? null : prev));\n  }, []);\n\n  const [unrelatedCells, setUnrelatedCells] = useState<Cell[]>([]);\n  useEffect(() => {\n    const nextUnrelated = fadeUnrelatedCells\n      ? getUnrelatedCells(cells, null, hoverCell)\n      : [];\n    // Do not update the state when prev and next are both empty.\n    setUnrelatedCells((prev) =>\n      prev.length === 0 && nextUnrelated.length === 0 ? prev : nextUnrelated\n    );\n  }, [cells, fadeUnrelatedCells, hoverCell]);\n\n  const handleZoomSlide = useCallback(\n    (value: number) => {\n      // istanbul ignore next\n      if (process.env.NODE_ENV !== \"test\") {\n        zoomer.scaleTo(select(rootRef.current!), value / 100);\n      }\n    },\n    [zoomer]\n  );\n\n  const { lineConfMap, markers } = useLineMarkers({\n    cells,\n    defaultEdgeLines,\n    markerPrefix,\n  });\n\n  const ready = useReady({ cells, layout, centered });\n\n  return (\n    <>\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        ref={rootRef}\n        className={classNames(\"root\", { grabbing, pannable, ready })}\n        tabIndex={-1}\n      >\n        <defs>\n          {markers.map((marker, index) => (\n            <MarkerComponent\n              key={index}\n              id={`${markerPrefix}${index}`}\n              type={marker.markerType}\n              strokeColor={marker.strokeColor}\n            />\n          ))}\n        </defs>\n        <g\n          transform={`translate(${transform.x} ${transform.y}) scale(${transform.k})`}\n        >\n          <g className=\"cells\">\n            {cells.map((cell) => (\n              <CellComponent\n                key={`${cell.type}:${isEdgeCell(cell) ? `${cell.source}~${cell.target}` : cell.id}`}\n                layout={layout}\n                cell={cell}\n                cells={cells}\n                degraded={degraded}\n                degradedNodeLabel={degradedNodeLabel}\n                defaultNodeBricks={defaultNodeBricks}\n                lineConfMap={lineConfMap}\n                transform={transform}\n                activeTarget={activeTarget}\n                readOnly\n                unrelatedCells={unrelatedCells}\n                onSwitchActiveTarget={onSwitchActiveTarget}\n                onCellContextMenu={onCellContextMenu}\n                onCellClick={onCellClick}\n                onNodeBrickResize={handleNodeBrickResize}\n                onCellMouseEnter={\n                  fadeUnrelatedCells && isNodeCell(cell)\n                    ? handleCellMouseEnter\n                    : undefined\n                }\n                onCellMouseLeave={\n                  fadeUnrelatedCells && isNodeCell(cell)\n                    ? handleCellMouseLeave\n                    : undefined\n                }\n              />\n            ))}\n          </g>\n        </g>\n      </svg>\n      {!hideZoomBar && (\n        <ZoomBarComponent\n          shadowRoot={shadowRoot}\n          scale={transform.k}\n          scaleRange={scaleRange}\n          onZoomChange={handleZoomSlide}\n          onReCenter={reCenter}\n        />\n      )}\n    </>\n  );\n}\n","import React, {\n  createRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport { createDecorators, type EventEmitter } from \"@next-core/element\";\nimport { ReactNextElement } from \"@next-core/react-element\";\nimport type { UseSingleBrickConf } from \"@next-core/react-runtime\";\nimport { unwrapProvider } from \"@next-core/utils/general\";\nimport \"@next-core/theme\";\nimport { uniqueId } from \"lodash\";\nimport classNames from \"classnames\";\nimport { select } from \"d3-selection\";\nimport type { lockBodyScroll as _lockBodyScroll } from \"@next-bricks/basic/data-providers/lock-body-scroll/lock-body-scroll\";\nimport type {\n  NodePosition,\n  PositionTuple,\n  RangeTuple,\n  SizeTuple,\n  TransformLiteral,\n} from \"../diagram/interfaces\";\nimport type {\n  ActiveTarget,\n  Cell,\n  EdgeCell,\n  InitialCell,\n  NodeBrickConf,\n  NodeCell,\n  NodeId,\n  DecoratorCell,\n  DecoratorType,\n  CellContextMenuDetail,\n  ConnectLineState,\n  Deferred,\n  ConnectNodesDetail,\n  EdgeLineConf,\n  DecoratorTextChangeDetail,\n  NodeView,\n  LayoutType,\n  LayoutOptions,\n  SmartConnectLineState,\n  LineConnecterConf,\n  Direction,\n  EditableLineInfo,\n  LineEditorState,\n  EdgeView,\n  LineSettings,\n} from \"./interfaces\";\nimport { rootReducer } from \"./reducers\";\nimport { MarkerComponent } from \"../diagram/MarkerComponent\";\nimport {\n  isContainerDecoratorCell,\n  isEdgeCell,\n  isEdgeSide,\n  isNodeCell,\n  isNodeOrAreaDecoratorCell,\n  isTextDecoratorCell,\n} from \"./processors/asserts\";\nimport type {\n  EdgeViewChangePayload,\n  LineTuple,\n  MoveCellPayload,\n  ResizeCellPayload,\n} from \"./reducers/interfaces\";\nimport { sameTarget } from \"./processors/sameTarget\";\nimport { handleKeyboard } from \"./processors/handleKeyboard\";\nimport { CellComponent } from \"./CellComponent\";\nimport { ConnectLineComponent } from \"./ConnectLineComponent\";\nimport { initializeCells } from \"./processors/initializeCells\";\nimport { updateCells } from \"./processors/updateCells\";\nimport { getUnrelatedCells } from \"./processors/getUnrelatedCells\";\nimport {\n  DEFAULT_NODE_SIZE,\n  DEFAULT_AREA_WIDTH,\n  DEFAULT_AREA_HEIGHT,\n  DEFAULT_DEGRADED_THRESHOLD,\n  DEFAULT_NODE_PADDING_FOR_SMART_LINES,\n} from \"./constants\";\nimport { useZoom } from \"../shared/canvas/useZoom\";\nimport { useActiveTarget } from \"../shared/canvas/useActiveTarget\";\nimport { ZoomBarComponent } from \"../shared/canvas/ZoomBarComponent\";\nimport { useLayout } from \"../shared/canvas/useLayout\";\nimport { useReady } from \"../shared/canvas/useReady\";\nimport { useLineMarkers } from \"../shared/canvas/useLineMarkers\";\nimport { getConnectPointsOfRectangle } from \"../shared/canvas/shapes/Rectangle\";\nimport { LineConnectorComponent } from \"./LineConnectorComponent\";\nimport { HoverStateContext, type HoverState } from \"./HoverStateContext\";\nimport { handleLasso } from \"./processors/handleLasso\";\nimport styleText from \"../shared/canvas/styles.shadow.css\";\nimport zoomBarStyleText from \"../shared/canvas/ZoomBarComponent.shadow.css\";\nimport { SmartConnectLineComponent } from \"./SmartConnectLineComponent\";\nimport { cellToTarget } from \"./processors/cellToTarget\";\nimport { handleNodeContainedChange } from \"./processors/handleNodeContainedChange\";\nimport { LineEditorComponent } from \"./LineEditorComponent\";\nimport { EditingLineComponent } from \"./EditingLineComponent\";\n\nconst lockBodyScroll = unwrapProvider<typeof _lockBodyScroll>(\n  \"basic.lock-body-scroll\"\n);\n\nconst { defineElement, property, method, event } = createDecorators();\n\nexport interface EoDrawCanvasProps {\n  cells: InitialCell[] | undefined;\n  layout: LayoutType;\n  layoutOptions?: LayoutOptions;\n  defaultNodeSize: SizeTuple;\n  defaultNodeBricks?: NodeBrickConf[];\n  defaultEdgeLines?: EdgeLineConf[];\n  degradedThreshold?: number;\n  degradedNodeLabel?: string;\n  activeTarget?: ActiveTarget | null;\n  fadeUnrelatedCells?: boolean;\n  zoomable?: boolean;\n  scrollable?: boolean;\n  pannable?: boolean;\n  dragBehavior?: DragBehavior;\n  ctrlDragBehavior?: CtrlDragBehavior;\n  scaleRange?: RangeTuple;\n  lineSettings?: LineSettings;\n  lineConnector?: LineConnecterConf | boolean;\n  allowEdgeToArea?: boolean;\n}\n\nexport type DragBehavior = \"none\" | \"lasso\" | \"grab\";\nexport type CtrlDragBehavior = \"none\" | \"grab\";\n\nexport interface DropNodeInfo extends AddNodeInfo {\n  /** [PointerEvent::clientX, PointerEvent::clientY] */\n  position: PositionTuple;\n}\n\nexport interface DropDecoratorInfo {\n  decorator: DecoratorType;\n  /** [PointerEvent::clientX, PointerEvent::clientY] */\n  position: PositionTuple;\n  text?: string;\n  direction?: Direction;\n}\n\nexport interface AddNodeInfo {\n  id: NodeId;\n  useBrick?: UseSingleBrickConf;\n  data?: unknown;\n  size?: SizeTuple;\n}\n\nexport interface AddEdgeInfo {\n  source: NodeId;\n  target: NodeId;\n  data?: unknown;\n}\n\nexport interface UpdateCellsContext {\n  reason: \"add-related-nodes\";\n  parent: NodeId;\n}\n\nexport interface AddNodesContext {\n  defaultNodeSize: SizeTuple;\n  canvasWidth: number;\n  canvasHeight: number;\n}\n\nexport const EoDrawCanvasComponent = React.forwardRef(\n  LegacyEoDrawCanvasComponent\n);\n\n/**\n * 用于手工绘图的画布。\n *\n * 注意：将配套另外一个用于展示的画布构件。\n */\nexport\n@defineElement(\"eo-draw-canvas\", {\n  styleTexts: [styleText, zoomBarStyleText],\n})\nclass EoDrawCanvas extends ReactNextElement implements EoDrawCanvasProps {\n  /**\n   * 仅当初始化时使用，渲染后重新设置 `cells` 将无效。\n   */\n  @property({ attribute: false })\n  accessor cells: InitialCell[] | undefined;\n\n  @property({ type: String })\n  accessor layout: LayoutType;\n\n  @property({ attribute: false })\n  accessor layoutOptions: LayoutOptions | undefined;\n\n  /**\n   * @default [100,20]\n   */\n  @property({ attribute: false })\n  accessor defaultNodeSize: SizeTuple = [DEFAULT_NODE_SIZE, DEFAULT_NODE_SIZE];\n\n  @property({ attribute: false })\n  accessor defaultNodeBricks: NodeBrickConf[] | undefined;\n\n  /**\n   * 当节点数量达到或超过 `degradedThreshold` 时，节点将被降级展示。\n   *\n   * @default 500\n   */\n  @property({ type: Number })\n  accessor degradedThreshold: number | undefined;\n\n  // Set `attribute` to `false` even if it accepts string value.\n  // Because when passing like \"<% DATA.node.data.name %>\", it will be\n  // evaluated as object temporarily.\n  /**\n   * 设置节点将降级展示时显示的名称。\n   *\n   * @default \"<% DATA.node.id %>\"\n   */\n  @property({ attribute: false })\n  accessor degradedNodeLabel: string | undefined;\n\n  /**\n   * 使用条件判断设置默认的边对应的连线。在 `if` 表达式中 `DATA` 为 `{ edge }`，例如：\n   *\n   * ```yaml\n   * defaultEdgeLines:\n   *   - if: <% DATA.edge.data?.virtual %>\n   *     dashed: true\n   * ```\n   */\n  @property({ attribute: false })\n  accessor defaultEdgeLines: EdgeLineConf[] | undefined;\n\n  @property({ attribute: false })\n  accessor activeTarget: ActiveTarget | null | undefined;\n\n  /**\n   * 当 `activeTarget` 不为 `null` 时，隐藏其他跟该 `activeTarget` 无关的元素。\n   */\n  @property({ type: Boolean })\n  accessor fadeUnrelatedCells: boolean | undefined;\n\n  @property({ type: Boolean })\n  accessor zoomable: boolean | undefined = true;\n\n  @property({ type: Boolean })\n  accessor scrollable: boolean | undefined = true;\n\n  @property({ type: Boolean })\n  accessor pannable: boolean | undefined = true;\n\n  @property({ type: Boolean })\n  accessor allowEdgeToArea: boolean | undefined = false;\n\n  /**\n   * 按住鼠标拖动时的行为：\n   *  - `none`：无\n   *  - `lasso`：绘制选区\n   *  - `grab`：拖动画布\n   *\n   * @default \"none\"\n   */\n  @property()\n  accessor dragBehavior: DragBehavior | undefined;\n\n  /**\n   * 按住 ctrl 键并按住鼠标拖动时的行为：\n   *  - `none`：无\n   *  - `grab`：拖动画布\n   *\n   * @default \"none\"\n   */\n  @property()\n  accessor ctrlDragBehavior: CtrlDragBehavior | undefined;\n\n  @property({ attribute: false })\n  accessor scaleRange: RangeTuple | undefined;\n\n  @property({ attribute: false })\n  accessor lineSettings: LineSettings | undefined;\n\n  @property({ attribute: false })\n  accessor lineConnector: LineConnecterConf | boolean | undefined;\n\n  @event({ type: \"activeTarget.change\" })\n  accessor #activeTargetChangeEvent!: EventEmitter<ActiveTarget | null>;\n\n  #handleActiveTargetChange = (target: ActiveTarget | null) => {\n    this.#activeTargetChangeEvent.emit(target);\n  };\n\n  #handleSwitchActiveTarget = (target: ActiveTarget | null) => {\n    if (!sameTarget(target, this.activeTarget)) {\n      this.activeTarget = target;\n    }\n  };\n\n  /**\n   * @deprecated Use `cell.move` instead.\n   */\n  @event({ type: \"node.move\" })\n  accessor #nodeMoveEvent!: EventEmitter<MoveCellPayload>;\n\n  @event({ type: \"cell.move\" })\n  accessor #cellMoveEvent!: EventEmitter<MoveCellPayload>;\n\n  #handleCellMove = (info: MoveCellPayload) => {\n    this.#cellMoveEvent.emit(info);\n    if (info.type === \"node\") {\n      this.#nodeMoveEvent.emit(info);\n    }\n  };\n\n  @event({ type: \"cells.move\" })\n  accessor #cellsMoveEvent!: EventEmitter<MoveCellPayload[]>;\n\n  #handleCellsMove = (info: MoveCellPayload[]) => {\n    this.#cellsMoveEvent.emit(info);\n  };\n\n  @event({ type: \"cell.resize\" })\n  accessor #cellResizeEvent!: EventEmitter<ResizeCellPayload>;\n\n  #handleCellResize = (info: ResizeCellPayload) => {\n    this.#cellResizeEvent.emit(info);\n  };\n\n  /**\n   * @deprecated Use `cell.delete` instead.\n   */\n  @event({ type: \"node.delete\" })\n  accessor #nodeDelete!: EventEmitter<Cell>;\n\n  @event({ type: \"cell.delete\" })\n  accessor #cellDelete!: EventEmitter<Cell>;\n\n  #handleCellDelete = (cell: Cell) => {\n    this.#cellDelete.emit(cell);\n    if (cell.type === \"node\") {\n      this.#nodeDelete.emit(cell);\n    }\n  };\n\n  @event({ type: \"cells.delete\" })\n  accessor #cellsDelete!: EventEmitter<Cell[]>;\n\n  #handleCellsDelete = (cells: Cell[]) => {\n    this.#cellsDelete.emit(cells);\n  };\n\n  @event({ type: \"cell.contextmenu\" })\n  accessor #cellContextMenu!: EventEmitter<CellContextMenuDetail>;\n\n  #handleCellContextMenu = (detail: CellContextMenuDetail) => {\n    this.#cellContextMenu.emit(detail);\n  };\n\n  /**\n   * 通过画布绘图的方式添加边（手动调用 `addEdge` 方法不会触发该事件）。\n   */\n  @event({ type: \"edge.add\" })\n  accessor #edgeAdd!: EventEmitter<ConnectNodesDetail>;\n\n  #handleEdgeAdd = (edge: ConnectNodesDetail) => {\n    this.#edgeAdd.emit(edge);\n  };\n\n  @event({ type: \"edge.view.change\" })\n  accessor #edgeViewChange!: EventEmitter<EdgeViewChangePayload>;\n\n  #handleEdgeViewChange = (detail: EdgeViewChangePayload) => {\n    this.#edgeViewChange.emit(detail);\n  };\n\n  @event({ type: \"decorator.text.change\" })\n  accessor #decoratorTextChange!: EventEmitter<DecoratorTextChangeDetail>;\n\n  #handleDecoratorTextChange = (detail: DecoratorTextChangeDetail) => {\n    this.#decoratorTextChange.emit(detail);\n  };\n\n  /**\n   * node节点跟容器组关系改变事件，有containerCell是新增关系，否则删除关系\n   */\n  @event({ type: \"node.container.change\" })\n  accessor #containerContainerChange!: EventEmitter<MoveCellPayload[]>;\n\n  #handleContainerContainerChange = (detail: MoveCellPayload[]) => {\n    this.#containerContainerChange.emit(detail);\n  };\n\n  /**\n   * 缩放变化后，从素材库拖拽元素进画布时，拖拽图像应设置对应的缩放比例。\n   */\n  @event({ type: \"scale.change\" })\n  accessor #scaleChange!: EventEmitter<number>;\n\n  #handleScaleChange = (scale: number) => {\n    this.#scaleChange.emit(scale);\n  };\n\n  @method()\n  async dropNode({\n    id,\n    position,\n    size,\n    data,\n    useBrick,\n  }: DropNodeInfo): Promise<NodeCell | null> {\n    // Drag and then drop a node\n    const droppedInside = document\n      .elementsFromPoint?.(position[0], position[1])\n      ?.includes(this);\n    if (droppedInside) {\n      const boundingClientRect = this.getBoundingClientRect();\n      const transform = this.#canvasRef.current!.getTransform();\n      const newNode = {\n        type: \"node\",\n        id,\n        view: {\n          ...(this.layout === \"force\" || this.layout === \"dagre\"\n            ? null\n            : {\n                x:\n                  (position[0] - boundingClientRect.left - transform.x) /\n                  transform.k,\n                y:\n                  (position[1] - boundingClientRect.top - transform.y) /\n                  transform.k,\n              }),\n          width: size?.[0] ?? this.defaultNodeSize[0],\n          height: size?.[1] ?? this.defaultNodeSize[0],\n        },\n        data,\n        useBrick,\n      } as NodeCell;\n      this.#canvasRef.current?.dropNode(newNode);\n      return newNode;\n    }\n    return null;\n  }\n\n  @method()\n  async dropDecorator({\n    position,\n    decorator,\n    text,\n    direction,\n  }: DropDecoratorInfo): Promise<DecoratorCell | null> {\n    // Drag and then drop a node\n    const droppedInside = document\n      .elementsFromPoint?.(position[0], position[1])\n      ?.includes(this);\n    if (droppedInside) {\n      const boundingClientRect = this.getBoundingClientRect();\n      const transform = this.#canvasRef.current!.getTransform();\n      const newDecorator: DecoratorCell = {\n        type: \"decorator\",\n        decorator,\n        id: uuidV4(),\n        view: {\n          x:\n            (position[0] - boundingClientRect.left - transform.x) / transform.k,\n          y: (position[1] - boundingClientRect.top - transform.y) / transform.k,\n          width: DEFAULT_AREA_WIDTH,\n          height: DEFAULT_AREA_HEIGHT,\n          text,\n          direction,\n        },\n      };\n      this.#canvasRef.current?.dropDecorator(newDecorator);\n      return newDecorator;\n    }\n    return null;\n  }\n\n  @method()\n  async addNodes(nodes: AddNodeInfo[]): Promise<NodeCell[]> {\n    if (nodes.length === 0) {\n      return [];\n    }\n    const newNodes = nodes.map<NodeCell>(({ size, useBrick, id, data }) => ({\n      type: \"node\",\n      id,\n      data,\n      view: {\n        width: size?.[0] ?? this.defaultNodeSize[0],\n        height: size?.[1] ?? this.defaultNodeSize[0],\n      } as NodeView,\n      useBrick,\n    }));\n    return this.#canvasRef.current!.addNodes(newNodes, {\n      defaultNodeSize: this.defaultNodeSize,\n      canvasWidth: this.clientWidth,\n      canvasHeight: this.clientHeight,\n    });\n  }\n\n  @method()\n  async addEdge({ source, target, data }: AddEdgeInfo): Promise<EdgeCell> {\n    const newEdge: EdgeCell = {\n      type: \"edge\",\n      source,\n      target,\n      data,\n      view: this.lineSettings,\n    };\n    this.#canvasRef.current?.addEdge(newEdge);\n    return newEdge;\n  }\n\n  @method()\n  manuallyConnectNodes(source: NodeId): Promise<ConnectNodesDetail> {\n    return this.#canvasRef.current!.manuallyConnectNodes(source);\n  }\n\n  @method()\n  async updateCells(\n    cells: InitialCell[],\n    ctx?: UpdateCellsContext\n  ): Promise<{ updated: Cell[] }> {\n    await this.#waitForCanvasRef();\n    const { updated } = this.#canvasRef.current!.updateCells(cells, {\n      ...ctx,\n      defaultNodeSize: this.defaultNodeSize,\n      canvasWidth: this.clientWidth,\n      canvasHeight: this.clientHeight,\n    });\n    return { updated };\n  }\n\n  #waitForCanvasRef() {\n    return new Promise<void>((resolve) => {\n      const check = () => {\n        if (this.#canvasRef.current) {\n          resolve();\n        } else {\n          setTimeout(check, 10);\n        }\n      };\n      check();\n    });\n  }\n\n  #canvasRef = createRef<DrawCanvasRef>();\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    lockBodyScroll(this, false);\n  }\n\n  render() {\n    return (\n      <EoDrawCanvasComponent\n        host={this}\n        ref={this.#canvasRef}\n        layout={this.layout}\n        layoutOptions={this.layoutOptions}\n        cells={this.cells}\n        defaultNodeSize={this.defaultNodeSize}\n        defaultNodeBricks={this.defaultNodeBricks}\n        defaultEdgeLines={this.defaultEdgeLines}\n        degradedThreshold={this.degradedThreshold}\n        degradedNodeLabel={this.degradedNodeLabel}\n        activeTarget={this.activeTarget}\n        fadeUnrelatedCells={this.fadeUnrelatedCells}\n        zoomable={this.zoomable}\n        scrollable={this.scrollable}\n        pannable={this.pannable}\n        dragBehavior={this.dragBehavior}\n        ctrlDragBehavior={this.ctrlDragBehavior}\n        scaleRange={this.scaleRange}\n        lineSettings={this.lineSettings}\n        lineConnector={this.lineConnector}\n        allowEdgeToArea={this.allowEdgeToArea}\n        onActiveTargetChange={this.#handleActiveTargetChange}\n        onSwitchActiveTarget={this.#handleSwitchActiveTarget}\n        onCellMove={this.#handleCellMove}\n        onCellsMove={this.#handleCellsMove}\n        onCellResize={this.#handleCellResize}\n        onCellDelete={this.#handleCellDelete}\n        onCellsDelete={this.#handleCellsDelete}\n        onEdgeAdd={this.#handleEdgeAdd}\n        onCellContextMenu={this.#handleCellContextMenu}\n        onDecoratorTextChange={this.#handleDecoratorTextChange}\n        onContainerContainerChange={this.#handleContainerContainerChange}\n        onScaleChange={this.#handleScaleChange}\n        onEdgeViewChange={this.#handleEdgeViewChange}\n      />\n    );\n  }\n}\n\nexport interface EoDrawCanvasComponentProps extends EoDrawCanvasProps {\n  host: HTMLElement;\n  onActiveTargetChange(target: ActiveTarget | null): void;\n  onSwitchActiveTarget(target: ActiveTarget | null): void;\n  onCellMove(info: MoveCellPayload): void;\n  onCellResize(cell: ResizeCellPayload): void;\n  onCellDelete(cell: Cell): void;\n  onCellsMove(info: MoveCellPayload[]): void;\n  onCellsDelete(cells: Cell[]): void;\n  onCellContextMenu(detail: CellContextMenuDetail): void;\n  onEdgeAdd(detail: ConnectNodesDetail): void;\n  onEdgeViewChange(detail: EdgeViewChangePayload): void;\n  onDecoratorTextChange(detail: DecoratorTextChangeDetail): void;\n  onContainerContainerChange(detail: MoveCellPayload[]): void;\n  onScaleChange(scale: number): void;\n}\n\nexport interface DrawCanvasRef {\n  dropNode(node: NodeCell): void;\n  dropDecorator(decorator: DecoratorCell): void;\n  addNodes(nodes: NodeCell[], ctx: AddNodesContext): NodeCell[];\n  addEdge(edge: EdgeCell): void;\n  manuallyConnectNodes(source: NodeId): Promise<ConnectNodesDetail>;\n  updateCells(\n    cells: InitialCell[],\n    ctx: Partial<UpdateCellsContext> & {\n      defaultNodeSize: SizeTuple;\n      canvasWidth: number;\n      canvasHeight: number;\n    }\n  ): {\n    cells: Cell[];\n    updated: Cell[];\n  };\n  getTransform(): TransformLiteral;\n}\n\nfunction LegacyEoDrawCanvasComponent(\n  {\n    host,\n    layout,\n    layoutOptions,\n    cells: initialCells,\n    defaultNodeSize,\n    defaultNodeBricks,\n    defaultEdgeLines,\n    degradedThreshold,\n    degradedNodeLabel,\n    activeTarget: _activeTarget,\n    fadeUnrelatedCells,\n    zoomable,\n    scrollable,\n    pannable,\n    dragBehavior,\n    ctrlDragBehavior,\n    scaleRange: _scaleRange,\n    lineSettings,\n    lineConnector,\n    allowEdgeToArea,\n    onActiveTargetChange,\n    onSwitchActiveTarget,\n    onCellMove,\n    onCellResize,\n    onCellDelete,\n    onCellsMove,\n    onCellsDelete,\n    onCellContextMenu,\n    onEdgeAdd,\n    onDecoratorTextChange,\n    onScaleChange,\n    onContainerContainerChange,\n    onEdgeViewChange,\n  }: EoDrawCanvasComponentProps,\n  ref: React.Ref<DrawCanvasRef>\n) {\n  const [{ cells, layoutKey }, dispatch] = useReducer(\n    rootReducer,\n    initialCells,\n    (initialCells) => ({\n      cells: initializeCells(initialCells, { defaultNodeSize }),\n      layoutKey: 0,\n    })\n  );\n\n  // When nodes are greater or equal to threshold, the diagram will be degraded.\n  // Thus all nodes will be displayed as simple svg elements instead of bricks.\n  const degraded = useMemo(\n    () =>\n      cells.filter(isNodeCell).length >=\n      (degradedThreshold ?? DEFAULT_DEGRADED_THRESHOLD),\n    [cells, degradedThreshold]\n  );\n\n  const rootRef = useRef<SVGSVGElement>(null);\n  const manualConnectDeferredRef = useRef<Deferred<ConnectNodesDetail> | null>(\n    null\n  );\n  const [editingTexts, setEditingTexts] = useState<string[]>([]);\n  const [activeContainers, setActiveContainers] = useState<string[]>([]);\n  const { grabbing, transform, zoomer, scaleRange } = useZoom({\n    rootRef,\n    zoomable,\n    scrollable,\n    pannable,\n    draggable: dragBehavior === \"grab\",\n    ctrlDraggable: ctrlDragBehavior === \"grab\",\n    scaleRange: _scaleRange,\n    onSwitchActiveTarget,\n  });\n\n  useEffect(() => {\n    onScaleChange(transform.k);\n  }, [onScaleChange, transform.k]);\n\n  const [lassoRect, setLassoRect] = useState<NodeView | null>(null);\n\n  const [connectLineState, setConnectLineState] =\n    useState<ConnectLineState | null>(null);\n\n  const { centered, setCentered, getNextLayoutKey } = useLayout({\n    layout,\n    layoutOptions,\n    rootRef,\n    cells,\n    zoomable,\n    zoomer,\n    scaleRange,\n    layoutKey,\n    allowEdgeToArea,\n    dispatch,\n  });\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      dropNode(node) {\n        // Do not apply auto centering when dropping a node in manual layout.\n        if (layout !== \"dagre\" && layout !== \"force\") {\n          setCentered(true);\n        }\n        dispatch({ type: \"drop-node\", payload: node });\n      },\n      dropDecorator(decorator) {\n        // Do not apply auto centering when dropping a decorator in manual layout.\n        if (layout !== \"dagre\" && layout !== \"force\") {\n          setCentered(true);\n        }\n        dispatch({ type: \"drop-decorator\", payload: decorator });\n      },\n      addNodes(\n        nodes,\n        { defaultNodeSize, canvasWidth, canvasHeight }: AddNodesContext\n      ) {\n        const index =\n          cells.findLastIndex(\n            (cell) => !(cell.type === \"decorator\" && cell.decorator === \"text\")\n          ) + 1;\n        const newCells = [\n          ...cells.slice(0, index),\n          ...nodes,\n          ...cells.slice(index),\n        ];\n        const {\n          cells: allCells,\n          updated,\n          shouldReCenter,\n        } = updateCells({\n          cells: newCells,\n          layout,\n          previousCells: cells,\n          defaultNodeSize,\n          canvasWidth,\n          canvasHeight,\n          scaleRange,\n          transform,\n          allowEdgeToArea,\n        });\n        if (shouldReCenter) {\n          setCentered(false);\n        }\n        dispatch({ type: \"update-cells\", payload: allCells });\n        return updated.filter((node) =>\n          nodes.includes(node as NodeCell)\n        ) as NodeCell[];\n      },\n      addEdge(edge) {\n        dispatch({ type: \"add-edge\", payload: edge });\n      },\n      updateCells(newCells, ctx) {\n        const { shouldReCenter, ...result } = updateCells({\n          ...ctx,\n          layout,\n          previousCells: cells,\n          cells: newCells,\n          scaleRange,\n          transform,\n          allowEdgeToArea,\n        });\n        if (shouldReCenter) {\n          setCentered(false);\n        }\n        dispatch({ type: \"update-cells\", payload: result.cells });\n        return result;\n      },\n      getTransform() {\n        return transform;\n      },\n      manuallyConnectNodes(sourceId) {\n        const source = cells.find(\n          (cell) => isEdgeSide(cell, allowEdgeToArea) && cell.id === sourceId\n        ) as NodeCell | DecoratorCell | undefined;\n        if (source) {\n          const rect = rootRef.current!.getBoundingClientRect();\n          setConnectLineState({\n            source,\n            from: [\n              source.view.x + source.view.width / 2,\n              source.view.y + source.view.height / 2,\n            ],\n            offset: [rect.left, rect.top],\n          });\n          const promise = new Promise<ConnectNodesDetail>((resolve, reject) => {\n            manualConnectDeferredRef.current = { resolve, reject };\n          });\n          return promise;\n        }\n        return Promise.reject(null);\n      },\n    }),\n    [cells, layout, scaleRange, setCentered, transform, allowEdgeToArea]\n  );\n\n  const handleConnect = useCallback(\n    (state: ConnectLineState, to: PositionTuple) => {\n      // Find the target node from top bo bottom,\n      // detect whether the pointer is inside the target node.\n      for (let i = cells.length - 1; i >= 0; i--) {\n        const cell = cells[i];\n        // Currently ignore connecting to self\n        if (isEdgeSide(cell, allowEdgeToArea) && cell.id !== state.source.id) {\n          if (\n            cell.view.x < to[0] &&\n            cell.view.x + cell.view.width > to[0] &&\n            cell.view.y < to[1] &&\n            cell.view.y + cell.view.height > to[1]\n          ) {\n            manualConnectDeferredRef.current?.resolve({\n              source: state.source,\n              target: cell,\n            });\n            break;\n          }\n        }\n      }\n      manualConnectDeferredRef.current?.reject(null);\n      setConnectLineState(null);\n    },\n    [allowEdgeToArea, cells]\n  );\n  const [smartConnectLineState, setSmartConnectLineState] =\n    useState<SmartConnectLineState | null>(null);\n\n  useEffect(() => {\n    lockBodyScroll(\n      host,\n      !!(connectLineState || !!smartConnectLineState || lassoRect)\n    );\n  }, [connectLineState, host, smartConnectLineState, lassoRect]);\n\n  const activeTarget = useActiveTarget({\n    rootRef,\n    activeTarget: _activeTarget,\n    onActiveTargetChange,\n  });\n\n  const [unrelatedCells, setUnrelatedCells] = useState<Cell[]>([]);\n  useEffect(() => {\n    const nextUnrelated = fadeUnrelatedCells\n      ? getUnrelatedCells(\n          cells,\n          connectLineState,\n          activeTarget,\n          allowEdgeToArea\n        )\n      : [];\n    // Do not update the state when prev and next are both empty.\n    setUnrelatedCells((prev) =>\n      prev.length === 0 && nextUnrelated.length === 0 ? prev : nextUnrelated\n    );\n  }, [\n    activeTarget,\n    cells,\n    connectLineState,\n    fadeUnrelatedCells,\n    allowEdgeToArea,\n  ]);\n\n  useEffect(() => {\n    const root = rootRef.current;\n    if (!root || editingTexts.length > 0) {\n      return;\n    }\n    const onKeydown = (event: KeyboardEvent) => {\n      const action = handleKeyboard(event, {\n        cells,\n        activeTarget,\n      });\n\n      switch (action?.action) {\n        case \"delete-cells\":\n          onCellsDelete(action.cells);\n          if (action.cells.length === 1) {\n            onCellDelete(action.cells[0]);\n          }\n          break;\n      }\n    };\n    root.addEventListener(\"keydown\", onKeydown);\n    return () => {\n      root.removeEventListener(\"keydown\", onKeydown);\n    };\n  }, [activeTarget, cells, editingTexts.length, onCellDelete, onCellsDelete]);\n\n  const defPrefix = useMemo(() => `${uniqueId(\"diagram-\")}-`, []);\n  const markerPrefix = `${defPrefix}line-arrow-`;\n\n  const [guideLines, setGuideLines] = useState<LineTuple[]>([]);\n\n  /* istanbul ignore next */\n  const handleCellsMoving = useCallback(\n    (info: MoveCellPayload[]) => {\n      dispatch({ type: \"move-cells\", payload: info });\n      const containedIds: string[] = [];\n      handleNodeContainedChange(info, cells).forEach((c) => {\n        if (c.containerCell?.id) containedIds.push(c.containerCell?.id);\n      });\n      setActiveContainers(containedIds);\n      setGuideLines(info.flatMap((c) => c.guideLines ?? []));\n    },\n    [cells]\n  );\n\n  /* istanbul ignore next */\n  const handleCellsMoved = useCallback(\n    (info: MoveCellPayload[]) => {\n      dispatch({ type: \"move-cells\", payload: info });\n      onCellsMove(info);\n      if (info.length === 1) {\n        onCellMove(info[0]);\n      }\n      handleNodeContainedChange(info, cells, onContainerContainerChange);\n      setActiveContainers([]);\n      setGuideLines([]);\n    },\n    [onCellMove, onCellsMove, cells, onContainerContainerChange]\n  );\n\n  const handleCellResizing = useCallback((info: ResizeCellPayload) => {\n    dispatch({ type: \"resize-cell\", payload: info });\n  }, []);\n\n  const handleCellResized = useCallback(\n    (info: ResizeCellPayload) => {\n      dispatch({ type: \"resize-cell\", payload: info });\n      onCellResize(info);\n    },\n    [onCellResize]\n  );\n\n  const handleDecoratorTextEditing = useCallback(\n    ({ id, editing }: { id: string; editing: boolean }) => {\n      if (editing) {\n        setEditingTexts((texts) =>\n          texts.includes(id) ? texts : [...texts, id]\n        );\n      } else {\n        setEditingTexts((texts) => texts.filter((text) => text !== id));\n      }\n    },\n    []\n  );\n\n  const handleNodeBrickResize = useCallback(\n    (id: string, size: SizeTuple | null) => {\n      const nextLayoutKey = getNextLayoutKey();\n      dispatch({\n        type: \"update-node-size\",\n        payload: { id, size },\n        layoutKey: nextLayoutKey,\n      });\n    },\n    [getNextLayoutKey]\n  );\n\n  const handleZoomSlide = useCallback(\n    (value: number) => {\n      // istanbul ignore next\n      if (process.env.NODE_ENV !== \"test\") {\n        zoomer.scaleTo(select(rootRef.current!), value / 100);\n      }\n    },\n    [zoomer]\n  );\n\n  const reCenter = useCallback(() => {\n    setCentered(false);\n  }, [setCentered]);\n  const { lineConfMap, lineConnectorConf, markers } = useLineMarkers({\n    cells,\n    defaultEdgeLines,\n    lineConnector,\n    markerPrefix,\n  });\n\n  const ready = useReady({ cells, layout, centered });\n\n  const [hoverState, setHoverState] = useState<HoverState | null>(null);\n  const unsetHoverStateTimeoutRef = useRef<number | null>(null);\n\n  const [activeEditableLine, setActiveEditableLine] =\n    useState<EditableLineInfo | null>(null);\n  const [lineEditorState, setLineEditorState] =\n    useState<LineEditorState | null>(null);\n\n  // istanbul ignore next\n  const handleCellMouseEnter = useCallback(\n    (cell: Cell) => {\n      if (\n        lineConnectorConf &&\n        isEdgeSide(cell, allowEdgeToArea) &&\n        (!lineEditorState || lineEditorState.type !== \"control\")\n      ) {\n        if (unsetHoverStateTimeoutRef.current !== null) {\n          clearTimeout(unsetHoverStateTimeoutRef.current);\n          unsetHoverStateTimeoutRef.current = null;\n        }\n        const relativePoints = getConnectPointsOfRectangle();\n        setHoverState({\n          cell,\n          relativePoints,\n          points: getConnectPoints(relativePoints, cell.view),\n        });\n      }\n    },\n    [allowEdgeToArea, lineConnectorConf, lineEditorState]\n  );\n\n  const handleCellMouseLeave = useCallback(\n    (cell: Cell) => {\n      if (lineConnectorConf && isNodeCell(cell)) {\n        unsetHoverStateTimeoutRef.current = setTimeout(() => {\n          setHoverState(null);\n        }) as unknown as number;\n      }\n    },\n    [lineConnectorConf]\n  );\n\n  // istanbul ignore next\n  const handleSmartConnect = useCallback(\n    (\n      source: NodeCell | DecoratorCell,\n      target: NodeCell | DecoratorCell,\n      exitPosition: NodePosition,\n      entryPosition: NodePosition | undefined\n    ) => {\n      const payload: EdgeViewChangePayload = {\n        source: source.id,\n        target: target.id,\n        view: {\n          ...lineSettings,\n          exitPosition,\n          entryPosition,\n          vertices: null,\n        },\n      };\n      const existedEdge = cells.find(\n        (cell) =>\n          cell.type === \"edge\" &&\n          cell.source === source.id &&\n          cell.target === target.id\n      );\n      if (existedEdge) {\n        dispatch({\n          type: \"change-edge-view\",\n          payload,\n        });\n        onEdgeViewChange?.(payload);\n      } else {\n        const newEdge: EdgeCell = {\n          type: \"edge\",\n          ...payload,\n        };\n        dispatch({\n          type: \"add-edge\",\n          payload: newEdge,\n        });\n        onEdgeAdd({\n          source,\n          target,\n          view: newEdge.view,\n        });\n      }\n    },\n    [cells, lineSettings, onEdgeAdd, onEdgeViewChange]\n  );\n\n  // istanbul ignore next\n  const handleEdgeChangeView = useCallback(\n    (\n      source: NodeCell | DecoratorCell,\n      target: NodeCell | DecoratorCell,\n      view: EdgeView\n    ) => {\n      const payload: EdgeViewChangePayload = {\n        source: source.id,\n        target: target.id,\n        view,\n      };\n      dispatch({\n        type: \"change-edge-view\",\n        payload,\n      });\n      onEdgeViewChange?.(payload);\n    },\n    [onEdgeViewChange]\n  );\n\n  // istanbul ignore next: experimental\n  const hoverStateContextValue = useMemo(\n    () => ({\n      rootRef,\n      smartConnectLineState,\n      unsetHoverStateTimeoutRef,\n      hoverState,\n      activeEditableLine,\n      lineEditorState,\n      setLineEditorState,\n      setActiveEditableLine,\n      setHoverState,\n      setSmartConnectLineState,\n      onConnect: handleSmartConnect,\n      onChangeEdgeView: handleEdgeChangeView,\n    }),\n    [\n      activeEditableLine,\n      handleEdgeChangeView,\n      handleSmartConnect,\n      hoverState,\n      lineEditorState,\n      smartConnectLineState,\n    ]\n  );\n\n  useEffect(() => {\n    const root = rootRef.current;\n    if (!root || dragBehavior !== \"lasso\") {\n      return;\n    }\n    const rootRect = root.getBoundingClientRect();\n    const onMouseDown = (event: MouseEvent) => {\n      handleLasso(event, {\n        transform,\n        offset: [rootRect.left, rootRect.top],\n        onLassoing(rect) {\n          setLassoRect(rect);\n        },\n        onLassoed(rect) {\n          setLassoRect(null);\n          const lassoedCells: (NodeCell | DecoratorCell)[] = [];\n          for (const cell of cells) {\n            if (\n              isContainerDecoratorCell(cell) ||\n              isNodeOrAreaDecoratorCell(cell) ||\n              isTextDecoratorCell(cell)\n            ) {\n              const x = cell.view.x;\n              const y = cell.view.y;\n              if (\n                x >= rect.x &&\n                x + cell.view.width <= rect.x + rect.width &&\n                y >= rect.y &&\n                y + cell.view.height <= rect.y + rect.height\n              ) {\n                lassoedCells.push(cell);\n              }\n            }\n          }\n          onSwitchActiveTarget?.(\n            lassoedCells.length > 1\n              ? { type: \"multi\", targets: lassoedCells.map(cellToTarget) }\n              : lassoedCells.length === 1\n                ? cellToTarget(lassoedCells[0])\n                : null\n          );\n        },\n      });\n    };\n    root.addEventListener(\"mousedown\", onMouseDown);\n    return () => {\n      root.removeEventListener(\"mousedown\", onMouseDown);\n    };\n  }, [transform, cells, dragBehavior, onSwitchActiveTarget]);\n\n  return (\n    <HoverStateContext.Provider value={hoverStateContextValue}>\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        ref={rootRef}\n        className={classNames(\"root\", { grabbing, pannable, ready })}\n        tabIndex={-1}\n      >\n        <defs>\n          {markers.map((marker, index) => (\n            <MarkerComponent\n              key={index}\n              id={`${markerPrefix}${index}`}\n              type={marker.markerType}\n              strokeColor={marker.strokeColor}\n            />\n          ))}\n        </defs>\n        <g\n          transform={`translate(${transform.x} ${transform.y}) scale(${transform.k})`}\n        >\n          <g className={classNames(\"cells\", { allowEdgeToArea })}>\n            {cells.map((cell) => (\n              <CellComponent\n                key={`${cell.type}:${isEdgeCell(cell) ? `${cell.source}~${cell.target}` : cell.id}`}\n                dragNodeToContainerActive={\n                  isEdgeCell(cell) ? false : activeContainers.includes(cell.id)\n                }\n                layout={layout}\n                layoutOptions={layoutOptions}\n                cell={cell}\n                cells={cells}\n                degraded={degraded}\n                degradedNodeLabel={degradedNodeLabel}\n                defaultNodeBricks={defaultNodeBricks}\n                transform={transform}\n                lineConfMap={lineConfMap}\n                activeTarget={activeTarget}\n                unrelatedCells={unrelatedCells}\n                allowEdgeToArea={allowEdgeToArea}\n                onCellsMoving={handleCellsMoving}\n                onCellsMoved={handleCellsMoved}\n                onCellResizing={handleCellResizing}\n                onCellResized={handleCellResized}\n                onSwitchActiveTarget={onSwitchActiveTarget}\n                onCellContextMenu={onCellContextMenu}\n                onDecoratorTextChange={onDecoratorTextChange}\n                onDecoratorTextEditing={handleDecoratorTextEditing}\n                onNodeBrickResize={handleNodeBrickResize}\n                onCellMouseEnter={handleCellMouseEnter}\n                onCellMouseLeave={handleCellMouseLeave}\n              />\n            ))}\n          </g>\n          <g>\n            <ConnectLineComponent\n              connectLineState={connectLineState}\n              transform={transform}\n              markerEnd={`${markerPrefix}0`}\n              onConnect={handleConnect}\n            />\n          </g>\n          {lassoRect && (\n            <rect\n              x={lassoRect.x}\n              y={lassoRect.y}\n              width={lassoRect.width}\n              height={lassoRect.height}\n              fill=\"var(--palette-gray-5)\"\n              fillOpacity={0.3}\n              stroke=\"var(--palette-gray-5)\"\n              strokeDasharray={2}\n            />\n          )}\n          {lineConnectorConf && (\n            <g>\n              <SmartConnectLineComponent\n                transform={transform}\n                lineSettings={lineSettings}\n                options={lineConnectorConf}\n              />\n              <EditingLineComponent\n                transform={transform}\n                options={lineConnectorConf}\n              />\n            </g>\n          )}\n          <g>\n            {guideLines.map((line, index) => (\n              <path\n                key={index}\n                d={`M${line[0].join(\" \")} L${line[1].join(\" \")}`}\n                stroke=\"var(--palette-orange-5)\"\n                fill=\"none\"\n                strokeWidth={1 / transform.k}\n              />\n            ))}\n          </g>\n          <g>\n            {lineConnectorConf && <LineEditorComponent scale={transform.k} />}\n          </g>\n          {lineConnectorConf && (\n            <LineConnectorComponent\n              activeTarget={activeTarget}\n              scale={transform.k}\n              disabled={!!connectLineState}\n            />\n          )}\n        </g>\n      </svg>\n      <ZoomBarComponent\n        shadowRoot={host.shadowRoot!}\n        scale={transform.k}\n        scaleRange={scaleRange}\n        onZoomChange={handleZoomSlide}\n        onReCenter={reCenter}\n      />\n    </HoverStateContext.Provider>\n  );\n}\n\nexport function uuidV4() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0,\n      v = c == \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nfunction getConnectPoints(\n  relativePoints: ReadonlyArray<NodePosition>,\n  view: NodeView,\n  border = 1\n) {\n  const padding = DEFAULT_NODE_PADDING_FOR_SMART_LINES;\n  const halfPadding = padding / 2;\n\n  const viewWithBorderAndPadding: NodeView = {\n    x: view.x + border / 2 - halfPadding,\n    y: view.y + border / 2 - halfPadding,\n    width: view.width - border + padding,\n    height: view.height - border + padding,\n  };\n\n  return relativePoints.map((p) => ({\n    x: viewWithBorderAndPadding.x + p.x * viewWithBorderAndPadding.width,\n    y: viewWithBorderAndPadding.y + p.y * viewWithBorderAndPadding.height,\n  }));\n}\n"],"names":["defineElement","property","event","createDecorators","_EoDisplayCanvas","_A","WeakMap","_B","_C","_D","_E","_F","_G","_H","_I","_J","_K","_L","_M","_N","_O","_P","_Q","_EoDisplayCanvas_brand","WeakSet","_handleActiveTargetChange","_handleSwitchActiveTarget","_R","_handleCellContextMenu","_S","_handleCellClick","EoDisplayCanvas","ReactNextElement","constructor","arguments","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_init_cells","_init_extra_cells","_init_layout","_init_extra_layout","_init_layoutOptions","_init_extra_layoutOptions","_init_defaultNodeSize","DEFAULT_NODE_SIZE","_init_extra_defaultNodeSize","_init_defaultNodeBricks","_init_extra_defaultNodeBricks","_init_degradedThreshold","_init_extra_degradedThreshold","_init_degradedNodeLabel","_init_extra_degradedNodeLabel","_init_defaultEdgeLines","_init_extra_defaultEdgeLines","_init_activeTarget","_init_extra_activeTarget","_init_fadeUnrelatedCells","_init_extra_fadeUnrelatedCells","_init_zoomable","_init_extra_zoomable","_init_scrollable","_init_extra_scrollable","_init_pannable","_init_extra_pannable","_init_scaleRange","_init_extra_scaleRange","_init_hideZoomBar","_init_extra_hideZoomBar","_init_autoCenterWhenCellsChange","_init_extra_autoCenterWhenCellsChange","_init_activeTargetChangeEvent","_init_extra_activeTargetChangeEvent","target","_classPrivateGetter","this","_get_activeTargetChangeEvent","emit","sameTarget","activeTarget","_init_cellContextMenu","_init_extra_cellContextMenu","detail","_get_cellContextMenu","_init_cellClick","_init_extra_cellClick","_get_cellClick","cells","_classPrivateFieldGet","v","_classPrivateFieldSet","layout","layoutOptions","defaultNodeSize","defaultNodeBricks","degradedThreshold","degradedNodeLabel","defaultEdgeLines","fadeUnrelatedCells","zoomable","scrollable","pannable","scaleRange","hideZoomBar","autoCenterWhenCellsChange","render","React","EoDisplayCanvasComponent","shadowRoot","onActiveTargetChange","onSwitchActiveTarget","onCellContextMenu","onCellClick","_ref","initialCells","_activeTarget","_scaleRange","layoutKey","dispatch","useReducer","rootReducer","initializeCells","degraded","useMemo","filter","isNodeCell","length","DEFAULT_DEGRADED_THRESHOLD","rootRef","useRef","grabbing","transform","zoomer","useZoom","draggable","centered","setCentered","getNextLayoutKey","useLayout","reCenter","useCallback","previousCellsRef","useEffect","current","result","updateCells","canvasWidth","host","clientWidth","canvasHeight","clientHeight","previousCells","type","payload","useActiveTarget","markerPrefix","uniqueId","handleNodeBrickResize","id","size","hoverCell","setHoverCell","useState","handleCellMouseEnter","cell","handleCellMouseLeave","prev","unrelatedCells","setUnrelatedCells","nextUnrelated","getUnrelatedCells","handleZoomSlide","value","scaleTo","select","lineConfMap","markers","useLineMarkers","ready","useReady","width","height","ref","className","classNames","tabIndex","map","marker","index","MarkerComponent","key","markerType","strokeColor","x","y","k","CellComponent","isEdgeCell","source","readOnly","onNodeBrickResize","onCellMouseEnter","undefined","onCellMouseLeave","ZoomBarComponent","scale","onZoomChange","onReCenter","_EoDisplayCanvas2","e","_set_activeTargetChangeEvent","_set_cellContextMenu","_set_cellClick","c","_initClass","_applyDecs","styleTexts","styleText","zoomBarStyleText","attribute","String","Number","Boolean","o","_","has","_checkInRHS","lockBodyScroll","unwrapProvider","method","EoDrawCanvasComponent","LegacyEoDrawCanvasComponent","_EoDrawCanvas","_T","_EoDrawCanvas_brand","_U","_V","_handleCellMove","_W","_handleCellsMove","_X","_handleCellResize","_Y","_Z","_handleCellDelete","_a","_handleCellsDelete","_b","_c","_handleEdgeAdd","_d","_handleEdgeViewChange","_e","_handleDecoratorTextChange","_f","_handleContainerContainerChange","_g","_handleScaleChange","_canvasRef","EoDrawCanvas","_initProto","_init_allowEdgeToArea","_init_extra_allowEdgeToArea","_init_dragBehavior","_init_extra_dragBehavior","_init_ctrlDragBehavior","_init_extra_ctrlDragBehavior","_init_lineSettings","_init_extra_lineSettings","_init_lineConnector","_init_extra_lineConnector","_init_nodeMoveEvent","_init_extra_nodeMoveEvent","_init_cellMoveEvent","_init_extra_cellMoveEvent","info","_get_cellMoveEvent","_get_nodeMoveEvent","_init_cellsMoveEvent","_init_extra_cellsMoveEvent","_get_cellsMoveEvent","_init_cellResizeEvent","_init_extra_cellResizeEvent","_get_cellResizeEvent","_init_nodeDelete","_init_extra_nodeDelete","_init_cellDelete","_init_extra_cellDelete","_get_cellDelete","_get_nodeDelete","_init_cellsDelete","_init_extra_cellsDelete","_get_cellsDelete","_init_edgeAdd","_init_extra_edgeAdd","edge","_get_edgeAdd","_init_edgeViewChange","_init_extra_edgeViewChange","_get_edgeViewChange","_init_decoratorTextChange","_init_extra_decoratorTextChange","_get_decoratorTextChange","_init_containerContainerChange","_init_extra_containerContainerChange","_get_containerContainerChange","_init_scaleChange","_init_extra_scaleChange","_get_scaleChange","createRef","allowEdgeToArea","dragBehavior","ctrlDragBehavior","lineSettings","lineConnector","dropNode","_document$elementsFro","_document","position","data","useBrick","document","elementsFromPoint","call","includes","_classPrivateFieldGet2","boundingClientRect","getBoundingClientRect","getTransform","newNode","view","left","top","dropDecorator","_ref2","_document$elementsFro2","_document2","decorator","text","direction","_classPrivateFieldGet3","newDecorator","uuidV4","DEFAULT_AREA_WIDTH","DEFAULT_AREA_HEIGHT","addNodes","nodes","newNodes","_ref3","addEdge","_ref4","_classPrivateFieldGet4","newEdge","manuallyConnectNodes","ctx","_assertClassBrand","_waitForCanvasRef","updated","disconnectedCallback","super","onCellMove","onCellsMove","onCellResize","onCellDelete","onCellsDelete","onEdgeAdd","onDecoratorTextChange","onContainerContainerChange","onScaleChange","onEdgeViewChange","Promise","resolve","check","setTimeout","_ref5","manualConnectDeferredRef","editingTexts","setEditingTexts","activeContainers","setActiveContainers","ctrlDraggable","lassoRect","setLassoRect","connectLineState","setConnectLineState","useImperativeHandle","node","_ref6","findLastIndex","newCells","slice","allCells","shouldReCenter","sourceId","find","isEdgeSide","rect","from","offset","reject","handleConnect","state","to","_manualConnectDeferre2","i","_manualConnectDeferre","smartConnectLineState","setSmartConnectLineState","root","onKeydown","action","handleKeyboard","addEventListener","removeEventListener","guideLines","setGuideLines","handleCellsMoving","containedIds","handleNodeContainedChange","forEach","_c$containerCell","_c$containerCell2","containerCell","push","flatMap","handleCellsMoved","handleCellResizing","handleCellResized","handleDecoratorTextEditing","_ref7","editing","texts","nextLayoutKey","lineConnectorConf","hoverState","setHoverState","unsetHoverStateTimeoutRef","activeEditableLine","setActiveEditableLine","lineEditorState","setLineEditorState","clearTimeout","relativePoints","getConnectPointsOfRectangle","points","getConnectPoints","handleSmartConnect","exitPosition","entryPosition","vertices","handleEdgeChangeView","hoverStateContextValue","onConnect","onChangeEdgeView","rootRect","onMouseDown","handleLasso","onLassoing","onLassoed","lassoedCells","isContainerDecoratorCell","isNodeOrAreaDecoratorCell","isTextDecoratorCell","targets","cellToTarget","HoverStateContext","Provider","dragNodeToContainerActive","onCellsMoving","onCellsMoved","onCellResizing","onCellResized","onDecoratorTextEditing","ConnectLineComponent","markerEnd","fill","fillOpacity","stroke","strokeDasharray","SmartConnectLineComponent","options","EditingLineComponent","line","d","join","strokeWidth","LineEditorComponent","LineConnectorComponent","disabled","replace","r","Math","random","toString","border","padding","DEFAULT_NODE_PADDING_FOR_SMART_LINES","halfPadding","viewWithBorderAndPadding","p","_EoDrawCanvas2","_set_nodeMoveEvent","_set_cellMoveEvent","_set_cellsMoveEvent","_set_cellResizeEvent","_set_nodeDelete","_set_cellDelete","_set_cellsDelete","_set_edgeAdd","_set_edgeViewChange","_set_decoratorTextChange","_set_containerContainerChange","_set_scaleChange"],"sourceRoot":""}