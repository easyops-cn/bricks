{"version":3,"file":"chunks/447.c3c5c5cb.js","mappings":"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","sources":["webpack:///../../node_modules/mnemonist/bi-map.js","webpack:///../../node_modules/mnemonist/bit-set.js","webpack:///../../node_modules/mnemonist/bit-vector.js","webpack:///../../node_modules/mnemonist/bk-tree.js","webpack:///../../node_modules/mnemonist/bloom-filter.js","webpack:///../../node_modules/mnemonist/circular-buffer.js","webpack:///../../node_modules/mnemonist/default-map.js","webpack:///../../node_modules/mnemonist/default-weak-map.js","webpack:///../../node_modules/mnemonist/fibonacci-heap.js","webpack:///../../node_modules/mnemonist/fixed-deque.js","webpack:///../../node_modules/mnemonist/fixed-reverse-heap.js","webpack:///../../node_modules/mnemonist/fixed-stack.js","webpack:///../../node_modules/mnemonist/fuzzy-map.js","webpack:///../../node_modules/mnemonist/fuzzy-multi-map.js","webpack:///../../node_modules/mnemonist/hashed-array-tree.js","webpack:///../../node_modules/mnemonist/heap.js","webpack:///../../node_modules/mnemonist/index.js","webpack:///../../node_modules/mnemonist/inverted-index.js","webpack:///../../node_modules/mnemonist/kd-tree.js","webpack:///../../node_modules/mnemonist/linked-list.js","webpack:///../../node_modules/mnemonist/lru-cache-with-delete.js","webpack:///../../node_modules/mnemonist/lru-cache.js","webpack:///../../node_modules/mnemonist/lru-map-with-delete.js","webpack:///../../node_modules/mnemonist/lru-map.js","webpack:///../../node_modules/mnemonist/multi-map.js","webpack:///../../node_modules/mnemonist/multi-set.js","webpack:///../../node_modules/mnemonist/passjoin-index.js","webpack:///../../node_modules/mnemonist/queue.js","webpack:///../../node_modules/mnemonist/set.js","webpack:///../../node_modules/mnemonist/sort/quick.js","webpack:///../../node_modules/mnemonist/sparse-map.js","webpack:///../../node_modules/mnemonist/sparse-queue-set.js","webpack:///../../node_modules/mnemonist/sparse-set.js","webpack:///../../node_modules/mnemonist/stack.js","webpack:///../../node_modules/mnemonist/static-disjoint-set.js","webpack:///../../node_modules/mnemonist/static-interval-tree.js","webpack:///../../node_modules/mnemonist/suffix-array.js","webpack:///../../node_modules/mnemonist/symspell.js","webpack:///../../node_modules/mnemonist/trie-map.js","webpack:///../../node_modules/mnemonist/trie.js","webpack:///../../node_modules/mnemonist/utils/binary-search.js","webpack:///../../node_modules/mnemonist/utils/bitwise.js","webpack:///../../node_modules/mnemonist/utils/comparators.js","webpack:///../../node_modules/mnemonist/utils/iterables.js","webpack:///../../node_modules/mnemonist/utils/merge.js","webpack:///../../node_modules/mnemonist/utils/murmurhash3.js","webpack:///../../node_modules/mnemonist/utils/typed-arrays.js","webpack:///../../node_modules/mnemonist/vector.js","webpack:///../../node_modules/mnemonist/vp-tree.js","webpack:///../../node_modules/obliterator/foreach.js","webpack:///../../node_modules/obliterator/iterator.js","webpack:///../../node_modules/obliterator/support.js","webpack:///../../node_modules/@babel/runtime/helpers/esm/assertClassBrand.js","webpack:///../../node_modules/@babel/runtime/helpers/esm/checkPrivateRedeclaration.js","webpack:///../../node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js","webpack:///../../node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js","webpack:///../../node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js","webpack:///../../node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js"],"sourcesContent":["/**\n * Mnemonist BiMap\n * ================\n *\n * JavaScript implementation of a BiMap.\n */\nvar forEach = require('obliterator/foreach');\n\n/**\n * Inverse Map.\n *\n * @constructor\n */\nfunction InverseMap(original) {\n\n  this.size = 0;\n  this.items = new Map();\n  this.inverse = original;\n}\n\n/**\n * BiMap.\n *\n * @constructor\n */\nfunction BiMap() {\n\n  this.size = 0;\n  this.items = new Map();\n  this.inverse = new InverseMap(this);\n}\n\n/**\n * Method used to clear the map.\n *\n * @return {undefined}\n */\nfunction clear() {\n  this.size = 0;\n  this.items.clear();\n  this.inverse.items.clear();\n}\n\nBiMap.prototype.clear = clear;\nInverseMap.prototype.clear = clear;\n\n/**\n * Method used to set a relation.\n *\n * @param  {any} key - Key.\n * @param  {any} value - Value.\n * @return {BiMap|InverseMap}\n */\nfunction set(key, value) {\n\n  // First we need to attempt to see if the relation is not flawed\n  if (this.items.has(key)) {\n    var currentValue = this.items.get(key);\n\n    // The relation already exists, we do nothing\n    if (currentValue === value)\n      return this;\n    else\n      this.inverse.items.delete(currentValue);\n  }\n\n  if (this.inverse.items.has(value)) {\n    var currentKey = this.inverse.items.get(value);\n\n    if (currentKey === key)\n      return this;\n    else\n      this.items.delete(currentKey);\n  }\n\n  // Here we actually add the relation\n  this.items.set(key, value);\n  this.inverse.items.set(value, key);\n\n  // Size\n  this.size = this.items.size;\n  this.inverse.size = this.inverse.items.size;\n\n  return this;\n}\n\nBiMap.prototype.set = set;\nInverseMap.prototype.set = set;\n\n/**\n * Method used to delete a relation.\n *\n * @param  {any} key - Key.\n * @return {boolean}\n */\nfunction del(key) {\n  if (this.items.has(key)) {\n    var currentValue = this.items.get(key);\n\n    this.items.delete(key);\n    this.inverse.items.delete(currentValue);\n\n    // Size\n    this.size = this.items.size;\n    this.inverse.size = this.inverse.items.size;\n\n    return true;\n  }\n\n  return false;\n}\n\nBiMap.prototype.delete = del;\nInverseMap.prototype.delete = del;\n\n/**\n * Mapping some Map prototype function unto our two classes.\n */\nvar METHODS = ['has', 'get', 'forEach', 'keys', 'values', 'entries'];\n\nMETHODS.forEach(function(name) {\n  BiMap.prototype[name] = InverseMap.prototype[name] = function() {\n    return Map.prototype[name].apply(this.items, arguments);\n  };\n});\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined') {\n  BiMap.prototype[Symbol.iterator] = BiMap.prototype.entries;\n  InverseMap.prototype[Symbol.iterator] = InverseMap.prototype.entries;\n}\n\n/**\n * Convenience known methods.\n */\nBiMap.prototype.inspect = function() {\n  var dummy = {\n    left: this.items,\n    right: this.inverse.items\n  };\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(dummy, 'constructor', {\n    value: BiMap,\n    enumerable: false\n  });\n\n  return dummy;\n};\n\nif (typeof Symbol !== 'undefined')\n  BiMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = BiMap.prototype.inspect;\n\nInverseMap.prototype.inspect = function() {\n  var dummy = {\n    left: this.inverse.items,\n    right: this.items\n  };\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(dummy, 'constructor', {\n    value: InverseMap,\n    enumerable: false\n  });\n\n  return dummy;\n};\n\nif (typeof Symbol !== 'undefined')\n  InverseMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = InverseMap.prototype.inspect;\n\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a bimap.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @return {BiMap}\n */\nBiMap.from = function(iterable) {\n  var bimap = new BiMap();\n\n  forEach(iterable, function(value, key) {\n    bimap.set(key, value);\n  });\n\n  return bimap;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = BiMap;\n","/**\n * Mnemonist BitSet\n * =================\n *\n * JavaScript implementation of a fixed-size BitSet based upon a Uint32Array.\n *\n * Notes:\n *   - (i >> 5) is the same as ((i / 32) | 0)\n *   - (i & 0x0000001f) is the same as (i % 32)\n *   - I could use a Float64Array to store more in less blocks but I would lose\n *     the benefits of byte comparison to keep track of size without popcounts.\n */\nvar Iterator = require('obliterator/iterator'),\n    bitwise = require('./utils/bitwise.js');\n\n/**\n * BitSet.\n *\n * @constructor\n */\nfunction BitSet(length) {\n\n  // Properties\n  this.length = length;\n  this.clear();\n\n  // Methods\n\n  // Statics\n}\n\n/**\n * Method used to clear the bit set.\n *\n * @return {undefined}\n */\nBitSet.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n  this.array = new Uint32Array(Math.ceil(this.length / 32));\n};\n\n/**\n * Method used to set the given bit's value.\n *\n * @param  {number} index - Target bit index.\n * @param  {number} value - Value to set.\n * @return {BitSet}\n */\nBitSet.prototype.set = function(index, value) {\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f,\n      oldBytes = this.array[byteIndex],\n      newBytes;\n\n  if (value === 0 || value === false)\n    newBytes = this.array[byteIndex] &= ~(1 << pos);\n  else\n    newBytes = this.array[byteIndex] |= (1 << pos);\n\n  // The operands of all bitwise operators are converted to *signed* 32-bit integers.\n  // Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\n  // Shifting by 31 changes the sign (i.e. 1 << 31 = -2147483648).\n  // Therefore, get unsigned representation by applying '>>> 0'.\n  newBytes = newBytes >>> 0;\n\n  // Updating size\n  if (newBytes > oldBytes)\n    this.size++;\n  else if (newBytes < oldBytes)\n    this.size--;\n\n  return this;\n};\n\n/**\n* Method used to reset the given bit's value.\n*\n* @param  {number} index - Target bit index.\n* @return {BitSet}\n*/\nBitSet.prototype.reset = function(index) {\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f,\n      oldBytes = this.array[byteIndex],\n      newBytes;\n\n  newBytes = this.array[byteIndex] &= ~(1 << pos);\n\n  // Updating size\n  if (newBytes < oldBytes)\n    this.size--;\n\n  return this;\n};\n\n/**\n * Method used to flip the value of the given bit.\n *\n * @param  {number} index - Target bit index.\n * @return {BitSet}\n */\nBitSet.prototype.flip = function(index) {\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f,\n      oldBytes = this.array[byteIndex];\n\n  var newBytes = this.array[byteIndex] ^= (1 << pos);\n\n  // Get unsigned representation.\n  newBytes = newBytes >>> 0;\n\n  // Updating size\n  if (newBytes > oldBytes)\n    this.size++;\n  else if (newBytes < oldBytes)\n    this.size--;\n\n  return this;\n};\n\n/**\n * Method used to get the given bit's value.\n *\n * @param  {number} index - Target bit index.\n * @return {number}\n */\nBitSet.prototype.get = function(index) {\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f;\n\n  return (this.array[byteIndex] >> pos) & 1;\n};\n\n/**\n * Method used to test the given bit's value.\n *\n * @param  {number} index - Target bit index.\n * @return {BitSet}\n */\nBitSet.prototype.test = function(index) {\n  return Boolean(this.get(index));\n};\n\n/**\n * Method used to return the number of 1 from the beginning of the set up to\n * the ith index.\n *\n * @param  {number} i - Ith index (cannot be > length).\n * @return {number}\n */\nBitSet.prototype.rank = function(i) {\n  if (this.size === 0)\n    return 0;\n\n  var byteIndex = i >> 5,\n      pos = i & 0x0000001f,\n      r = 0;\n\n  // Accessing the bytes before the last one\n  for (var j = 0; j < byteIndex; j++)\n    r += bitwise.table8Popcount(this.array[j]);\n\n  // Handling masked last byte\n  var maskedByte = this.array[byteIndex] & ((1 << pos) - 1);\n\n  r += bitwise.table8Popcount(maskedByte);\n\n  return r;\n};\n\n/**\n * Method used to return the position of the rth 1 in the set or -1 if the\n * set is empty.\n *\n * Note: usually select is implemented using binary search over rank but I\n * tend to think the following linear implementation is faster since here\n * rank is O(n) anyway.\n *\n * @param  {number} r - Rth 1 to select (should be < length).\n * @return {number}\n */\nBitSet.prototype.select = function(r) {\n  if (this.size === 0)\n    return -1;\n\n  // TODO: throw?\n  if (r >= this.length)\n    return -1;\n\n  var byte,\n      b = 32,\n      p = 0,\n      c = 0;\n\n  for (var i = 0, l = this.array.length; i < l; i++) {\n    byte = this.array[i];\n\n    // The byte is empty, let's continue\n    if (byte === 0)\n      continue;\n\n    // TODO: This branching might not be useful here\n    if (i === l - 1)\n      b = this.length % 32 || 32;\n\n    // TODO: popcount should speed things up here\n\n    for (var j = 0; j < b; j++, p++) {\n      c += (byte >> j) & 1;\n\n      if (c === r)\n        return p;\n    }\n  }\n};\n\n/**\n * Method used to iterate over the bit set's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nBitSet.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var length = this.length,\n      byte,\n      bit,\n      b = 32;\n\n  for (var i = 0, l = this.array.length; i < l; i++) {\n    byte = this.array[i];\n\n    if (i === l - 1)\n      b = length % 32 || 32;\n\n    for (var j = 0; j < b; j++) {\n      bit = (byte >> j) & 1;\n\n      callback.call(scope, bit, i * 32 + j);\n    }\n  }\n};\n\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\nBitSet.prototype.values = function() {\n  var length = this.length,\n      inner = false,\n      byte,\n      bit,\n      array = this.array,\n      l = array.length,\n      i = 0,\n      j = -1,\n      b = 32;\n\n  return new Iterator(function next() {\n    if (!inner) {\n\n      if (i >= l)\n        return {\n          done: true\n        };\n\n      if (i === l - 1)\n        b = length % 32 || 32;\n\n      byte = array[i++];\n      inner = true;\n      j = -1;\n    }\n\n    j++;\n\n    if (j >= b) {\n      inner = false;\n      return next();\n    }\n\n    bit = (byte >> j) & 1;\n\n    return {\n      value: bit\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a set's entries.\n *\n * @return {Iterator}\n */\nBitSet.prototype.entries = function() {\n  var length = this.length,\n      inner = false,\n      byte,\n      bit,\n      array = this.array,\n      index,\n      l = array.length,\n      i = 0,\n      j = -1,\n      b = 32;\n\n  return new Iterator(function next() {\n    if (!inner) {\n\n      if (i >= l)\n        return {\n          done: true\n        };\n\n      if (i === l - 1)\n        b = length % 32 || 32;\n\n      byte = array[i++];\n      inner = true;\n      j = -1;\n    }\n\n    j++;\n    index = (~-i) * 32 + j;\n\n    if (j >= b) {\n      inner = false;\n      return next();\n    }\n\n    bit = (byte >> j) & 1;\n\n    return {\n      value: [index, bit]\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  BitSet.prototype[Symbol.iterator] = BitSet.prototype.values;\n\n/**\n * Convenience known methods.\n */\nBitSet.prototype.inspect = function() {\n  var proxy = new Uint8Array(this.length);\n\n  this.forEach(function(bit, i) {\n    proxy[i] = bit;\n  });\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: BitSet,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  BitSet.prototype[Symbol.for('nodejs.util.inspect.custom')] = BitSet.prototype.inspect;\n\nBitSet.prototype.toJSON = function() {\n  return Array.from(this.array);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = BitSet;\n","/**\n * Mnemonist BitVector\n * ====================\n *\n * JavaScript implementation of a dynamic BitSet based upon a Uint32Array.\n *\n * Notes:\n *   - (i >> 5) is the same as ((i / 32) | 0)\n *   - (i & 0x0000001f) is the same as (i % 32)\n *   - I could use a Float64Array to store more in less blocks but I would lose\n *     the benefits of byte comparison to keep track of size without popcounts.\n */\nvar Iterator = require('obliterator/iterator'),\n    bitwise = require('./utils/bitwise.js');\n\n/**\n * Constants.\n */\nvar DEFAULT_GROWING_POLICY = function(capacity) {\n  return Math.max(1, Math.ceil(capacity * 1.5));\n};\n\n/**\n * Helpers.\n */\nfunction createByteArray(capacity) {\n  return new Uint32Array(Math.ceil(capacity / 32));\n}\n\n/**\n * BitVector.\n *\n * @constructor\n */\nfunction BitVector(initialLengthOrOptions) {\n  var initialLength = initialLengthOrOptions || 0,\n      policy = DEFAULT_GROWING_POLICY;\n\n  if (typeof initialLengthOrOptions === 'object') {\n    initialLength = (\n      initialLengthOrOptions.initialLength ||\n      initialLengthOrOptions.initialCapacity ||\n      0\n    );\n    policy = initialLengthOrOptions.policy || policy;\n  }\n\n  this.size = 0;\n  this.length = initialLength;\n  this.capacity = Math.ceil(this.length / 32) * 32;\n  this.policy = policy;\n  this.array = createByteArray(this.capacity);\n}\n\n/**\n * Method used to set the given bit's value.\n *\n * @param  {number} index - Target bit index.\n * @param  {number|boolean} value - Value to set.\n * @return {BitVector}\n */\nBitVector.prototype.set = function(index, value) {\n\n  // Out of bounds?\n  if (this.length < index)\n    throw new Error('BitVector.set: index out of bounds.');\n\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f,\n      oldBytes = this.array[byteIndex],\n      newBytes;\n\n  if (value === 0 || value === false)\n    newBytes = this.array[byteIndex] &= ~(1 << pos);\n  else\n    newBytes = this.array[byteIndex] |= (1 << pos);\n\n  // Get unsigned representation.\n  newBytes = newBytes >>> 0;\n\n  // Updating size\n  if (newBytes > oldBytes)\n    this.size++;\n  else if (newBytes < oldBytes)\n    this.size--;\n\n  return this;\n};\n\n/**\n* Method used to reset the given bit's value.\n*\n* @param  {number} index - Target bit index.\n* @return {BitVector}\n*/\nBitVector.prototype.reset = function(index) {\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f,\n      oldBytes = this.array[byteIndex],\n      newBytes;\n\n  newBytes = this.array[byteIndex] &= ~(1 << pos);\n\n  // Updating size\n  if (newBytes < oldBytes)\n    this.size--;\n\n  return this;\n};\n\n/**\n * Method used to flip the value of the given bit.\n *\n * @param  {number} index - Target bit index.\n * @return {BitVector}\n */\nBitVector.prototype.flip = function(index) {\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f,\n      oldBytes = this.array[byteIndex];\n\n  var newBytes = this.array[byteIndex] ^= (1 << pos);\n\n  // Get unsigned representation.\n  newBytes = newBytes >>> 0;\n\n  // Updating size\n  if (newBytes > oldBytes)\n    this.size++;\n  else if (newBytes < oldBytes)\n    this.size--;\n\n  return this;\n};\n\n/**\n * Method used to apply the growing policy.\n *\n * @param  {number} [override] - Override capacity.\n * @return {number}\n */\nBitVector.prototype.applyPolicy = function(override) {\n  var newCapacity = this.policy(override || this.capacity);\n\n  if (typeof newCapacity !== 'number' || newCapacity < 0)\n    throw new Error('mnemonist/bit-vector.applyPolicy: policy returned an invalid value (expecting a positive integer).');\n\n  if (newCapacity <= this.capacity)\n    throw new Error('mnemonist/bit-vector.applyPolicy: policy returned a less or equal capacity to allocate.');\n\n  // TODO: we should probably check that the returned number is an integer\n\n  // Ceil to nearest 32\n  return Math.ceil(newCapacity / 32) * 32;\n};\n\n/**\n * Method used to reallocate the underlying array.\n *\n * @param  {number}       capacity - Target capacity.\n * @return {BitVector}\n */\nBitVector.prototype.reallocate = function(capacity) {\n  var virtualCapacity = capacity;\n\n  capacity = Math.ceil(capacity / 32) * 32;\n\n  if (virtualCapacity < this.length)\n    this.length = virtualCapacity;\n\n  if (capacity === this.capacity)\n    return this;\n\n  var oldArray = this.array;\n\n  var storageLength = capacity / 32;\n\n  if (storageLength === this.array.length)\n    return this;\n\n  if (storageLength > this.array.length) {\n    this.array = new Uint32Array(storageLength);\n    this.array.set(oldArray, 0);\n  }\n  else {\n    this.array = oldArray.slice(0, storageLength);\n  }\n\n  this.capacity = capacity;\n\n  return this;\n};\n\n/**\n * Method used to grow the array.\n *\n * @param  {number}       [capacity] - Optional capacity to match.\n * @return {BitVector}\n */\nBitVector.prototype.grow = function(capacity) {\n  var newCapacity;\n\n  if (typeof capacity === 'number') {\n\n    if (this.capacity >= capacity)\n      return this;\n\n    // We need to match the given capacity\n    newCapacity = this.capacity;\n\n    while (newCapacity < capacity)\n      newCapacity = this.applyPolicy(newCapacity);\n\n    this.reallocate(newCapacity);\n\n    return this;\n  }\n\n  // We need to run the policy once\n  newCapacity = this.applyPolicy();\n  this.reallocate(newCapacity);\n\n  return this;\n};\n\n/**\n * Method used to resize the array. Won't deallocate.\n *\n * @param  {number}       length - Target length.\n * @return {BitVector}\n */\nBitVector.prototype.resize = function(length) {\n  if (length === this.length)\n    return this;\n\n  if (length < this.length) {\n    this.length = length;\n    return this;\n  }\n\n  this.length = length;\n  this.reallocate(length);\n\n  return this;\n};\n\n/**\n * Method used to push a value in the set.\n *\n * @param  {number|boolean} value\n * @return {BitVector}\n */\nBitVector.prototype.push = function(value) {\n  if (this.capacity === this.length)\n    this.grow();\n\n  if (value === 0 || value === false)\n    return ++this.length;\n\n  this.size++;\n\n  var index = this.length++,\n      byteIndex = index >> 5,\n      pos = index & 0x0000001f;\n\n  this.array[byteIndex] |= (1 << pos);\n\n  return this.length;\n};\n\n/**\n * Method used to pop the last value of the set.\n *\n * @return {number} - The popped value.\n */\nBitVector.prototype.pop = function() {\n  if (this.length === 0)\n    return;\n\n  var index = --this.length;\n\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f;\n\n  return (this.array[byteIndex] >> pos) & 1;\n};\n\n/**\n * Method used to get the given bit's value.\n *\n * @param  {number} index - Target bit index.\n * @return {number}\n */\nBitVector.prototype.get = function(index) {\n  if (this.length < index)\n    return undefined;\n\n  var byteIndex = index >> 5,\n      pos = index & 0x0000001f;\n\n  return (this.array[byteIndex] >> pos) & 1;\n};\n\n/**\n * Method used to test the given bit's value.\n *\n * @param  {number} index - Target bit index.\n * @return {BitVector}\n */\nBitVector.prototype.test = function(index) {\n  if (this.length < index)\n    return false;\n\n  return Boolean(this.get(index));\n};\n\n/**\n * Method used to return the number of 1 from the beginning of the set up to\n * the ith index.\n *\n * @param  {number} i - Ith index (cannot be > length).\n * @return {number}\n */\nBitVector.prototype.rank = function(i) {\n  if (this.size === 0)\n    return 0;\n\n  var byteIndex = i >> 5,\n      pos = i & 0x0000001f,\n      r = 0;\n\n  // Accessing the bytes before the last one\n  for (var j = 0; j < byteIndex; j++)\n    r += bitwise.table8Popcount(this.array[j]);\n\n  // Handling masked last byte\n  var maskedByte = this.array[byteIndex] & ((1 << pos) - 1);\n\n  r += bitwise.table8Popcount(maskedByte);\n\n  return r;\n};\n\n/**\n * Method used to return the position of the rth 1 in the set or -1 if the\n * set is empty.\n *\n * Note: usually select is implemented using binary search over rank but I\n * tend to think the following linear implementation is faster since here\n * rank is O(n) anyway.\n *\n * @param  {number} r - Rth 1 to select (should be < length).\n * @return {number}\n */\nBitVector.prototype.select = function(r) {\n  if (this.size === 0)\n    return -1;\n\n  // TODO: throw?\n  if (r >= this.length)\n    return -1;\n\n  var byte,\n      b = 32,\n      p = 0,\n      c = 0;\n\n  for (var i = 0, l = this.array.length; i < l; i++) {\n    byte = this.array[i];\n\n    // The byte is empty, let's continue\n    if (byte === 0)\n      continue;\n\n    // TODO: This branching might not be useful here\n    if (i === l - 1)\n      b = this.length % 32 || 32;\n\n    // TODO: popcount should speed things up here\n\n    for (var j = 0; j < b; j++, p++) {\n      c += (byte >> j) & 1;\n\n      if (c === r)\n        return p;\n    }\n  }\n};\n\n/**\n * Method used to iterate over the bit set's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nBitVector.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var length = this.length,\n      byte,\n      bit,\n      b = 32;\n\n  for (var i = 0, l = this.array.length; i < l; i++) {\n    byte = this.array[i];\n\n    if (i === l - 1)\n      b = length % 32 || 32;\n\n    for (var j = 0; j < b; j++) {\n      bit = (byte >> j) & 1;\n\n      callback.call(scope, bit, i * 32 + j);\n    }\n  }\n};\n\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\nBitVector.prototype.values = function() {\n  var length = this.length,\n      inner = false,\n      byte,\n      bit,\n      array = this.array,\n      l = array.length,\n      i = 0,\n      j = -1,\n      b = 32;\n\n  return new Iterator(function next() {\n    if (!inner) {\n\n      if (i >= l)\n        return {\n          done: true\n        };\n\n      if (i === l - 1)\n        b = length % 32 || 32;\n\n      byte = array[i++];\n      inner = true;\n      j = -1;\n    }\n\n    j++;\n\n    if (j >= b) {\n      inner = false;\n      return next();\n    }\n\n    bit = (byte >> j) & 1;\n\n    return {\n      value: bit\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a set's entries.\n *\n * @return {Iterator}\n */\nBitVector.prototype.entries = function() {\n  var length = this.length,\n      inner = false,\n      byte,\n      bit,\n      array = this.array,\n      index,\n      l = array.length,\n      i = 0,\n      j = -1,\n      b = 32;\n\n  return new Iterator(function next() {\n    if (!inner) {\n\n      if (i >= l)\n        return {\n          done: true\n        };\n\n      if (i === l - 1)\n        b = length % 32 || 32;\n\n      byte = array[i++];\n      inner = true;\n      j = -1;\n    }\n\n    j++;\n    index = (~-i) * 32 + j;\n\n    if (j >= b) {\n      inner = false;\n      return next();\n    }\n\n    bit = (byte >> j) & 1;\n\n    return {\n      value: [index, bit]\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  BitVector.prototype[Symbol.iterator] = BitVector.prototype.values;\n\n/**\n * Convenience known methods.\n */\nBitVector.prototype.inspect = function() {\n  var proxy = new Uint8Array(this.length);\n\n  this.forEach(function(bit, i) {\n    proxy[i] = bit;\n  });\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: BitVector,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  BitVector.prototype[Symbol.for('nodejs.util.inspect.custom')] = BitVector.prototype.inspect;\n\nBitVector.prototype.toJSON = function() {\n  return Array.from(this.array.slice(0, (this.length >> 5) + 1));\n};\n\n/**\n * Exporting.\n */\nmodule.exports = BitVector;\n","/* eslint no-constant-condition: 0 */\n/**\n * Mnemonist BK Tree\n * ==================\n *\n * Implementation of a Burkhard-Keller tree, allowing fast lookups of words\n * that lie within a specified distance of the query word.\n *\n * [Reference]:\n * https://en.wikipedia.org/wiki/BK-tree\n *\n * [Article]:\n * W. Burkhard and R. Keller. Some approaches to best-match file searching,\n * CACM, 1973\n */\nvar forEach = require('obliterator/foreach');\n\n/**\n * BK Tree.\n *\n * @constructor\n * @param {function} distance - Distance function to use.\n */\nfunction BKTree(distance) {\n\n  if (typeof distance !== 'function')\n    throw new Error('mnemonist/BKTree.constructor: given `distance` should be a function.');\n\n  this.distance = distance;\n  this.clear();\n}\n\n/**\n * Method used to add an item to the tree.\n *\n * @param  {any} item - Item to add.\n * @return {BKTree}\n */\nBKTree.prototype.add = function(item) {\n\n  // Initializing the tree with the first given word\n  if (!this.root) {\n    this.root = {\n      item: item,\n      children: {}\n    };\n\n    this.size++;\n    return this;\n  }\n\n  var node = this.root,\n      d;\n\n  while (true) {\n    d = this.distance(item, node.item);\n\n    if (!node.children[d])\n      break;\n\n    node = node.children[d];\n  }\n\n  node.children[d] = {\n    item: item,\n    children: {}\n  };\n\n  this.size++;\n  return this;\n};\n\n/**\n * Method used to query the tree.\n *\n * @param  {number} n     - Maximum distance between query & item.\n * @param  {any}    query - Query\n * @return {BKTree}\n */\nBKTree.prototype.search = function(n, query) {\n  if (!this.root)\n    return [];\n\n  var found = [],\n      stack = [this.root],\n      node,\n      child,\n      d,\n      i,\n      l;\n\n  while (stack.length) {\n    node = stack.pop();\n    d = this.distance(query, node.item);\n\n    if (d <= n)\n      found.push({item: node.item, distance: d});\n\n    for (i = d - n, l = d + n + 1; i < l; i++) {\n      child = node.children[i];\n\n      if (child)\n        stack.push(child);\n    }\n  }\n\n  return found;\n};\n\n/**\n * Method used to clear the tree.\n *\n * @return {undefined}\n */\nBKTree.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n  this.root = null;\n};\n\n/**\n * Convenience known methods.\n */\nBKTree.prototype.toJSON = function() {\n  return this.root;\n};\n\nBKTree.prototype.inspect = function() {\n  var array = [],\n      stack = [this.root],\n      node,\n      d;\n\n  while (stack.length) {\n    node = stack.pop();\n\n    if (!node)\n      continue;\n\n    array.push(node.item);\n\n    for (d in node.children)\n      stack.push(node.children[d]);\n  }\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: BKTree,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  BKTree.prototype[Symbol.for('nodejs.util.inspect.custom')] = BKTree.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a tree.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {function} distance - Distance function.\n * @return {Heap}\n */\nBKTree.from = function(iterable, distance) {\n  var tree = new BKTree(distance);\n\n  forEach(iterable, function(value) {\n    tree.add(value);\n  });\n\n  return tree;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = BKTree;\n","/**\n * Mnemonist Bloom Filter\n * =======================\n *\n * Bloom Filter implementation relying on MurmurHash3.\n */\nvar murmurhash3 = require('./utils/murmurhash3.js'),\n    forEach = require('obliterator/foreach');\n\n/**\n * Constants.\n */\nvar LN2_SQUARED = Math.LN2 * Math.LN2;\n\n/**\n * Defaults.\n */\nvar DEFAULTS = {\n  errorRate: 0.005\n};\n\n/**\n * Function used to convert a string into a Uint16 byte array.\n *\n * @param  {string}      string - Target string.\n * @return {Uint16Array}\n */\nfunction stringToByteArray(string) {\n  var array = new Uint16Array(string.length),\n      i,\n      l;\n\n  for (i = 0, l = string.length; i < l; i++)\n    array[i] = string.charCodeAt(i);\n\n  return array;\n}\n\n/**\n * Function used to hash the given byte array.\n *\n * @param  {number}      length - Length of the filter's byte array.\n * @param  {number}      seed   - Seed to use for the hash function.\n * @param  {Uint16Array}        - Byte array representing the string.\n * @return {number}             - The hash.\n *\n * @note length * 8 should probably already be computed as well as seeds.\n */\nfunction hashArray(length, seed, array) {\n  var hash = murmurhash3((seed * 0xFBA4C795) & 0xFFFFFFFF, array);\n\n  return hash % (length * 8);\n}\n\n/**\n * Bloom Filter.\n *\n * @constructor\n * @param {number|object} capacityOrOptions - Capacity or options.\n */\nfunction BloomFilter(capacityOrOptions) {\n  var options = {};\n\n  if (!capacityOrOptions)\n    throw new Error('mnemonist/BloomFilter.constructor: a BloomFilter must be created with a capacity.');\n\n  if (typeof capacityOrOptions === 'object')\n    options = capacityOrOptions;\n  else\n    options.capacity = capacityOrOptions;\n\n  // Handling capacity\n  if (typeof options.capacity !== 'number' || options.capacity <= 0)\n    throw new Error('mnemonist/BloomFilter.constructor: `capacity` option should be a positive integer.');\n\n  this.capacity = options.capacity;\n\n  // Handling error rate\n  this.errorRate = options.errorRate || DEFAULTS.errorRate;\n\n  if (typeof this.errorRate !== 'number' || options.errorRate <= 0)\n    throw new Error('mnemonist/BloomFilter.constructor: `errorRate` option should be a positive float.');\n\n  this.clear();\n}\n\n/**\n * Method used to clear the filter.\n *\n * @return {undefined}\n */\nBloomFilter.prototype.clear = function() {\n\n  // Optimizing number of bits & number of hash functions\n  var bits = -1 / LN2_SQUARED * this.capacity * Math.log(this.errorRate),\n      length = (bits / 8) | 0;\n\n  this.hashFunctions = (length * 8 / this.capacity * Math.LN2) | 0;\n\n  // Creating the data array\n  this.data = new Uint8Array(length);\n\n  return;\n};\n\n/**\n * Method used to add an string to the filter.\n *\n * @param  {string} string - Item to add.\n * @return {BloomFilter}\n *\n * @note Should probably create a hash function working directly on a string.\n */\nBloomFilter.prototype.add = function(string) {\n\n  // Converting the string to a byte array\n  var array = stringToByteArray(string);\n\n  // Applying the n hash functions\n  for (var i = 0, l = this.hashFunctions; i < l; i++) {\n    var index = hashArray(this.data.length, i, array),\n        position = (1 << (7 & index));\n\n    this.data[index >> 3] |= position;\n  }\n\n  return this;\n};\n\n/**\n * Method used to test the given string.\n *\n * @param  {string} string - Item to test.\n * @return {boolean}\n */\nBloomFilter.prototype.test = function(string) {\n\n  // Converting the string to a byte array\n  var array = stringToByteArray(string);\n\n  // Applying the n hash functions\n  for (var i = 0, l = this.hashFunctions; i < l; i++) {\n    var index = hashArray(this.data.length, i, array);\n\n    if (!(this.data[index >> 3] & (1 << (7 & index))))\n      return false;\n  }\n\n  return true;\n};\n\n/**\n * Convenience known methods.\n */\nBloomFilter.prototype.toJSON = function() {\n  return this.data;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a filter.\n *\n * @param  {Iterable}    iterable - Target iterable.\n * @return {BloomFilter}\n */\nBloomFilter.from = function(iterable, options) {\n  if (!options) {\n    options = iterable.length || iterable.size;\n\n    if (typeof options !== 'number')\n      throw new Error('BloomFilter.from: could not infer the filter\\'s capacity. Try passing it as second argument.');\n  }\n\n  var filter = new BloomFilter(options);\n\n  forEach(iterable, function(value) {\n    filter.add(value);\n  });\n\n  return filter;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = BloomFilter;\n","/**\n * Mnemonist CircularBuffer\n * =========================\n *\n * Circular buffer implementation fit to use as a finite deque.\n */\nvar iterables = require('./utils/iterables.js'),\n    FixedDeque = require('./fixed-deque');\n\n/**\n * CircularBuffer.\n *\n * @constructor\n */\nfunction CircularBuffer(ArrayClass, capacity) {\n\n  if (arguments.length < 2)\n    throw new Error('mnemonist/circular-buffer: expecting an Array class and a capacity.');\n\n  if (typeof capacity !== 'number' || capacity <= 0)\n    throw new Error('mnemonist/circular-buffer: `capacity` should be a positive number.');\n\n  this.ArrayClass = ArrayClass;\n  this.capacity = capacity;\n  this.items = new ArrayClass(this.capacity);\n  this.clear();\n}\n\n/**\n * Pasting most of the prototype from FixedDeque.\n */\nfunction paste(name) {\n  CircularBuffer.prototype[name] = FixedDeque.prototype[name];\n}\n\nObject.keys(FixedDeque.prototype).forEach(paste);\n\nif (typeof Symbol !== 'undefined')\n  Object.getOwnPropertySymbols(FixedDeque.prototype).forEach(paste);\n\n/**\n * Method used to append a value to the buffer.\n *\n * @param  {any}    item - Item to append.\n * @return {number}      - Returns the new size of the buffer.\n */\nCircularBuffer.prototype.push = function(item) {\n  var index = (this.start + this.size) % this.capacity;\n\n  this.items[index] = item;\n\n  // Overwriting?\n  if (this.size === this.capacity) {\n\n    // If start is at the end, we wrap around the buffer\n    this.start = (index + 1) % this.capacity;\n\n    return this.size;\n  }\n\n  return ++this.size;\n};\n\n/**\n * Method used to prepend a value to the buffer.\n *\n * @param  {any}    item - Item to prepend.\n * @return {number}      - Returns the new size of the buffer.\n */\nCircularBuffer.prototype.unshift = function(item) {\n  var index = this.start - 1;\n\n  if (this.start === 0)\n    index = this.capacity - 1;\n\n  this.items[index] = item;\n\n  // Overwriting\n  if (this.size === this.capacity) {\n\n    this.start = index;\n\n    return this.size;\n  }\n\n  this.start = index;\n\n  return ++this.size;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a circular buffer.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} ArrayClass - Array class to use.\n * @param  {number}   capacity   - Desired capacity.\n * @return {FiniteStack}\n */\nCircularBuffer.from = function(iterable, ArrayClass, capacity) {\n  if (arguments.length < 3) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/circular-buffer.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n\n  var buffer = new CircularBuffer(ArrayClass, capacity);\n\n  if (iterables.isArrayLike(iterable)) {\n    var i, l;\n\n    for (i = 0, l = iterable.length; i < l; i++)\n      buffer.items[i] = iterable[i];\n\n    buffer.size = l;\n\n    return buffer;\n  }\n\n  iterables.forEach(iterable, function(value) {\n    buffer.push(value);\n  });\n\n  return buffer;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = CircularBuffer;\n","/**\n * Mnemonist DefaultMap\n * =====================\n *\n * JavaScript implementation of a default map that will return a constructed\n * value any time one tries to access an inexisting key. It's quite similar\n * to python's defaultdict.\n */\n\n/**\n * DefaultMap.\n *\n * @constructor\n */\nfunction DefaultMap(factory) {\n  if (typeof factory !== 'function')\n    throw new Error('mnemonist/DefaultMap.constructor: expecting a function.');\n\n  this.items = new Map();\n  this.factory = factory;\n  this.size = 0;\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nDefaultMap.prototype.clear = function() {\n\n  // Properties\n  this.items.clear();\n  this.size = 0;\n};\n\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * the value will be created using the provided factory.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\nDefaultMap.prototype.get = function(key) {\n  var value = this.items.get(key);\n\n  if (typeof value === 'undefined') {\n    value = this.factory(key, this.size);\n    this.items.set(key, value);\n    this.size++;\n  }\n\n  return value;\n};\n\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * a value won't be created.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\nDefaultMap.prototype.peek = function(key) {\n  return this.items.get(key);\n};\n\n/**\n * Method used to set a value for given key.\n *\n * @param  {any} key   - Target key.\n * @param  {any} value - Value.\n * @return {DefaultMap}\n */\nDefaultMap.prototype.set = function(key, value) {\n  this.items.set(key, value);\n  this.size = this.items.size;\n\n  return this;\n};\n\n/**\n * Method used to test the existence of a key in the map.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\nDefaultMap.prototype.has = function(key) {\n  return this.items.has(key);\n};\n\n/**\n * Method used to delete target key.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\nDefaultMap.prototype.delete = function(key) {\n  var deleted = this.items.delete(key);\n\n  this.size = this.items.size;\n\n  return deleted;\n};\n\n/**\n * Method used to iterate over each of the key/value pairs.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nDefaultMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  this.items.forEach(callback, scope);\n};\n\n/**\n * Iterators.\n */\nDefaultMap.prototype.entries = function() {\n  return this.items.entries();\n};\n\nDefaultMap.prototype.keys = function() {\n  return this.items.keys();\n};\n\nDefaultMap.prototype.values = function() {\n  return this.items.values();\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  DefaultMap.prototype[Symbol.iterator] = DefaultMap.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nDefaultMap.prototype.inspect = function() {\n  return this.items;\n};\n\nif (typeof Symbol !== 'undefined')\n  DefaultMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = DefaultMap.prototype.inspect;\n\n/**\n * Typical factories.\n */\nDefaultMap.autoIncrement = function() {\n  var i = 0;\n\n  return function() {\n    return i++;\n  };\n};\n\n/**\n * Exporting.\n */\nmodule.exports = DefaultMap;\n","/**\n * Mnemonist DefaultWeakMap\n * =========================\n *\n * JavaScript implementation of a default weak map that will return a constructed\n * value any time one tries to access an non-existing key. It is similar to\n * DefaultMap but uses ES6 WeakMap that only holds weak reference to keys.\n */\n\n/**\n * DefaultWeakMap.\n *\n * @constructor\n */\nfunction DefaultWeakMap(factory) {\n  if (typeof factory !== 'function')\n    throw new Error('mnemonist/DefaultWeakMap.constructor: expecting a function.');\n\n  this.items = new WeakMap();\n  this.factory = factory;\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nDefaultWeakMap.prototype.clear = function() {\n\n  // Properties\n  this.items = new WeakMap();\n};\n\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * the value will be created using the provided factory.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\nDefaultWeakMap.prototype.get = function(key) {\n  var value = this.items.get(key);\n\n  if (typeof value === 'undefined') {\n    value = this.factory(key);\n    this.items.set(key, value);\n  }\n\n  return value;\n};\n\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * a value won't be created.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\nDefaultWeakMap.prototype.peek = function(key) {\n  return this.items.get(key);\n};\n\n/**\n * Method used to set a value for given key.\n *\n * @param  {any} key   - Target key.\n * @param  {any} value - Value.\n * @return {DefaultMap}\n */\nDefaultWeakMap.prototype.set = function(key, value) {\n  this.items.set(key, value);\n  return this;\n};\n\n/**\n * Method used to test the existence of a key in the map.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\nDefaultWeakMap.prototype.has = function(key) {\n  return this.items.has(key);\n};\n\n/**\n * Method used to delete target key.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\nDefaultWeakMap.prototype.delete = function(key) {\n  return this.items.delete(key);\n};\n\n/**\n * Convenience known methods.\n */\nDefaultWeakMap.prototype.inspect = function() {\n  return this.items;\n};\n\nif (typeof Symbol !== 'undefined')\n  DefaultWeakMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = DefaultWeakMap.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = DefaultWeakMap;\n","/* eslint no-constant-condition: 0 */\n/**\n * Mnemonist Fibonacci Heap\n * =========================\n *\n * Fibonacci heap implementation.\n */\nvar comparators = require('./utils/comparators.js'),\n    forEach = require('obliterator/foreach');\n\nvar DEFAULT_COMPARATOR = comparators.DEFAULT_COMPARATOR,\n    reverseComparator = comparators.reverseComparator;\n\n/**\n * Fibonacci Heap.\n *\n * @constructor\n */\nfunction FibonacciHeap(comparator) {\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n\n  if (typeof this.comparator !== 'function')\n    throw new Error('mnemonist/FibonacciHeap.constructor: given comparator should be a function.');\n}\n\n/**\n * Method used to clear the heap.\n *\n * @return {undefined}\n */\nFibonacciHeap.prototype.clear = function() {\n\n  // Properties\n  this.root = null;\n  this.min = null;\n  this.size = 0;\n};\n\n/**\n * Function used to create a node.\n *\n * @param  {any}    item - Target item.\n * @return {object}\n */\nfunction createNode(item) {\n  return {\n    item: item,\n    degree: 0\n  };\n}\n\n/**\n * Function used to merge the given node with the root list.\n *\n * @param {FibonacciHeap} heap - Target heap.\n * @param {Node}          node - Target node.\n */\nfunction mergeWithRoot(heap, node) {\n  if (!heap.root) {\n    heap.root = node;\n  }\n  else {\n    node.right = heap.root.right;\n    node.left = heap.root;\n    heap.root.right.left = node;\n    heap.root.right = node;\n  }\n}\n\n/**\n * Method used to push an item into the heap.\n *\n * @param  {any}    item - Item to push.\n * @return {number}\n */\nFibonacciHeap.prototype.push = function(item) {\n  var node = createNode(item);\n  node.left = node;\n  node.right = node;\n  mergeWithRoot(this, node);\n\n  if (!this.min || this.comparator(node.item, this.min.item) <= 0)\n    this.min = node;\n\n  return ++this.size;\n};\n\n/**\n * Method used to get the \"first\" item of the heap.\n *\n * @return {any}\n */\nFibonacciHeap.prototype.peek = function() {\n  return this.min ? this.min.item : undefined;\n};\n\n/**\n * Function used to consume the given linked list.\n *\n * @param {Node} head - Head node.\n * @param {array}\n */\nfunction consumeLinkedList(head) {\n  var nodes = [],\n      node = head,\n      flag = false;\n\n  while (true) {\n    if (node === head && flag)\n      break;\n    else if (node === head)\n      flag = true;\n\n    nodes.push(node);\n    node = node.right;\n  }\n\n  return nodes;\n}\n\n/**\n * Function used to remove the target node from the root list.\n *\n * @param {FibonacciHeap} heap - Target heap.\n * @param {Node}          node - Target node.\n */\nfunction removeFromRoot(heap, node) {\n  if (heap.root === node)\n    heap.root = node.right;\n  node.left.right = node.right;\n  node.right.left = node.left;\n}\n\n/**\n * Function used to merge the given node with the child list of a root node.\n *\n * @param {Node} parent - Parent node.\n * @param {Node} node   - Target node.\n */\nfunction mergeWithChild(parent, node) {\n  if (!parent.child) {\n    parent.child = node;\n  }\n  else {\n    node.right = parent.child.right;\n    node.left = parent.child;\n    parent.child.right.left = node;\n    parent.child.right = node;\n  }\n}\n\n/**\n * Function used to link one node to another in the root list.\n *\n * @param {FibonacciHeap} heap - Target heap.\n * @param {Node}          y - Y node.\n * @param {Node}          x - X node.\n */\nfunction link(heap, y, x) {\n  removeFromRoot(heap, y);\n  y.left = y;\n  y.right = y;\n  mergeWithChild(x, y);\n  x.degree++;\n  y.parent = x;\n}\n\n/**\n * Function used to consolidate the heap.\n *\n * @param {FibonacciHeap} heap - Target heap.\n */\nfunction consolidate(heap) {\n  var A = new Array(heap.size),\n      nodes = consumeLinkedList(heap.root),\n      i, l, x, y, d, t;\n\n  for (i = 0, l = nodes.length; i < l; i++) {\n    x = nodes[i];\n    d = x.degree;\n\n    while (A[d]) {\n      y = A[d];\n\n      if (heap.comparator(x.item, y.item) > 0) {\n        t = x;\n        x = y;\n        y = t;\n      }\n\n      link(heap, y, x);\n      A[d] = null;\n      d++;\n    }\n\n    A[d] = x;\n  }\n\n  for (i = 0; i < heap.size; i++) {\n    if (A[i] && heap.comparator(A[i].item, heap.min.item) <= 0)\n      heap.min = A[i];\n  }\n}\n\n/**\n * Method used to retrieve & remove the \"first\" item of the heap.\n *\n * @return {any}\n */\nFibonacciHeap.prototype.pop = function() {\n  if (!this.size)\n    return undefined;\n\n  var z = this.min;\n\n  if (z.child) {\n    var nodes = consumeLinkedList(z.child),\n        node,\n        i,\n        l;\n\n    for (i = 0, l = nodes.length; i < l; i++) {\n      node = nodes[i];\n\n      mergeWithRoot(this, node);\n      delete node.parent;\n    }\n  }\n\n  removeFromRoot(this, z);\n\n  if (z === z.right) {\n    this.min = null;\n    this.root = null;\n  }\n  else {\n    this.min = z.right;\n    consolidate(this);\n  }\n\n  this.size--;\n\n  return z.item;\n};\n\n/**\n * Convenience known methods.\n */\nFibonacciHeap.prototype.inspect = function() {\n  var proxy = {\n    size: this.size\n  };\n\n  if (this.min && 'item' in this.min)\n    proxy.top = this.min.item;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: FibonacciHeap,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  FibonacciHeap.prototype[Symbol.for('nodejs.util.inspect.custom')] = FibonacciHeap.prototype.inspect;\n\n/**\n * Fibonacci Maximum Heap.\n *\n * @constructor\n */\nfunction MaxFibonacciHeap(comparator) {\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n\n  if (typeof this.comparator !== 'function')\n    throw new Error('mnemonist/FibonacciHeap.constructor: given comparator should be a function.');\n\n  this.comparator = reverseComparator(this.comparator);\n}\n\nMaxFibonacciHeap.prototype = FibonacciHeap.prototype;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a heap.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} comparator - Custom comparator function.\n * @return {FibonacciHeap}\n */\nFibonacciHeap.from = function(iterable, comparator) {\n  var heap = new FibonacciHeap(comparator);\n\n  forEach(iterable, function(value) {\n    heap.push(value);\n  });\n\n  return heap;\n};\n\nMaxFibonacciHeap.from = function(iterable, comparator) {\n  var heap = new MaxFibonacciHeap(comparator);\n\n  forEach(iterable, function(value) {\n    heap.push(value);\n  });\n\n  return heap;\n};\n\n/**\n * Exporting.\n */\nFibonacciHeap.MinFibonacciHeap = FibonacciHeap;\nFibonacciHeap.MaxFibonacciHeap = MaxFibonacciHeap;\nmodule.exports = FibonacciHeap;\n","/**\n * Mnemonist FixedDeque\n * =====================\n *\n * Fixed capacity double-ended queue implemented as ring deque.\n */\nvar iterables = require('./utils/iterables.js'),\n    Iterator = require('obliterator/iterator');\n\n/**\n * FixedDeque.\n *\n * @constructor\n */\nfunction FixedDeque(ArrayClass, capacity) {\n\n  if (arguments.length < 2)\n    throw new Error('mnemonist/fixed-deque: expecting an Array class and a capacity.');\n\n  if (typeof capacity !== 'number' || capacity <= 0)\n    throw new Error('mnemonist/fixed-deque: `capacity` should be a positive number.');\n\n  this.ArrayClass = ArrayClass;\n  this.capacity = capacity;\n  this.items = new ArrayClass(this.capacity);\n  this.clear();\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nFixedDeque.prototype.clear = function() {\n\n  // Properties\n  this.start = 0;\n  this.size = 0;\n};\n\n/**\n * Method used to append a value to the deque.\n *\n * @param  {any}    item - Item to append.\n * @return {number}      - Returns the new size of the deque.\n */\nFixedDeque.prototype.push = function(item) {\n  if (this.size === this.capacity)\n    throw new Error('mnemonist/fixed-deque.push: deque capacity (' + this.capacity + ') exceeded!');\n\n  var index = (this.start + this.size) % this.capacity;\n\n  this.items[index] = item;\n\n  return ++this.size;\n};\n\n/**\n * Method used to prepend a value to the deque.\n *\n * @param  {any}    item - Item to prepend.\n * @return {number}      - Returns the new size of the deque.\n */\nFixedDeque.prototype.unshift = function(item) {\n  if (this.size === this.capacity)\n    throw new Error('mnemonist/fixed-deque.unshift: deque capacity (' + this.capacity + ') exceeded!');\n\n  var index = this.start - 1;\n\n  if (this.start === 0)\n    index = this.capacity - 1;\n\n  this.items[index] = item;\n  this.start = index;\n\n  return ++this.size;\n};\n\n/**\n * Method used to pop the deque.\n *\n * @return {any} - Returns the popped item.\n */\nFixedDeque.prototype.pop = function() {\n  if (this.size === 0)\n    return;\n\n  const index = (this.start + this.size - 1) % this.capacity;\n\n  this.size--;\n\n  return this.items[index];\n};\n\n/**\n * Method used to shift the deque.\n *\n * @return {any} - Returns the shifted item.\n */\nFixedDeque.prototype.shift = function() {\n  if (this.size === 0)\n    return;\n\n  var index = this.start;\n\n  this.size--;\n  this.start++;\n\n  if (this.start === this.capacity)\n    this.start = 0;\n\n  return this.items[index];\n};\n\n/**\n * Method used to peek the first value of the deque.\n *\n * @return {any}\n */\nFixedDeque.prototype.peekFirst = function() {\n  if (this.size === 0)\n    return;\n\n  return this.items[this.start];\n};\n\n/**\n * Method used to peek the last value of the deque.\n *\n * @return {any}\n */\nFixedDeque.prototype.peekLast = function() {\n  if (this.size === 0)\n    return;\n\n  var index = this.start + this.size - 1;\n\n  if (index > this.capacity)\n    index -= this.capacity;\n\n  return this.items[index];\n};\n\n/**\n * Method used to get the desired value of the deque.\n *\n * @param  {number} index\n * @return {any}\n */\nFixedDeque.prototype.get = function(index) {\n  if (this.size === 0)\n    return;\n\n  index = this.start + index;\n\n  if (index > this.capacity)\n    index -= this.capacity;\n\n  return this.items[index];\n};\n\n/**\n * Method used to iterate over the deque.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nFixedDeque.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  while (j < l) {\n    callback.call(scope, this.items[i], j, this);\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n  }\n};\n\n/**\n * Method used to convert the deque to a JavaScript array.\n *\n * @return {array}\n */\n// TODO: optional array class as argument?\nFixedDeque.prototype.toArray = function() {\n\n  // Optimization\n  var offset = this.start + this.size;\n\n  if (offset < this.capacity)\n    return this.items.slice(this.start, offset);\n\n  var array = new this.ArrayClass(this.size),\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  while (j < l) {\n    array[j] = this.items[i];\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n  }\n\n  return array;\n};\n\n/**\n * Method used to create an iterator over the deque's values.\n *\n * @return {Iterator}\n */\nFixedDeque.prototype.values = function() {\n  var items = this.items,\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  return new Iterator(function() {\n    if (j >= l)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over the deque's entries.\n *\n * @return {Iterator}\n */\nFixedDeque.prototype.entries = function() {\n  var items = this.items,\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  return new Iterator(function() {\n    if (j >= l)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n\n    i++;\n\n    if (i === c)\n      i = 0;\n\n    return {\n      value: [j++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  FixedDeque.prototype[Symbol.iterator] = FixedDeque.prototype.values;\n\n/**\n * Convenience known methods.\n */\nFixedDeque.prototype.inspect = function() {\n  var array = this.toArray();\n\n  array.type = this.ArrayClass.name;\n  array.capacity = this.capacity;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: FixedDeque,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  FixedDeque.prototype[Symbol.for('nodejs.util.inspect.custom')] = FixedDeque.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a deque.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} ArrayClass - Array class to use.\n * @param  {number}   capacity   - Desired capacity.\n * @return {FiniteStack}\n */\nFixedDeque.from = function(iterable, ArrayClass, capacity) {\n  if (arguments.length < 3) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/fixed-deque.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n\n  var deque = new FixedDeque(ArrayClass, capacity);\n\n  if (iterables.isArrayLike(iterable)) {\n    var i, l;\n\n    for (i = 0, l = iterable.length; i < l; i++)\n      deque.items[i] = iterable[i];\n\n    deque.size = l;\n\n    return deque;\n  }\n\n  iterables.forEach(iterable, function(value) {\n    deque.push(value);\n  });\n\n  return deque;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FixedDeque;\n","/**\n * Mnemonist Fixed Reverse Heap\n * =============================\n *\n * Static heap implementation with fixed capacity. It's a \"reverse\" heap\n * because it stores the elements in reverse so we can replace the worst\n * item in logarithmic time. As such, one cannot pop this heap but can only\n * consume it at the end. This structure is very efficient when trying to\n * find the n smallest/largest items from a larger query (k nearest neigbors\n * for instance).\n */\nvar comparators = require('./utils/comparators.js'),\n    Heap = require('./heap.js');\n\nvar DEFAULT_COMPARATOR = comparators.DEFAULT_COMPARATOR,\n    reverseComparator = comparators.reverseComparator;\n\n/**\n * Helper functions.\n */\n\n/**\n * Function used to sift up.\n *\n * @param {function} compare - Comparison function.\n * @param {array}    heap    - Array storing the heap's data.\n * @param {number}   size    - Heap's true size.\n * @param {number}   i       - Index.\n */\nfunction siftUp(compare, heap, size, i) {\n  var endIndex = size,\n      startIndex = i,\n      item = heap[i],\n      childIndex = 2 * i + 1,\n      rightIndex;\n\n  while (childIndex < endIndex) {\n    rightIndex = childIndex + 1;\n\n    if (\n      rightIndex < endIndex &&\n      compare(heap[childIndex], heap[rightIndex]) >= 0\n    ) {\n      childIndex = rightIndex;\n    }\n\n    heap[i] = heap[childIndex];\n    i = childIndex;\n    childIndex = 2 * i + 1;\n  }\n\n  heap[i] = item;\n  Heap.siftDown(compare, heap, startIndex, i);\n}\n\n/**\n * Fully consumes the given heap.\n *\n * @param  {function} ArrayClass - Array class to use.\n * @param  {function} compare    - Comparison function.\n * @param  {array}    heap       - Array storing the heap's data.\n * @param  {number}   size       - True size of the heap.\n * @return {array}\n */\nfunction consume(ArrayClass, compare, heap, size) {\n  var l = size,\n      i = l;\n\n  var array = new ArrayClass(size),\n      lastItem,\n      item;\n\n  while (i > 0) {\n    lastItem = heap[--i];\n\n    if (i !== 0) {\n      item = heap[0];\n      heap[0] = lastItem;\n      siftUp(compare, heap, --size, 0);\n      lastItem = item;\n    }\n\n    array[i] = lastItem;\n  }\n\n  return array;\n}\n\n/**\n * Binary Minimum FixedReverseHeap.\n *\n * @constructor\n * @param {function} ArrayClass - The class of array to use.\n * @param {function} comparator - Comparator function.\n * @param {number}   capacity   - Maximum number of items to keep.\n */\nfunction FixedReverseHeap(ArrayClass, comparator, capacity) {\n\n  // Comparator can be omitted\n  if (arguments.length === 2) {\n    capacity = comparator;\n    comparator = null;\n  }\n\n  this.ArrayClass = ArrayClass;\n  this.capacity = capacity;\n\n  this.items = new ArrayClass(capacity);\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n\n  if (typeof capacity !== 'number' && capacity <= 0)\n    throw new Error('mnemonist/FixedReverseHeap.constructor: capacity should be a number > 0.');\n\n  if (typeof this.comparator !== 'function')\n    throw new Error('mnemonist/FixedReverseHeap.constructor: given comparator should be a function.');\n\n  this.comparator = reverseComparator(this.comparator);\n}\n\n/**\n * Method used to clear the heap.\n *\n * @return {undefined}\n */\nFixedReverseHeap.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n};\n\n/**\n * Method used to push an item into the heap.\n *\n * @param  {any}    item - Item to push.\n * @return {number}\n */\nFixedReverseHeap.prototype.push = function(item) {\n\n  // Still some place\n  if (this.size < this.capacity) {\n    this.items[this.size] = item;\n    Heap.siftDown(this.comparator, this.items, 0, this.size);\n    this.size++;\n  }\n\n  // Heap is full, we need to replace worst item\n  else {\n\n    if (this.comparator(item, this.items[0]) > 0)\n      Heap.replace(this.comparator, this.items, item);\n  }\n\n  return this.size;\n};\n\n/**\n * Method used to peek the worst item in the heap.\n *\n * @return {any}\n */\nFixedReverseHeap.prototype.peek = function() {\n  return this.items[0];\n};\n\n/**\n * Method used to consume the heap fully and return its items as a sorted array.\n *\n * @return {array}\n */\nFixedReverseHeap.prototype.consume = function() {\n  var items = consume(this.ArrayClass, this.comparator, this.items, this.size);\n  this.size = 0;\n\n  return items;\n};\n\n/**\n * Method used to convert the heap to an array. Note that it basically clone\n * the heap and consumes it completely. This is hardly performant.\n *\n * @return {array}\n */\nFixedReverseHeap.prototype.toArray = function() {\n  return consume(this.ArrayClass, this.comparator, this.items.slice(0, this.size), this.size);\n};\n\n/**\n * Convenience known methods.\n */\nFixedReverseHeap.prototype.inspect = function() {\n  var proxy = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: FixedReverseHeap,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  FixedReverseHeap.prototype[Symbol.for('nodejs.util.inspect.custom')] = FixedReverseHeap.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = FixedReverseHeap;\n","/**\n * Mnemonist FixedStack\n * =====================\n *\n * The fixed stack is a stack whose capacity is defined beforehand and that\n * cannot be exceeded. This class is really useful when combined with\n * byte arrays to save up some memory and avoid memory re-allocation, hence\n * speeding up computations.\n *\n * This has however a downside: you need to know the maximum size you stack\n * can have during your iteration (which is not too difficult to compute when\n * performing, say, a DFS on a balanced binary tree).\n */\nvar Iterator = require('obliterator/iterator'),\n    iterables = require('./utils/iterables.js');\n\n/**\n * FixedStack\n *\n * @constructor\n * @param {function} ArrayClass - Array class to use.\n * @param {number}   capacity   - Desired capacity.\n */\nfunction FixedStack(ArrayClass, capacity) {\n\n  if (arguments.length < 2)\n    throw new Error('mnemonist/fixed-stack: expecting an Array class and a capacity.');\n\n  if (typeof capacity !== 'number' || capacity <= 0)\n    throw new Error('mnemonist/fixed-stack: `capacity` should be a positive number.');\n\n  this.capacity = capacity;\n  this.ArrayClass = ArrayClass;\n  this.items = new this.ArrayClass(this.capacity);\n  this.clear();\n}\n\n/**\n * Method used to clear the stack.\n *\n * @return {undefined}\n */\nFixedStack.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n};\n\n/**\n * Method used to add an item to the stack.\n *\n * @param  {any}    item - Item to add.\n * @return {number}\n */\nFixedStack.prototype.push = function(item) {\n  if (this.size === this.capacity)\n    throw new Error('mnemonist/fixed-stack.push: stack capacity (' + this.capacity + ') exceeded!');\n\n  this.items[this.size++] = item;\n  return this.size;\n};\n\n/**\n * Method used to retrieve & remove the last item of the stack.\n *\n * @return {any}\n */\nFixedStack.prototype.pop = function() {\n  if (this.size === 0)\n    return;\n\n  return this.items[--this.size];\n};\n\n/**\n * Method used to get the last item of the stack.\n *\n * @return {any}\n */\nFixedStack.prototype.peek = function() {\n  return this.items[this.size - 1];\n};\n\n/**\n * Method used to iterate over the stack.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nFixedStack.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0, l = this.items.length; i < l; i++)\n    callback.call(scope, this.items[l - i - 1], i, this);\n};\n\n/**\n * Method used to convert the stack to a JavaScript array.\n *\n * @return {array}\n */\nFixedStack.prototype.toArray = function() {\n  var array = new this.ArrayClass(this.size),\n      l = this.size - 1,\n      i = this.size;\n\n  while (i--)\n    array[i] = this.items[l - i];\n\n  return array;\n};\n\n/**\n * Method used to create an iterator over a stack's values.\n *\n * @return {Iterator}\n */\nFixedStack.prototype.values = function() {\n  var items = this.items,\n      l = this.size,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[l - i - 1];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a stack's entries.\n *\n * @return {Iterator}\n */\nFixedStack.prototype.entries = function() {\n  var items = this.items,\n      l = this.size,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[l - i - 1];\n\n    return {\n      value: [i++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  FixedStack.prototype[Symbol.iterator] = FixedStack.prototype.values;\n\n\n/**\n * Convenience known methods.\n */\nFixedStack.prototype.toString = function() {\n  return this.toArray().join(',');\n};\n\nFixedStack.prototype.toJSON = function() {\n  return this.toArray();\n};\n\nFixedStack.prototype.inspect = function() {\n  var array = this.toArray();\n\n  array.type = this.ArrayClass.name;\n  array.capacity = this.capacity;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: FixedStack,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  FixedStack.prototype[Symbol.for('nodejs.util.inspect.custom')] = FixedStack.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a stack.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} ArrayClass - Array class to use.\n * @param  {number}   capacity   - Desired capacity.\n * @return {FixedStack}\n */\nFixedStack.from = function(iterable, ArrayClass, capacity) {\n\n  if (arguments.length < 3) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/fixed-stack.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n\n  var stack = new FixedStack(ArrayClass, capacity);\n\n  if (iterables.isArrayLike(iterable)) {\n    var i, l;\n\n    for (i = 0, l = iterable.length; i < l; i++)\n      stack.items[i] = iterable[i];\n\n    stack.size = l;\n\n    return stack;\n  }\n\n  iterables.forEach(iterable, function(value) {\n    stack.push(value);\n  });\n\n  return stack;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FixedStack;\n","/**\n * Mnemonist Fuzzy Map\n * ====================\n *\n * The fuzzy map is a map whose keys are processed by a function before\n * read/write operations. This can often result in multiple keys accessing\n * the same resource (example: a map with lowercased keys).\n */\nvar forEach = require('obliterator/foreach');\n\nvar identity = function(x) {\n  return x;\n};\n\n/**\n * FuzzyMap.\n *\n * @constructor\n * @param {array|function} descriptor - Hash functions descriptor.\n */\nfunction FuzzyMap(descriptor) {\n  this.items = new Map();\n  this.clear();\n\n  if (Array.isArray(descriptor)) {\n    this.writeHashFunction = descriptor[0];\n    this.readHashFunction = descriptor[1];\n  }\n  else {\n    this.writeHashFunction = descriptor;\n    this.readHashFunction = descriptor;\n  }\n\n  if (!this.writeHashFunction)\n    this.writeHashFunction = identity;\n  if (!this.readHashFunction)\n    this.readHashFunction = identity;\n\n  if (typeof this.writeHashFunction !== 'function')\n    throw new Error('mnemonist/FuzzyMap.constructor: invalid hash function given.');\n\n  if (typeof this.readHashFunction !== 'function')\n    throw new Error('mnemonist/FuzzyMap.constructor: invalid hash function given.');\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nFuzzyMap.prototype.clear = function() {\n  this.items.clear();\n\n  // Properties\n  this.size = 0;\n};\n\n/**\n * Method used to add an item to the FuzzyMap.\n *\n * @param  {any} item - Item to add.\n * @return {FuzzyMap}\n */\nFuzzyMap.prototype.add = function(item) {\n  var key = this.writeHashFunction(item);\n\n  this.items.set(key, item);\n  this.size = this.items.size;\n\n  return this;\n};\n\n/**\n * Method used to set an item in the FuzzyMap using the given key.\n *\n * @param  {any} key  - Key to use.\n * @param  {any} item - Item to add.\n * @return {FuzzyMap}\n */\nFuzzyMap.prototype.set = function(key, item) {\n  key = this.writeHashFunction(key);\n\n  this.items.set(key, item);\n  this.size = this.items.size;\n\n  return this;\n};\n\n/**\n * Method used to retrieve an item from the FuzzyMap.\n *\n * @param  {any} key - Key to use.\n * @return {any}\n */\nFuzzyMap.prototype.get = function(key) {\n  key = this.readHashFunction(key);\n\n  return this.items.get(key);\n};\n\n/**\n * Method used to test the existence of an item in the map.\n *\n * @param  {any} key - Key to check.\n * @return {boolean}\n */\nFuzzyMap.prototype.has = function(key) {\n  key = this.readHashFunction(key);\n\n  return this.items.has(key);\n};\n\n/**\n * Method used to iterate over each of the FuzzyMap's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nFuzzyMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  this.items.forEach(function(value) {\n    callback.call(scope, value, value);\n  });\n};\n\n/**\n * Method returning an iterator over the FuzzyMap's values.\n *\n * @return {FuzzyMapIterator}\n */\nFuzzyMap.prototype.values = function() {\n  return this.items.values();\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  FuzzyMap.prototype[Symbol.iterator] = FuzzyMap.prototype.values;\n\n/**\n * Convenience known method.\n */\nFuzzyMap.prototype.inspect = function() {\n  var array = Array.from(this.items.values());\n\n  Object.defineProperty(array, 'constructor', {\n    value: FuzzyMap,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  FuzzyMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = FuzzyMap.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable}       iterable   - Target iterable.\n * @param  {array|function} descriptor - Hash functions descriptor.\n * @param  {boolean}        useSet     - Whether to use #.set or #.add\n * @return {FuzzyMap}\n */\nFuzzyMap.from = function(iterable, descriptor, useSet) {\n  var map = new FuzzyMap(descriptor);\n\n  forEach(iterable, function(value, key) {\n    if (useSet)\n      map.set(key, value);\n    else\n      map.add(value);\n  });\n\n  return map;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FuzzyMap;\n","/**\n * Mnemonist FuzzyMultiMap\n * ========================\n *\n * Same as the fuzzy map but relying on a MultiMap rather than a Map.\n */\nvar MultiMap = require('./multi-map.js'),\n    forEach = require('obliterator/foreach');\n\nvar identity = function(x) {\n  return x;\n};\n\n/**\n * FuzzyMultiMap.\n *\n * @constructor\n * @param {array|function} descriptor - Hash functions descriptor.\n * @param {function}       Container  - Container to use.\n */\nfunction FuzzyMultiMap(descriptor, Container) {\n  this.items = new MultiMap(Container);\n  this.clear();\n\n  if (Array.isArray(descriptor)) {\n    this.writeHashFunction = descriptor[0];\n    this.readHashFunction = descriptor[1];\n  }\n  else {\n    this.writeHashFunction = descriptor;\n    this.readHashFunction = descriptor;\n  }\n\n  if (!this.writeHashFunction)\n    this.writeHashFunction = identity;\n  if (!this.readHashFunction)\n    this.readHashFunction = identity;\n\n  if (typeof this.writeHashFunction !== 'function')\n    throw new Error('mnemonist/FuzzyMultiMap.constructor: invalid hash function given.');\n\n  if (typeof this.readHashFunction !== 'function')\n    throw new Error('mnemonist/FuzzyMultiMap.constructor: invalid hash function given.');\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nFuzzyMultiMap.prototype.clear = function() {\n  this.items.clear();\n\n  // Properties\n  this.size = 0;\n  this.dimension = 0;\n};\n\n/**\n * Method used to add an item to the index.\n *\n * @param  {any} item - Item to add.\n * @return {FuzzyMultiMap}\n */\nFuzzyMultiMap.prototype.add = function(item) {\n  var key = this.writeHashFunction(item);\n\n  this.items.set(key, item);\n  this.size = this.items.size;\n  this.dimension = this.items.dimension;\n\n  return this;\n};\n\n/**\n * Method used to set an item in the index using the given key.\n *\n * @param  {any} key  - Key to use.\n * @param  {any} item - Item to add.\n * @return {FuzzyMultiMap}\n */\nFuzzyMultiMap.prototype.set = function(key, item) {\n  key = this.writeHashFunction(key);\n\n  this.items.set(key, item);\n  this.size = this.items.size;\n  this.dimension = this.items.dimension;\n\n  return this;\n};\n\n/**\n * Method used to retrieve an item from the index.\n *\n * @param  {any} key - Key to use.\n * @return {any}\n */\nFuzzyMultiMap.prototype.get = function(key) {\n  key = this.readHashFunction(key);\n\n  return this.items.get(key);\n};\n\n/**\n * Method used to test the existence of an item in the map.\n *\n * @param  {any} key - Key to check.\n * @return {boolean}\n */\nFuzzyMultiMap.prototype.has = function(key) {\n  key = this.readHashFunction(key);\n\n  return this.items.has(key);\n};\n\n/**\n * Method used to iterate over each of the index's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nFuzzyMultiMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  this.items.forEach(function(value) {\n    callback.call(scope, value, value);\n  });\n};\n\n/**\n * Method returning an iterator over the index's values.\n *\n * @return {FuzzyMultiMapIterator}\n */\nFuzzyMultiMap.prototype.values = function() {\n  return this.items.values();\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  FuzzyMultiMap.prototype[Symbol.iterator] = FuzzyMultiMap.prototype.values;\n\n/**\n * Convenience known method.\n */\nFuzzyMultiMap.prototype.inspect = function() {\n  var array = Array.from(this);\n\n  Object.defineProperty(array, 'constructor', {\n    value: FuzzyMultiMap,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  FuzzyMultiMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = FuzzyMultiMap.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable}       iterable   - Target iterable.\n * @param  {array|function} descriptor - Hash functions descriptor.\n * @param  {function}       Container  - Container to use.\n * @param  {boolean}        useSet     - Whether to use #.set or #.add\n * @return {FuzzyMultiMap}\n */\nFuzzyMultiMap.from = function(iterable, descriptor, Container, useSet) {\n  if (arguments.length === 3) {\n    if (typeof Container === 'boolean') {\n      useSet = Container;\n      Container = Array;\n    }\n  }\n\n  var map = new FuzzyMultiMap(descriptor, Container);\n\n  forEach(iterable, function(value, key) {\n    if (useSet)\n      map.set(key, value);\n    else\n      map.add(value);\n  });\n\n  return map;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FuzzyMultiMap;\n","/**\n * Mnemonist HashedArrayTree\n * ==========================\n *\n * Abstract implementation of a hashed array tree representing arrays growing\n * dynamically.\n */\n\n/**\n * Defaults.\n */\nvar DEFAULT_BLOCK_SIZE = 1024;\n\n/**\n * Helpers.\n */\nfunction powerOfTwo(x) {\n  return (x & (x - 1)) === 0;\n}\n\n/**\n * HashedArrayTree.\n *\n * @constructor\n * @param {function}      ArrayClass           - An array constructor.\n * @param {number|object} initialCapacityOrOptions - Self-explanatory.\n */\nfunction HashedArrayTree(ArrayClass, initialCapacityOrOptions) {\n  if (arguments.length < 1)\n    throw new Error('mnemonist/hashed-array-tree: expecting at least a byte array constructor.');\n\n  var initialCapacity = initialCapacityOrOptions || 0,\n      blockSize = DEFAULT_BLOCK_SIZE,\n      initialLength = 0;\n\n  if (typeof initialCapacityOrOptions === 'object') {\n    initialCapacity = initialCapacityOrOptions.initialCapacity || 0;\n    initialLength = initialCapacityOrOptions.initialLength || 0;\n    blockSize = initialCapacityOrOptions.blockSize || DEFAULT_BLOCK_SIZE;\n  }\n\n  if (!blockSize || !powerOfTwo(blockSize))\n    throw new Error('mnemonist/hashed-array-tree: block size should be a power of two.');\n\n  var capacity = Math.max(initialLength, initialCapacity),\n      initialBlocks = Math.ceil(capacity / blockSize);\n\n  this.ArrayClass = ArrayClass;\n  this.length = initialLength;\n  this.capacity = initialBlocks * blockSize;\n  this.blockSize = blockSize;\n  this.offsetMask = blockSize - 1;\n  this.blockMask = Math.log2(blockSize);\n\n  // Allocating initial blocks\n  this.blocks = new Array(initialBlocks);\n\n  for (var i = 0; i < initialBlocks; i++)\n    this.blocks[i] = new this.ArrayClass(this.blockSize);\n}\n\n/**\n * Method used to set a value.\n *\n * @param  {number} index - Index to edit.\n * @param  {any}    value - Value.\n * @return {HashedArrayTree}\n */\nHashedArrayTree.prototype.set = function(index, value) {\n\n  // Out of bounds?\n  if (this.length < index)\n    throw new Error('HashedArrayTree(' + this.ArrayClass.name + ').set: index out of bounds.');\n\n  var block = index >> this.blockMask,\n      i = index & this.offsetMask;\n\n  this.blocks[block][i] = value;\n\n  return this;\n};\n\n/**\n * Method used to get a value.\n *\n * @param  {number} index - Index to retrieve.\n * @return {any}\n */\nHashedArrayTree.prototype.get = function(index) {\n  if (this.length < index)\n    return;\n\n  var block = index >> this.blockMask,\n      i = index & this.offsetMask;\n\n  return this.blocks[block][i];\n};\n\n/**\n * Method used to grow the array.\n *\n * @param  {number}          capacity - Optional capacity to accomodate.\n * @return {HashedArrayTree}\n */\nHashedArrayTree.prototype.grow = function(capacity) {\n  if (typeof capacity !== 'number')\n    capacity = this.capacity + this.blockSize;\n\n  if (this.capacity >= capacity)\n    return this;\n\n  while (this.capacity < capacity) {\n    this.blocks.push(new this.ArrayClass(this.blockSize));\n    this.capacity += this.blockSize;\n  }\n\n  return this;\n};\n\n/**\n * Method used to resize the array. Won't deallocate.\n *\n * @param  {number}       length - Target length.\n * @return {HashedArrayTree}\n */\nHashedArrayTree.prototype.resize = function(length) {\n  if (length === this.length)\n    return this;\n\n  if (length < this.length) {\n    this.length = length;\n    return this;\n  }\n\n  this.length = length;\n  this.grow(length);\n\n  return this;\n};\n\n/**\n * Method used to push a value into the array.\n *\n * @param  {any}    value - Value to push.\n * @return {number}       - Length of the array.\n */\nHashedArrayTree.prototype.push = function(value) {\n  if (this.capacity === this.length)\n    this.grow();\n\n  var index = this.length;\n\n  var block = index >> this.blockMask,\n      i = index & this.offsetMask;\n\n  this.blocks[block][i] = value;\n\n  return ++this.length;\n};\n\n/**\n * Method used to pop the last value of the array.\n *\n * @return {number} - The popped value.\n */\nHashedArrayTree.prototype.pop = function() {\n  if (this.length === 0)\n    return;\n\n  var lastBlock = this.blocks[this.blocks.length - 1];\n\n  var i = (--this.length) & this.offsetMask;\n\n  return lastBlock[i];\n};\n\n/**\n * Convenience known methods.\n */\nHashedArrayTree.prototype.inspect = function() {\n  var proxy = new this.ArrayClass(this.length),\n      block;\n\n  for (var i = 0, l = this.length; i < l; i++) {\n    block = i >> this.blockMask;\n    proxy[i] = this.blocks[block][i & this.offsetMask];\n  }\n\n  proxy.type = this.ArrayClass.name;\n  proxy.items = this.length;\n  proxy.capacity = this.capacity;\n  proxy.blockSize = this.blockSize;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: HashedArrayTree,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  HashedArrayTree.prototype[Symbol.for('nodejs.util.inspect.custom')] = HashedArrayTree.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = HashedArrayTree;\n","/**\n * Mnemonist Binary Heap\n * ======================\n *\n * Binary heap implementation.\n */\nvar forEach = require('obliterator/foreach'),\n    comparators = require('./utils/comparators.js'),\n    iterables = require('./utils/iterables.js');\n\nvar DEFAULT_COMPARATOR = comparators.DEFAULT_COMPARATOR,\n    reverseComparator = comparators.reverseComparator;\n\n/**\n * Heap helper functions.\n */\n\n/**\n * Function used to sift down.\n *\n * @param {function} compare    - Comparison function.\n * @param {array}    heap       - Array storing the heap's data.\n * @param {number}   startIndex - Starting index.\n * @param {number}   i          - Index.\n */\nfunction siftDown(compare, heap, startIndex, i) {\n  var item = heap[i],\n      parentIndex,\n      parent;\n\n  while (i > startIndex) {\n    parentIndex = (i - 1) >> 1;\n    parent = heap[parentIndex];\n\n    if (compare(item, parent) < 0) {\n      heap[i] = parent;\n      i = parentIndex;\n      continue;\n    }\n\n    break;\n  }\n\n  heap[i] = item;\n}\n\n/**\n * Function used to sift up.\n *\n * @param {function} compare - Comparison function.\n * @param {array}    heap    - Array storing the heap's data.\n * @param {number}   i       - Index.\n */\nfunction siftUp(compare, heap, i) {\n  var endIndex = heap.length,\n      startIndex = i,\n      item = heap[i],\n      childIndex = 2 * i + 1,\n      rightIndex;\n\n  while (childIndex < endIndex) {\n    rightIndex = childIndex + 1;\n\n    if (\n      rightIndex < endIndex &&\n      compare(heap[childIndex], heap[rightIndex]) >= 0\n    ) {\n      childIndex = rightIndex;\n    }\n\n    heap[i] = heap[childIndex];\n    i = childIndex;\n    childIndex = 2 * i + 1;\n  }\n\n  heap[i] = item;\n  siftDown(compare, heap, startIndex, i);\n}\n\n/**\n * Function used to push an item into a heap represented by a raw array.\n *\n * @param {function} compare - Comparison function.\n * @param {array}    heap    - Array storing the heap's data.\n * @param {any}      item    - Item to push.\n */\nfunction push(compare, heap, item) {\n  heap.push(item);\n  siftDown(compare, heap, 0, heap.length - 1);\n}\n\n/**\n * Function used to pop an item from a heap represented by a raw array.\n *\n * @param  {function} compare - Comparison function.\n * @param  {array}    heap    - Array storing the heap's data.\n * @return {any}\n */\nfunction pop(compare, heap) {\n  var lastItem = heap.pop();\n\n  if (heap.length !== 0) {\n    var item = heap[0];\n    heap[0] = lastItem;\n    siftUp(compare, heap, 0);\n\n    return item;\n  }\n\n  return lastItem;\n}\n\n/**\n * Function used to pop the heap then push a new value into it, thus \"replacing\"\n * it.\n *\n * @param  {function} compare - Comparison function.\n * @param  {array}    heap    - Array storing the heap's data.\n * @param  {any}      item    - The item to push.\n * @return {any}\n */\nfunction replace(compare, heap, item) {\n  if (heap.length === 0)\n    throw new Error('mnemonist/heap.replace: cannot pop an empty heap.');\n\n  var popped = heap[0];\n  heap[0] = item;\n  siftUp(compare, heap, 0);\n\n  return popped;\n}\n\n/**\n * Function used to push an item in the heap then pop the heap and return the\n * popped value.\n *\n * @param  {function} compare - Comparison function.\n * @param  {array}    heap    - Array storing the heap's data.\n * @param  {any}      item    - The item to push.\n * @return {any}\n */\nfunction pushpop(compare, heap, item) {\n  var tmp;\n\n  if (heap.length !== 0 && compare(heap[0], item) < 0) {\n    tmp = heap[0];\n    heap[0] = item;\n    item = tmp;\n    siftUp(compare, heap, 0);\n  }\n\n  return item;\n}\n\n/**\n * Converts and array into an abstract heap in linear time.\n *\n * @param {function} compare - Comparison function.\n * @param {array}    array   - Target array.\n */\nfunction heapify(compare, array) {\n  var n = array.length,\n      l = n >> 1,\n      i = l;\n\n  while (--i >= 0)\n    siftUp(compare, array, i);\n}\n\n/**\n * Fully consumes the given heap.\n *\n * @param  {function} compare - Comparison function.\n * @param  {array}    heap    - Array storing the heap's data.\n * @return {array}\n */\nfunction consume(compare, heap) {\n  var l = heap.length,\n      i = 0;\n\n  var array = new Array(l);\n\n  while (i < l)\n    array[i++] = pop(compare, heap);\n\n  return array;\n}\n\n/**\n * Function used to retrieve the n smallest items from the given iterable.\n *\n * @param {function} compare  - Comparison function.\n * @param {number}   n        - Number of top items to retrieve.\n * @param {any}      iterable - Arbitrary iterable.\n * @param {array}\n */\nfunction nsmallest(compare, n, iterable) {\n  if (arguments.length === 2) {\n    iterable = n;\n    n = compare;\n    compare = DEFAULT_COMPARATOR;\n  }\n\n  var reverseCompare = reverseComparator(compare);\n\n  var i, l, v;\n\n  var min = Infinity;\n\n  var result;\n\n  // If n is equal to 1, it's just a matter of finding the minimum\n  if (n === 1) {\n    if (iterables.isArrayLike(iterable)) {\n      for (i = 0, l = iterable.length; i < l; i++) {\n        v = iterable[i];\n\n        if (min === Infinity || compare(v, min) < 0)\n          min = v;\n      }\n\n      result = new iterable.constructor(1);\n      result[0] = min;\n\n      return result;\n    }\n\n    forEach(iterable, function(value) {\n      if (min === Infinity || compare(value, min) < 0)\n        min = value;\n    });\n\n    return [min];\n  }\n\n  if (iterables.isArrayLike(iterable)) {\n\n    // If n > iterable length, we just clone and sort\n    if (n >= iterable.length)\n      return iterable.slice().sort(compare);\n\n    result = iterable.slice(0, n);\n    heapify(reverseCompare, result);\n\n    for (i = n, l = iterable.length; i < l; i++)\n      if (reverseCompare(iterable[i], result[0]) > 0)\n        replace(reverseCompare, result, iterable[i]);\n\n    // NOTE: if n is over some number, it becomes faster to consume the heap\n    return result.sort(compare);\n  }\n\n  // Correct for size\n  var size = iterables.guessLength(iterable);\n\n  if (size !== null && size < n)\n    n = size;\n\n  result = new Array(n);\n  i = 0;\n\n  forEach(iterable, function(value) {\n    if (i < n) {\n      result[i] = value;\n    }\n    else {\n      if (i === n)\n        heapify(reverseCompare, result);\n\n      if (reverseCompare(value, result[0]) > 0)\n        replace(reverseCompare, result, value);\n    }\n\n    i++;\n  });\n\n  if (result.length > i)\n    result.length = i;\n\n  // NOTE: if n is over some number, it becomes faster to consume the heap\n  return result.sort(compare);\n}\n\n/**\n * Function used to retrieve the n largest items from the given iterable.\n *\n * @param {function} compare  - Comparison function.\n * @param {number}   n        - Number of top items to retrieve.\n * @param {any}      iterable - Arbitrary iterable.\n * @param {array}\n */\nfunction nlargest(compare, n, iterable) {\n  if (arguments.length === 2) {\n    iterable = n;\n    n = compare;\n    compare = DEFAULT_COMPARATOR;\n  }\n\n  var reverseCompare = reverseComparator(compare);\n\n  var i, l, v;\n\n  var max = -Infinity;\n\n  var result;\n\n  // If n is equal to 1, it's just a matter of finding the maximum\n  if (n === 1) {\n    if (iterables.isArrayLike(iterable)) {\n      for (i = 0, l = iterable.length; i < l; i++) {\n        v = iterable[i];\n\n        if (max === -Infinity || compare(v, max) > 0)\n          max = v;\n      }\n\n      result = new iterable.constructor(1);\n      result[0] = max;\n\n      return result;\n    }\n\n    forEach(iterable, function(value) {\n      if (max === -Infinity || compare(value, max) > 0)\n        max = value;\n    });\n\n    return [max];\n  }\n\n  if (iterables.isArrayLike(iterable)) {\n\n    // If n > iterable length, we just clone and sort\n    if (n >= iterable.length)\n      return iterable.slice().sort(reverseCompare);\n\n    result = iterable.slice(0, n);\n    heapify(compare, result);\n\n    for (i = n, l = iterable.length; i < l; i++)\n      if (compare(iterable[i], result[0]) > 0)\n        replace(compare, result, iterable[i]);\n\n    // NOTE: if n is over some number, it becomes faster to consume the heap\n    return result.sort(reverseCompare);\n  }\n\n  // Correct for size\n  var size = iterables.guessLength(iterable);\n\n  if (size !== null && size < n)\n    n = size;\n\n  result = new Array(n);\n  i = 0;\n\n  forEach(iterable, function(value) {\n    if (i < n) {\n      result[i] = value;\n    }\n    else {\n      if (i === n)\n        heapify(compare, result);\n\n      if (compare(value, result[0]) > 0)\n        replace(compare, result, value);\n    }\n\n    i++;\n  });\n\n  if (result.length > i)\n    result.length = i;\n\n  // NOTE: if n is over some number, it becomes faster to consume the heap\n  return result.sort(reverseCompare);\n}\n\n/**\n * Binary Minimum Heap.\n *\n * @constructor\n * @param {function} comparator - Comparator function to use.\n */\nfunction Heap(comparator) {\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n\n  if (typeof this.comparator !== 'function')\n    throw new Error('mnemonist/Heap.constructor: given comparator should be a function.');\n}\n\n/**\n * Method used to clear the heap.\n *\n * @return {undefined}\n */\nHeap.prototype.clear = function() {\n\n  // Properties\n  this.items = [];\n  this.size = 0;\n};\n\n/**\n * Method used to push an item into the heap.\n *\n * @param  {any}    item - Item to push.\n * @return {number}\n */\nHeap.prototype.push = function(item) {\n  push(this.comparator, this.items, item);\n  return ++this.size;\n};\n\n/**\n * Method used to retrieve the \"first\" item of the heap.\n *\n * @return {any}\n */\nHeap.prototype.peek = function() {\n  return this.items[0];\n};\n\n/**\n * Method used to retrieve & remove the \"first\" item of the heap.\n *\n * @return {any}\n */\nHeap.prototype.pop = function() {\n  if (this.size !== 0)\n    this.size--;\n\n  return pop(this.comparator, this.items);\n};\n\n/**\n * Method used to pop the heap, then push an item and return the popped\n * item.\n *\n * @param  {any} item - Item to push into the heap.\n * @return {any}\n */\nHeap.prototype.replace = function(item) {\n  return replace(this.comparator, this.items, item);\n};\n\n/**\n * Method used to push the heap, the pop it and return the pooped item.\n *\n * @param  {any} item - Item to push into the heap.\n * @return {any}\n */\nHeap.prototype.pushpop = function(item) {\n  return pushpop(this.comparator, this.items, item);\n};\n\n/**\n * Method used to consume the heap fully and return its items as a sorted array.\n *\n * @return {array}\n */\nHeap.prototype.consume = function() {\n  this.size = 0;\n  return consume(this.comparator, this.items);\n};\n\n/**\n * Method used to convert the heap to an array. Note that it basically clone\n * the heap and consumes it completely. This is hardly performant.\n *\n * @return {array}\n */\nHeap.prototype.toArray = function() {\n  return consume(this.comparator, this.items.slice());\n};\n\n/**\n * Convenience known methods.\n */\nHeap.prototype.inspect = function() {\n  var proxy = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: Heap,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  Heap.prototype[Symbol.for('nodejs.util.inspect.custom')] = Heap.prototype.inspect;\n\n/**\n * Binary Maximum Heap.\n *\n * @constructor\n * @param {function} comparator - Comparator function to use.\n */\nfunction MaxHeap(comparator) {\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n\n  if (typeof this.comparator !== 'function')\n    throw new Error('mnemonist/MaxHeap.constructor: given comparator should be a function.');\n\n  this.comparator = reverseComparator(this.comparator);\n}\n\nMaxHeap.prototype = Heap.prototype;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a heap.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} comparator - Custom comparator function.\n * @return {Heap}\n */\nHeap.from = function(iterable, comparator) {\n  var heap = new Heap(comparator);\n\n  var items;\n\n  // If iterable is an array, we can be clever about it\n  if (iterables.isArrayLike(iterable))\n    items = iterable.slice();\n  else\n    items = iterables.toArray(iterable);\n\n  heapify(heap.comparator, items);\n  heap.items = items;\n  heap.size = items.length;\n\n  return heap;\n};\n\nMaxHeap.from = function(iterable, comparator) {\n  var heap = new MaxHeap(comparator);\n\n  var items;\n\n  // If iterable is an array, we can be clever about it\n  if (iterables.isArrayLike(iterable))\n    items = iterable.slice();\n  else\n    items = iterables.toArray(iterable);\n\n  heapify(heap.comparator, items);\n  heap.items = items;\n  heap.size = items.length;\n\n  return heap;\n};\n\n/**\n * Exporting.\n */\nHeap.siftUp = siftUp;\nHeap.siftDown = siftDown;\nHeap.push = push;\nHeap.pop = pop;\nHeap.replace = replace;\nHeap.pushpop = pushpop;\nHeap.heapify = heapify;\nHeap.consume = consume;\n\nHeap.nsmallest = nsmallest;\nHeap.nlargest = nlargest;\n\nHeap.MinHeap = Heap;\nHeap.MaxHeap = MaxHeap;\n\nmodule.exports = Heap;\n","/**\n * Mnemonist Library Endpoint\n * ===========================\n *\n * Exporting every data structure through a unified endpoint. Consumers\n * of this library should prefer the modular access though.\n */\nvar Heap = require('./heap.js'),\n    FibonacciHeap = require('./fibonacci-heap.js'),\n    SuffixArray = require('./suffix-array.js');\n\nmodule.exports = {\n  BiMap: require('./bi-map.js'),\n  BitSet: require('./bit-set.js'),\n  BitVector: require('./bit-vector.js'),\n  BloomFilter: require('./bloom-filter.js'),\n  BKTree: require('./bk-tree.js'),\n  CircularBuffer: require('./circular-buffer.js'),\n  DefaultMap: require('./default-map.js'),\n  DefaultWeakMap: require('./default-weak-map.js'),\n  FixedDeque: require('./fixed-deque.js'),\n  StaticDisjointSet: require('./static-disjoint-set.js'),\n  FibonacciHeap: FibonacciHeap,\n  MinFibonacciHeap: FibonacciHeap.MinFibonacciHeap,\n  MaxFibonacciHeap: FibonacciHeap.MaxFibonacciHeap,\n  FixedReverseHeap: require('./fixed-reverse-heap.js'),\n  FuzzyMap: require('./fuzzy-map.js'),\n  FuzzyMultiMap: require('./fuzzy-multi-map.js'),\n  HashedArrayTree: require('./hashed-array-tree.js'),\n  Heap: Heap,\n  MinHeap: Heap.MinHeap,\n  MaxHeap: Heap.MaxHeap,\n  StaticIntervalTree: require('./static-interval-tree.js'),\n  InvertedIndex: require('./inverted-index.js'),\n  KDTree: require('./kd-tree.js'),\n  LinkedList: require('./linked-list.js'),\n  LRUCache: require('./lru-cache.js'),\n  LRUCacheWithDelete: require('./lru-cache-with-delete.js'),\n  LRUMap: require('./lru-map.js'),\n  LRUMapWithDelete: require('./lru-map-with-delete.js'),\n  MultiMap: require('./multi-map.js'),\n  MultiSet: require('./multi-set.js'),\n  PassjoinIndex: require('./passjoin-index.js'),\n  Queue: require('./queue.js'),\n  FixedStack: require('./fixed-stack.js'),\n  Stack: require('./stack.js'),\n  SuffixArray: SuffixArray,\n  GeneralizedSuffixArray: SuffixArray.GeneralizedSuffixArray,\n  Set: require('./set.js'),\n  SparseQueueSet: require('./sparse-queue-set.js'),\n  SparseMap: require('./sparse-map.js'),\n  SparseSet: require('./sparse-set.js'),\n  SymSpell: require('./symspell.js'),\n  Trie: require('./trie.js'),\n  TrieMap: require('./trie-map.js'),\n  Vector: require('./vector.js'),\n  VPTree: require('./vp-tree.js')\n};\n","/**\n * Mnemonist Inverted Index\n * =========================\n *\n * JavaScript implementation of an inverted index.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach'),\n    helpers = require('./utils/merge.js');\n\nfunction identity(x) {\n  return x;\n}\n\n/**\n * InvertedIndex.\n *\n * @constructor\n * @param {function} tokenizer - Tokenizer function.\n */\nfunction InvertedIndex(descriptor) {\n  this.clear();\n\n  if (Array.isArray(descriptor)) {\n    this.documentTokenizer = descriptor[0];\n    this.queryTokenizer = descriptor[1];\n  }\n  else {\n    this.documentTokenizer = descriptor;\n    this.queryTokenizer = descriptor;\n  }\n\n  if (!this.documentTokenizer)\n    this.documentTokenizer = identity;\n  if (!this.queryTokenizer)\n    this.queryTokenizer = identity;\n\n  if (typeof this.documentTokenizer !== 'function')\n    throw new Error('mnemonist/InvertedIndex.constructor: document tokenizer is not a function.');\n\n  if (typeof this.queryTokenizer !== 'function')\n    throw new Error('mnemonist/InvertedIndex.constructor: query tokenizer is not a function.');\n}\n\n/**\n * Method used to clear the InvertedIndex.\n *\n * @return {undefined}\n */\nInvertedIndex.prototype.clear = function() {\n\n  // Properties\n  this.items = [];\n  this.mapping = new Map();\n  this.size = 0;\n  this.dimension = 0;\n};\n\n/**\n * Method used to add a document to the index.\n *\n * @param  {any} doc - Item to add.\n * @return {InvertedIndex}\n */\nInvertedIndex.prototype.add = function(doc) {\n\n  // Increasing size\n  this.size++;\n\n  // Storing document\n  var key = this.items.length;\n  this.items.push(doc);\n\n  // Tokenizing the document\n  var tokens = this.documentTokenizer(doc);\n\n  if (!Array.isArray(tokens))\n    throw new Error('mnemonist/InvertedIndex.add: tokenizer function should return an array of tokens.');\n\n  // Indexing\n  var done = new Set(),\n      token,\n      container;\n\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n\n    if (done.has(token))\n      continue;\n\n    done.add(token);\n\n    container = this.mapping.get(token);\n\n    if (!container) {\n      container = [];\n      this.mapping.set(token, container);\n    }\n\n    container.push(key);\n  }\n\n  this.dimension = this.mapping.size;\n\n  return this;\n};\n\n/**\n * Method used to query the index in a AND fashion.\n *\n * @param  {any} query - Query\n * @return {Set}       - Intersection of documents matching the query.\n */\nInvertedIndex.prototype.get = function(query) {\n\n  // Early termination\n  if (!this.size)\n    return [];\n\n  // First we need to tokenize the query\n  var tokens = this.queryTokenizer(query);\n\n  if (!Array.isArray(tokens))\n    throw new Error('mnemonist/InvertedIndex.query: tokenizer function should return an array of tokens.');\n\n  if (!tokens.length)\n    return [];\n\n  var results = this.mapping.get(tokens[0]),\n      c,\n      i,\n      l;\n\n  if (typeof results === 'undefined' || results.length === 0)\n    return [];\n\n  if (tokens.length > 1) {\n    for (i = 1, l = tokens.length; i < l; i++) {\n      c = this.mapping.get(tokens[i]);\n\n      if (typeof c === 'undefined' || c.length === 0)\n        return [];\n\n      results = helpers.intersectionUniqueArrays(results, c);\n    }\n  }\n\n  var docs = new Array(results.length);\n\n  for (i = 0, l = docs.length; i < l; i++)\n    docs[i] = this.items[results[i]];\n\n  return docs;\n};\n\n/**\n * Method used to iterate over each of the documents.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nInvertedIndex.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0, l = this.documents.length; i < l; i++)\n    callback.call(scope, this.documents[i], i, this);\n};\n\n/**\n * Method returning an iterator over the index's documents.\n *\n * @return {Iterator}\n */\nInvertedIndex.prototype.documents = function() {\n  var documents = this.items,\n      l = documents.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n      var value = documents[i++];\n\n      return {\n        value: value,\n        done: false\n      };\n  });\n};\n\n/**\n * Method returning an iterator over the index's tokens.\n *\n * @return {Iterator}\n */\nInvertedIndex.prototype.tokens = function() {\n  return this.mapping.keys();\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  InvertedIndex.prototype[Symbol.iterator] = InvertedIndex.prototype.documents;\n\n/**\n * Convenience known methods.\n */\nInvertedIndex.prototype.inspect = function() {\n  var array = this.items.slice();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: InvertedIndex,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  InvertedIndex.prototype[Symbol.for('nodejs.util.inspect.custom')] = InvertedIndex.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a InvertedIndex.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {function} tokenizer - Tokenizer function.\n * @return {InvertedIndex}\n */\nInvertedIndex.from = function(iterable, descriptor) {\n  var index = new InvertedIndex(descriptor);\n\n  forEach(iterable, function(doc) {\n    index.add(doc);\n  });\n\n  return index;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = InvertedIndex;\n","/**\n * Mnemonist KDTree\n * =================\n *\n * Low-level JavaScript implementation of a k-dimensional tree.\n */\nvar iterables = require('./utils/iterables.js');\nvar typed = require('./utils/typed-arrays.js');\nvar createTupleComparator = require('./utils/comparators.js').createTupleComparator;\nvar FixedReverseHeap = require('./fixed-reverse-heap.js');\nvar inplaceQuickSortIndices = require('./sort/quick.js').inplaceQuickSortIndices;\n\n/**\n * Helper function used to compute the squared distance between a query point\n * and an indexed points whose values are stored in a tree's axes.\n *\n * Note that squared distance is used instead of euclidean to avoid\n * costly sqrt computations.\n *\n * @param  {number} dimensions - Number of dimensions.\n * @param  {array}  axes       - Axes data.\n * @param  {number} pivot      - Pivot.\n * @param  {array}  point      - Query point.\n * @return {number}\n */\nfunction squaredDistanceAxes(dimensions, axes, pivot, b) {\n  var d;\n\n  var dist = 0,\n      step;\n\n  for (d = 0; d < dimensions; d++) {\n    step = axes[d][pivot] - b[d];\n    dist += step * step;\n  }\n\n  return dist;\n}\n\n/**\n * Helper function used to reshape input data into low-level axes data.\n *\n * @param  {number} dimensions - Number of dimensions.\n * @param  {array}  data       - Data in the shape [label, [x, y, z...]]\n * @return {object}\n */\nfunction reshapeIntoAxes(dimensions, data) {\n  var l = data.length;\n\n  var axes = new Array(dimensions),\n      labels = new Array(l),\n      axis;\n\n  var PointerArray = typed.getPointerArray(l);\n\n  var ids = new PointerArray(l);\n\n  var d, i, row;\n\n  var f = true;\n\n  for (d = 0; d < dimensions; d++) {\n    axis = new Float64Array(l);\n\n    for (i = 0; i < l; i++) {\n      row = data[i];\n      axis[i] = row[1][d];\n\n      if (f) {\n        labels[i] = row[0];\n        ids[i] = i;\n      }\n    }\n\n    f = false;\n    axes[d] = axis;\n  }\n\n  return {axes: axes, ids: ids, labels: labels};\n}\n\n/**\n * Helper function used to build a kd-tree from axes data.\n *\n * @param  {number} dimensions - Number of dimensions.\n * @param  {array}  axes       - Axes.\n * @param  {array}  ids        - Indices to sort.\n * @param  {array}  labels     - Point labels.\n * @return {object}\n */\nfunction buildTree(dimensions, axes, ids, labels) {\n  var l = labels.length;\n\n  // NOTE: +1 because we need to keep 0 as null pointer\n  var PointerArray = typed.getPointerArray(l + 1);\n\n  // Building the tree\n  var pivots = new PointerArray(l),\n      lefts = new PointerArray(l),\n      rights = new PointerArray(l);\n\n  var stack = [[0, 0, ids.length, -1, 0]],\n      step,\n      parent,\n      direction,\n      median,\n      pivot,\n      lo,\n      hi;\n\n  var d, i = 0;\n\n  while (stack.length !== 0) {\n    step = stack.pop();\n\n    d = step[0];\n    lo = step[1];\n    hi = step[2];\n    parent = step[3];\n    direction = step[4];\n\n    inplaceQuickSortIndices(axes[d], ids, lo, hi);\n\n    l = hi - lo;\n    median = lo + (l >>> 1); // Fancy floor(l / 2)\n    pivot = ids[median];\n    pivots[i] = pivot;\n\n    if (parent > -1) {\n      if (direction === 0)\n        lefts[parent] = i + 1;\n      else\n        rights[parent] = i + 1;\n    }\n\n    d = (d + 1) % dimensions;\n\n    // Right\n    if (median !== lo && median !== hi - 1) {\n      stack.push([d, median + 1, hi, i, 1]);\n    }\n\n    // Left\n    if (median !== lo) {\n      stack.push([d, lo, median, i, 0]);\n    }\n\n    i++;\n  }\n\n  return {\n    axes: axes,\n    labels: labels,\n    pivots: pivots,\n    lefts: lefts,\n    rights: rights\n  };\n}\n\n/**\n * KDTree.\n *\n * @constructor\n */\nfunction KDTree(dimensions, build) {\n  this.dimensions = dimensions;\n  this.visited = 0;\n\n  this.axes = build.axes;\n  this.labels = build.labels;\n\n  this.pivots = build.pivots;\n  this.lefts = build.lefts;\n  this.rights = build.rights;\n\n  this.size = this.labels.length;\n}\n\n/**\n * Method returning the query's nearest neighbor.\n *\n * @param  {array}  query - Query point.\n * @return {any}\n */\nKDTree.prototype.nearestNeighbor = function(query) {\n  var bestDistance = Infinity,\n      best = null;\n\n  var dimensions = this.dimensions,\n      axes = this.axes,\n      pivots = this.pivots,\n      lefts = this.lefts,\n      rights = this.rights;\n\n  var visited = 0;\n\n  function recurse(d, node) {\n    visited++;\n\n    var left = lefts[node],\n        right = rights[node],\n        pivot = pivots[node];\n\n    var dist = squaredDistanceAxes(\n      dimensions,\n      axes,\n      pivot,\n      query\n    );\n\n    if (dist < bestDistance) {\n      best = pivot;\n      bestDistance = dist;\n\n      if (dist === 0)\n        return;\n    }\n\n    var dx = axes[d][pivot] - query[d];\n\n    d = (d + 1) % dimensions;\n\n    // Going the correct way?\n    if (dx > 0) {\n      if (left !== 0)\n        recurse(d, left - 1);\n    }\n    else {\n      if (right !== 0)\n        recurse(d, right - 1);\n    }\n\n    // Going the other way?\n    if (dx * dx < bestDistance) {\n      if (dx > 0) {\n        if (right !== 0)\n          recurse(d, right - 1);\n      }\n      else {\n        if (left !== 0)\n          recurse(d, left - 1);\n      }\n    }\n  }\n\n  recurse(0, 0);\n\n  this.visited = visited;\n  return this.labels[best];\n};\n\nvar KNN_HEAP_COMPARATOR_3 = createTupleComparator(3);\nvar KNN_HEAP_COMPARATOR_2 = createTupleComparator(2);\n\n/**\n * Method returning the query's k nearest neighbors.\n *\n * @param  {number} k     - Number of nearest neighbor to retrieve.\n * @param  {array}  query - Query point.\n * @return {array}\n */\n\n// TODO: can do better by improving upon static-kdtree here\nKDTree.prototype.kNearestNeighbors = function(k, query) {\n  if (k <= 0)\n    throw new Error('mnemonist/kd-tree.kNearestNeighbors: k should be a positive number.');\n\n  k = Math.min(k, this.size);\n\n  if (k === 1)\n    return [this.nearestNeighbor(query)];\n\n  var heap = new FixedReverseHeap(Array, KNN_HEAP_COMPARATOR_3, k);\n\n  var dimensions = this.dimensions,\n      axes = this.axes,\n      pivots = this.pivots,\n      lefts = this.lefts,\n      rights = this.rights;\n\n  var visited = 0;\n\n  function recurse(d, node) {\n    var left = lefts[node],\n        right = rights[node],\n        pivot = pivots[node];\n\n    var dist = squaredDistanceAxes(\n      dimensions,\n      axes,\n      pivot,\n      query\n    );\n\n    heap.push([dist, visited++, pivot]);\n\n    var point = query[d],\n        split = axes[d][pivot],\n        dx = point - split;\n\n    d = (d + 1) % dimensions;\n\n    // Going the correct way?\n    if (point < split) {\n      if (left !== 0) {\n        recurse(d, left - 1);\n      }\n    }\n    else {\n      if (right !== 0) {\n        recurse(d, right - 1);\n      }\n    }\n\n    // Going the other way?\n    if (dx * dx < heap.peek()[0] || heap.size < k) {\n      if (point < split) {\n        if (right !== 0) {\n          recurse(d, right - 1);\n        }\n      }\n      else {\n        if (left !== 0) {\n          recurse(d, left - 1);\n        }\n      }\n    }\n  }\n\n  recurse(0, 0);\n\n  this.visited = visited;\n\n  var best = heap.consume();\n\n  for (var i = 0; i < best.length; i++)\n    best[i] = this.labels[best[i][2]];\n\n  return best;\n};\n\n/**\n * Method returning the query's k nearest neighbors by linear search.\n *\n * @param  {number} k     - Number of nearest neighbor to retrieve.\n * @param  {array}  query - Query point.\n * @return {array}\n */\nKDTree.prototype.linearKNearestNeighbors = function(k, query) {\n  if (k <= 0)\n    throw new Error('mnemonist/kd-tree.kNearestNeighbors: k should be a positive number.');\n\n  k = Math.min(k, this.size);\n\n  var heap = new FixedReverseHeap(Array, KNN_HEAP_COMPARATOR_2, k);\n\n  var i, l, dist;\n\n  for (i = 0, l = this.size; i < l; i++) {\n    dist = squaredDistanceAxes(\n      this.dimensions,\n      this.axes,\n      this.pivots[i],\n      query\n    );\n\n    heap.push([dist, i]);\n  }\n\n  var best = heap.consume();\n\n  for (i = 0; i < best.length; i++)\n    best[i] = this.labels[this.pivots[best[i][1]]];\n\n  return best;\n};\n\n/**\n * Convenience known methods.\n */\nKDTree.prototype.inspect = function() {\n  var dummy = new Map();\n\n  dummy.dimensions = this.dimensions;\n\n  Object.defineProperty(dummy, 'constructor', {\n    value: KDTree,\n    enumerable: false\n  });\n\n  var i, j, point;\n\n  for (i = 0; i < this.size; i++) {\n    point = new Array(this.dimensions);\n\n    for (j = 0; j < this.dimensions; j++)\n      point[j] = this.axes[j][i];\n\n    dummy.set(this.labels[i], point);\n  }\n\n  return dummy;\n};\n\nif (typeof Symbol !== 'undefined')\n  KDTree.prototype[Symbol.for('nodejs.util.inspect.custom')] = KDTree.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {number}   dimensions - Space dimensions.\n * @return {KDTree}\n */\nKDTree.from = function(iterable, dimensions) {\n  var data = iterables.toArray(iterable);\n\n  var reshaped = reshapeIntoAxes(dimensions, data);\n\n  var result = buildTree(dimensions, reshaped.axes, reshaped.ids, reshaped.labels);\n\n  return new KDTree(dimensions, result);\n};\n\n/**\n * Static @.from function building a KDTree from given axes.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {number}   dimensions - Space dimensions.\n * @return {KDTree}\n */\nKDTree.fromAxes = function(axes, labels) {\n  if (!labels)\n    labels = typed.indices(axes[0].length);\n\n  var dimensions = axes.length;\n\n  var result = buildTree(axes.length, axes, typed.indices(labels.length), labels);\n\n  return new KDTree(dimensions, result);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = KDTree;\n","/**\n * Mnemonist Linked List\n * ======================\n *\n * Singly linked list implementation. Uses raw JavaScript objects as nodes\n * as benchmarks proved it was the fastest thing to do.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n/**\n * Linked List.\n *\n * @constructor\n */\nfunction LinkedList() {\n  this.clear();\n}\n\n/**\n * Method used to clear the list.\n *\n * @return {undefined}\n */\nLinkedList.prototype.clear = function() {\n\n  // Properties\n  this.head = null;\n  this.tail = null;\n  this.size = 0;\n};\n\n/**\n * Method used to get the first item of the list.\n *\n * @return {any}\n */\nLinkedList.prototype.first = function() {\n  return this.head ? this.head.item : undefined;\n};\nLinkedList.prototype.peek = LinkedList.prototype.first;\n\n/**\n * Method used to get the last item of the list.\n *\n * @return {any}\n */\nLinkedList.prototype.last = function() {\n  return this.tail ? this.tail.item : undefined;\n};\n\n/**\n * Method used to add an item at the end of the list.\n *\n * @param  {any}    item - The item to add.\n * @return {number}\n */\nLinkedList.prototype.push = function(item) {\n  var node = {item: item, next: null};\n\n  if (!this.head) {\n    this.head = node;\n    this.tail = node;\n  }\n  else {\n    this.tail.next = node;\n    this.tail = node;\n  }\n\n  this.size++;\n\n  return this.size;\n};\n\n/**\n * Method used to add an item at the beginning of the list.\n *\n * @param  {any}    item - The item to add.\n * @return {number}\n */\nLinkedList.prototype.unshift = function(item) {\n  var node = {item: item, next: null};\n\n  if (!this.head) {\n    this.head = node;\n    this.tail = node;\n  }\n  else {\n    if (!this.head.next)\n      this.tail = this.head;\n    node.next = this.head;\n    this.head = node;\n  }\n\n  this.size++;\n\n  return this.size;\n};\n\n/**\n * Method used to retrieve & remove the first item of the list.\n *\n * @return {any}\n */\nLinkedList.prototype.shift = function() {\n  if (!this.size)\n    return undefined;\n\n  var node = this.head;\n\n  this.head = node.next;\n  this.size--;\n\n  return node.item;\n};\n\n/**\n * Method used to iterate over the list.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nLinkedList.prototype.forEach = function(callback, scope) {\n  if (!this.size)\n    return;\n\n  scope = arguments.length > 1 ? scope : this;\n\n  var n = this.head,\n      i = 0;\n\n  while (n) {\n    callback.call(scope, n.item, i, this);\n    n = n.next;\n    i++;\n  }\n};\n\n/**\n * Method used to convert the list into an array.\n *\n * @return {array}\n */\nLinkedList.prototype.toArray = function() {\n  if (!this.size)\n    return [];\n\n  var array = new Array(this.size);\n\n  for (var i = 0, l = this.size, n = this.head; i < l; i++) {\n    array[i] = n.item;\n    n = n.next;\n  }\n\n  return array;\n};\n\n/**\n * Method used to create an iterator over a list's values.\n *\n * @return {Iterator}\n */\nLinkedList.prototype.values = function() {\n  var n = this.head;\n\n  return new Iterator(function() {\n    if (!n)\n      return {\n        done: true\n      };\n\n    var value = n.item;\n    n = n.next;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a list's entries.\n *\n * @return {Iterator}\n */\nLinkedList.prototype.entries = function() {\n  var n = this.head,\n      i = 0;\n\n  return new Iterator(function() {\n    if (!n)\n      return {\n        done: true\n      };\n\n    var value = n.item;\n    n = n.next;\n    i++;\n\n    return {\n      value: [i - 1, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  LinkedList.prototype[Symbol.iterator] = LinkedList.prototype.values;\n\n/**\n * Convenience known methods.\n */\nLinkedList.prototype.toString = function() {\n  return this.toArray().join(',');\n};\n\nLinkedList.prototype.toJSON = function() {\n  return this.toArray();\n};\n\nLinkedList.prototype.inspect = function() {\n  var array = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: LinkedList,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  LinkedList.prototype[Symbol.for('nodejs.util.inspect.custom')] = LinkedList.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a list.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {LinkedList}\n */\nLinkedList.from = function(iterable) {\n  var list = new LinkedList();\n\n  forEach(iterable, function(value) {\n    list.push(value);\n  });\n\n  return list;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = LinkedList;\n","/**\n * Mnemonist LRUCacheWithDelete\n * =============================\n *\n * An extension of LRUCache with delete functionality.\n */\n\nvar LRUCache = require('./lru-cache.js'),\n    forEach = require('obliterator/foreach'),\n    typed = require('./utils/typed-arrays.js'),\n    iterables = require('./utils/iterables.js');\n\n// The only complication with deleting items is that the LRU's\n// performance depends on having a fixed-size list of pointers; the\n// doubly-linked-list is happy to expand and contract.\n//\n// On delete, we record the position of the former item's pointer in a\n// list of \"holes\" in the pointer array. On insert, if there is a hole\n// the new pointer slots in to fill the hole; otherwise, it is\n// appended as usual. (Note: we are only talking here about the\n// internal pointer list. setting or getting an item promotes it\n// to the top of the LRU ranking no matter what came before)\n\nfunction LRUCacheWithDelete(Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    LRUCache.call(this, Keys);\n  }\n  else {\n    LRUCache.call(this, Keys, Values, capacity);\n  }\n  var PointerArray = typed.getPointerArray(this.capacity);\n  this.deleted = new PointerArray(this.capacity);\n  this.deletedSize = 0;\n}\n\nfor (var k in LRUCache.prototype)\n  LRUCacheWithDelete.prototype[k] = LRUCache.prototype[k];\nif (typeof Symbol !== 'undefined')\n  LRUCacheWithDelete.prototype[Symbol.iterator] = LRUCache.prototype[Symbol.iterator];\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nLRUCacheWithDelete.prototype.clear = function() {\n  LRUCache.prototype.clear.call(this);\n  this.deletedSize = 0;\n};\n\n/**\n * Method used to set the value for the given key in the cache.\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {undefined}\n */\nLRUCacheWithDelete.prototype.set = function(key, value) {\n\n  var pointer = this.items[key];\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    this.V[pointer] = value;\n\n    return;\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    if (this.deletedSize > 0) {\n      // If there is a \"hole\" in the pointer list, reuse it\n      pointer = this.deleted[--this.deletedSize];\n    }\n    else {\n      // otherwise append to the pointer list\n      pointer = this.size;\n    }\n    this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    delete this.items[this.K[pointer]];\n  }\n\n  // Storing key & value\n  this.items[key] = pointer;\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n};\n\n/**\n * Method used to set the value for the given key in the cache\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {{evicted: boolean, key: any, value: any}} An object containing the\n * key and value of an item that was overwritten or evicted in the set\n * operation, as well as a boolean indicating whether it was evicted due to\n * limited capacity. Return value is null if nothing was evicted or overwritten\n * during the set operation.\n */\nLRUCacheWithDelete.prototype.setpop = function(key, value) {\n  var oldValue = null;\n  var oldKey = null;\n\n  var pointer = this.items[key];\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    oldValue = this.V[pointer];\n    this.V[pointer] = value;\n    return {evicted: false, key: key, value: oldValue};\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    if (this.deletedSize > 0) {\n      // If there is a \"hole\" in the pointer list, reuse it\n      pointer = this.deleted[--this.deletedSize];\n    }\n    else {\n      // otherwise append to the pointer list\n      pointer = this.size;\n    }\n    this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    oldValue = this.V[pointer];\n    oldKey = this.K[pointer];\n    delete this.items[this.K[pointer]];\n  }\n\n  // Storing key & value\n  this.items[key] = pointer;\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n\n  // Return object if eviction took place, otherwise return null\n  if (oldKey) {\n    return {evicted: true, key: oldKey, value: oldValue};\n  }\n  else {\n    return null;\n  }\n};\n\n/**\n * Method used to delete the entry for the given key in the cache.\n *\n * @param  {any} key   - Key.\n * @return {boolean}   - true if the item was present\n */\nLRUCacheWithDelete.prototype.delete = function(key) {\n\n  var pointer = this.items[key];\n\n  if (typeof pointer === 'undefined') {\n    return false;\n  }\n\n  delete this.items[key];\n\n  if (this.size === 1) {\n    this.size = 0;\n    this.head = 0;\n    this.tail = 0;\n    this.deletedSize = 0;\n    return true;\n  }\n\n  var previous = this.backward[pointer],\n      next = this.forward[pointer];\n\n  if (this.head === pointer) {\n    this.head = next;\n  }\n  if (this.tail === pointer) {\n    this.tail = previous;\n  }\n\n  this.forward[previous] = next;\n  this.backward[next] = previous;\n\n  this.size--;\n  this.deleted[this.deletedSize++] = pointer;\n\n  return true;\n};\n\n/**\n * Method used to remove and return the value for the given key in the cache.\n *\n * @param  {any} key                 - Key.\n * @param  {any} [missing=undefined] - Value to return if item is absent\n * @return {any} The value, if present; the missing indicator if absent\n */\nLRUCacheWithDelete.prototype.remove = function(key, missing = undefined) {\n\n  var pointer = this.items[key];\n\n  if (typeof pointer === 'undefined') {\n    return missing;\n  }\n\n  var dead = this.V[pointer];\n  delete this.items[key];\n\n  if (this.size === 1) {\n    this.size = 0;\n    this.head = 0;\n    this.tail = 0;\n    this.deletedSize = 0;\n    return dead;\n  }\n\n  var previous = this.backward[pointer],\n      next = this.forward[pointer];\n\n  if (this.head === pointer) {\n    this.head = next;\n  }\n  if (this.tail === pointer) {\n    this.tail = previous;\n  }\n\n  this.forward[previous] = next;\n  this.backward[next] = previous;\n\n  this.size--;\n  this.deleted[this.deletedSize++] = pointer;\n\n  return dead;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {function} Keys     - Array class for storing keys.\n * @param  {function} Values   - Array class for storing values.\n * @param  {number}   capacity - Cache's capacity.\n * @return {LRUCacheWithDelete}\n */\nLRUCacheWithDelete.from = function(iterable, Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n  else if (arguments.length === 2) {\n    capacity = Keys;\n    Keys = null;\n    Values = null;\n  }\n\n  var cache = new LRUCacheWithDelete(Keys, Values, capacity);\n\n  forEach(iterable, function(value, key) {\n    cache.set(key, value);\n  });\n\n  return cache;\n};\n\nmodule.exports = LRUCacheWithDelete;\n","/**\n * Mnemonist LRUCache\n * ===================\n *\n * JavaScript implementation of the LRU Cache data structure. To save up\n * memory and allocations this implementation represents its underlying\n * doubly-linked list as static arrays and pointers. Thus, memory is allocated\n * only once at instantiation and JS objects are never created to serve as\n * pointers. This also means this implementation does not trigger too many\n * garbage collections.\n *\n * Note that to save up memory, a LRU Cache can be implemented using a singly\n * linked list by storing predecessors' pointers as hashmap values.\n * However, this means more hashmap lookups and would probably slow the whole\n * thing down. What's more, pointers are not the things taking most space in\n * memory.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach'),\n    typed = require('./utils/typed-arrays.js'),\n    iterables = require('./utils/iterables.js');\n\n/**\n * LRUCache.\n *\n * @constructor\n * @param {function} Keys     - Array class for storing keys.\n * @param {function} Values   - Array class for storing values.\n * @param {number}   capacity - Desired capacity.\n */\nfunction LRUCache(Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    capacity = Keys;\n    Keys = null;\n    Values = null;\n  }\n\n  this.capacity = capacity;\n\n  if (typeof this.capacity !== 'number' || this.capacity <= 0)\n    throw new Error('mnemonist/lru-cache: capacity should be positive number.');\n  else if (!isFinite(this.capacity) || Math.floor(this.capacity) !== this.capacity)\n    throw new Error('mnemonist/lru-cache: capacity should be a finite positive integer.');\n\n  var PointerArray = typed.getPointerArray(capacity);\n\n  this.forward = new PointerArray(capacity);\n  this.backward = new PointerArray(capacity);\n  this.K = typeof Keys === 'function' ? new Keys(capacity) : new Array(capacity);\n  this.V = typeof Values === 'function' ? new Values(capacity) : new Array(capacity);\n\n  // Properties\n  this.size = 0;\n  this.head = 0;\n  this.tail = 0;\n  this.items = {};\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nLRUCache.prototype.clear = function() {\n  this.size = 0;\n  this.head = 0;\n  this.tail = 0;\n  this.items = {};\n};\n\n/**\n * Method used to splay a value on top.\n *\n * @param  {number}   pointer - Pointer of the value to splay on top.\n * @return {LRUCache}\n */\nLRUCache.prototype.splayOnTop = function(pointer) {\n  var oldHead = this.head;\n\n  if (this.head === pointer)\n    return this;\n\n  var previous = this.backward[pointer],\n      next = this.forward[pointer];\n\n  if (this.tail === pointer) {\n    this.tail = previous;\n  }\n  else {\n    this.backward[next] = previous;\n  }\n\n  this.forward[previous] = next;\n\n  this.backward[oldHead] = pointer;\n  this.head = pointer;\n  this.forward[pointer] = oldHead;\n\n  return this;\n};\n\n/**\n * Method used to set the value for the given key in the cache.\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {undefined}\n */\nLRUCache.prototype.set = function(key, value) {\n\n  var pointer = this.items[key];\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    this.V[pointer] = value;\n\n    return;\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    pointer = this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    delete this.items[this.K[pointer]];\n  }\n\n  // Storing key & value\n  this.items[key] = pointer;\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n};\n\n/**\n * Method used to set the value for the given key in the cache\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {{evicted: boolean, key: any, value: any}} An object containing the\n * key and value of an item that was overwritten or evicted in the set\n * operation, as well as a boolean indicating whether it was evicted due to\n * limited capacity. Return value is null if nothing was evicted or overwritten\n * during the set operation.\n */\nLRUCache.prototype.setpop = function(key, value) {\n  var oldValue = null;\n  var oldKey = null;\n\n  var pointer = this.items[key];\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    oldValue = this.V[pointer];\n    this.V[pointer] = value;\n    return {evicted: false, key: key, value: oldValue};\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    pointer = this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    oldValue = this.V[pointer];\n    oldKey = this.K[pointer];\n    delete this.items[this.K[pointer]];\n  }\n\n  // Storing key & value\n  this.items[key] = pointer;\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n\n  // Return object if eviction took place, otherwise return null\n  if (oldKey) {\n    return {evicted: true, key: oldKey, value: oldValue};\n  }\n  else {\n    return null;\n  }\n};\n\n/**\n * Method used to check whether the key exists in the cache.\n *\n * @param  {any} key   - Key.\n * @return {boolean}\n */\nLRUCache.prototype.has = function(key) {\n  return key in this.items;\n};\n\n/**\n * Method used to get the value attached to the given key. Will move the\n * related key to the front of the underlying linked list.\n *\n * @param  {any} key   - Key.\n * @return {any}\n */\nLRUCache.prototype.get = function(key) {\n  var pointer = this.items[key];\n\n  if (typeof pointer === 'undefined')\n    return;\n\n  this.splayOnTop(pointer);\n\n  return this.V[pointer];\n};\n\n/**\n * Method used to get the value attached to the given key. Does not modify\n * the ordering of the underlying linked list.\n *\n * @param  {any} key   - Key.\n * @return {any}\n */\nLRUCache.prototype.peek = function(key) {\n  var pointer = this.items[key];\n\n  if (typeof pointer === 'undefined')\n    return;\n\n  return this.V[pointer];\n};\n\n/**\n * Method used to iterate over the cache's entries using a callback.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nLRUCache.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var i = 0,\n      l = this.size;\n\n  var pointer = this.head,\n      keys = this.K,\n      values = this.V,\n      forward = this.forward;\n\n  while (i < l) {\n\n    callback.call(scope, values[pointer], keys[pointer], this);\n    pointer = forward[pointer];\n\n    i++;\n  }\n};\n\n/**\n * Method used to create an iterator over the cache's keys from most\n * recently used to least recently used.\n *\n * @return {Iterator}\n */\nLRUCache.prototype.keys = function() {\n  var i = 0,\n      l = this.size;\n\n  var pointer = this.head,\n      keys = this.K,\n      forward = this.forward;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {done: true};\n\n    var key = keys[pointer];\n\n    i++;\n\n    if (i < l)\n      pointer = forward[pointer];\n\n    return {\n      done: false,\n      value: key\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over the cache's values from most\n * recently used to least recently used.\n *\n * @return {Iterator}\n */\nLRUCache.prototype.values = function() {\n  var i = 0,\n      l = this.size;\n\n  var pointer = this.head,\n      values = this.V,\n      forward = this.forward;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {done: true};\n\n    var value = values[pointer];\n\n    i++;\n\n    if (i < l)\n      pointer = forward[pointer];\n\n    return {\n      done: false,\n      value: value\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over the cache's entries from most\n * recently used to least recently used.\n *\n * @return {Iterator}\n */\nLRUCache.prototype.entries = function() {\n  var i = 0,\n      l = this.size;\n\n  var pointer = this.head,\n      keys = this.K,\n      values = this.V,\n      forward = this.forward;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {done: true};\n\n    var key = keys[pointer],\n        value = values[pointer];\n\n    i++;\n\n    if (i < l)\n      pointer = forward[pointer];\n\n    return {\n      done: false,\n      value: [key, value]\n    };\n  });\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  LRUCache.prototype[Symbol.iterator] = LRUCache.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nLRUCache.prototype.inspect = function() {\n  var proxy = new Map();\n\n  var iterator = this.entries(),\n      step;\n\n  while ((step = iterator.next(), !step.done))\n    proxy.set(step.value[0], step.value[1]);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: LRUCache,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  LRUCache.prototype[Symbol.for('nodejs.util.inspect.custom')] = LRUCache.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {function} Keys     - Array class for storing keys.\n * @param  {function} Values   - Array class for storing values.\n * @param  {number}   capacity - Cache's capacity.\n * @return {LRUCache}\n */\nLRUCache.from = function(iterable, Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n  else if (arguments.length === 2) {\n    capacity = Keys;\n    Keys = null;\n    Values = null;\n  }\n\n  var cache = new LRUCache(Keys, Values, capacity);\n\n  forEach(iterable, function(value, key) {\n    cache.set(key, value);\n  });\n\n  return cache;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = LRUCache;\n","/**\n * Mnemonist LRUMapWithDelete\n * ===========================\n *\n * An extension of LRUMap with delete functionality.\n */\n\nvar LRUMap = require('./lru-map.js'),\n    forEach = require('obliterator/foreach'),\n    typed = require('./utils/typed-arrays.js'),\n    iterables = require('./utils/iterables.js');\n\n// The only complication with deleting items is that the LRU's\n// performance depends on having a fixed-size list of pointers; the\n// doubly-linked-list is happy to expand and contract.\n//\n// On delete, we record the position of the former item's pointer in a\n// list of \"holes\" in the pointer array. On insert, if there is a hole\n// the new pointer slots in to fill the hole; otherwise, it is\n// appended as usual. (Note: we are only talking here about the\n// internal pointer list. setting or getting an item promotes it\n// to the top of the LRU ranking no matter what came before)\n\nfunction LRUMapWithDelete(Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    LRUMap.call(this, Keys);\n  }\n  else {\n    LRUMap.call(this, Keys, Values, capacity);\n  }\n  var PointerArray = typed.getPointerArray(this.capacity);\n  this.deleted = new PointerArray(this.capacity);\n  this.deletedSize = 0;\n}\n\nfor (var k in LRUMap.prototype)\n  LRUMapWithDelete.prototype[k] = LRUMap.prototype[k];\nif (typeof Symbol !== 'undefined')\n  LRUMapWithDelete.prototype[Symbol.iterator] = LRUMap.prototype[Symbol.iterator];\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nLRUMapWithDelete.prototype.clear = function() {\n  LRUMap.prototype.clear.call(this);\n  this.deletedSize = 0;\n};\n\n/**\n * Method used to set the value for the given key in the cache.\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {undefined}\n */\nLRUMapWithDelete.prototype.set = function(key, value) {\n\n  var pointer = this.items.get(key);\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    this.V[pointer] = value;\n\n    return;\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    if (this.deletedSize > 0) {\n      // If there is a \"hole\" in the pointer list, reuse it\n      pointer = this.deleted[--this.deletedSize];\n    }\n    else {\n      // otherwise append to the pointer list\n      pointer = this.size;\n    }\n    this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    this.items.delete(this.K[pointer]);\n  }\n\n  // Storing key & value\n  this.items.set(key, pointer);\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n};\n\n/**\n * Method used to set the value for the given key in the cache\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {{evicted: boolean, key: any, value: any}} An object containing the\n * key and value of an item that was overwritten or evicted in the set\n * operation, as well as a boolean indicating whether it was evicted due to\n * limited capacity. Return value is null if nothing was evicted or overwritten\n * during the set operation.\n */\nLRUMapWithDelete.prototype.setpop = function(key, value) {\n  var oldValue = null;\n  var oldKey = null;\n\n  var pointer = this.items.get(key);\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    oldValue = this.V[pointer];\n    this.V[pointer] = value;\n    return {evicted: false, key: key, value: oldValue};\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    if (this.deletedSize > 0) {\n      // If there is a \"hole\" in the pointer list, reuse it\n      pointer = this.deleted[--this.deletedSize];\n    }\n    else {\n      // otherwise append to the pointer list\n      pointer = this.size;\n    }\n    this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    oldValue = this.V[pointer];\n    oldKey = this.K[pointer];\n    this.items.delete(this.K[pointer]);\n  }\n\n  // Storing key & value\n  this.items.set(key, pointer);\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n\n  // Return object if eviction took place, otherwise return null\n  if (oldKey) {\n    return {evicted: true, key: oldKey, value: oldValue};\n  }\n  else {\n    return null;\n  }\n};\n\n/**\n * Method used to delete the entry for the given key in the cache.\n *\n * @param  {any} key   - Key.\n * @return {boolean}   - true if the item was present\n */\nLRUMapWithDelete.prototype.delete = function(key) {\n\n  var pointer = this.items.get(key);\n\n  if (typeof pointer === 'undefined') {\n    return false;\n  }\n\n  this.items.delete(key);\n\n  if (this.size === 1) {\n    this.size = 0;\n    this.head = 0;\n    this.tail = 0;\n    this.deletedSize = 0;\n    return true;\n  }\n\n  var previous = this.backward[pointer],\n      next = this.forward[pointer];\n\n  if (this.head === pointer) {\n    this.head = next;\n  }\n  if (this.tail === pointer) {\n    this.tail = previous;\n  }\n\n  this.forward[previous] = next;\n  this.backward[next] = previous;\n\n  this.size--;\n  this.deleted[this.deletedSize++] = pointer;\n\n  return true;\n};\n\n/**\n * Method used to remove and return the value for the given key in the cache.\n *\n * @param  {any} key                 - Key.\n * @param  {any} [missing=undefined] - Value to return if item is absent\n * @return {any} The value, if present; the missing indicator if absent\n */\nLRUMapWithDelete.prototype.remove = function(key, missing = undefined) {\n\n  var pointer = this.items.get(key);\n\n  if (typeof pointer === 'undefined') {\n    return missing;\n  }\n\n  var dead = this.V[pointer];\n  this.items.delete(key);\n\n  if (this.size === 1) {\n    this.size = 0;\n    this.head = 0;\n    this.tail = 0;\n    this.deletedSize = 0;\n    return dead;\n  }\n\n  var previous = this.backward[pointer],\n      next = this.forward[pointer];\n\n  if (this.head === pointer) {\n    this.head = next;\n  }\n  if (this.tail === pointer) {\n    this.tail = previous;\n  }\n\n  this.forward[previous] = next;\n  this.backward[next] = previous;\n\n  this.size--;\n  this.deleted[this.deletedSize++] = pointer;\n\n  return dead;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {function} Keys     - Array class for storing keys.\n * @param  {function} Values   - Array class for storing values.\n * @param  {number}   capacity - Cache's capacity.\n * @return {LRUMapWithDelete}\n */\nLRUMapWithDelete.from = function(iterable, Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/lru-map.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n  else if (arguments.length === 2) {\n    capacity = Keys;\n    Keys = null;\n    Values = null;\n  }\n\n  var cache = new LRUMapWithDelete(Keys, Values, capacity);\n\n  forEach(iterable, function(value, key) {\n    cache.set(key, value);\n  });\n\n  return cache;\n};\n\nmodule.exports = LRUMapWithDelete;\n","/**\n * Mnemonist LRUMap\n * =================\n *\n * Variant of the LRUCache class that leverages an ES6 Map instead of an object.\n * It might be faster for some use case but it is still hard to understand\n * when a Map can outperform an object in v8.\n */\nvar LRUCache = require('./lru-cache.js'),\n    forEach = require('obliterator/foreach'),\n    typed = require('./utils/typed-arrays.js'),\n    iterables = require('./utils/iterables.js');\n\n/**\n * LRUMap.\n *\n * @constructor\n * @param {function} Keys     - Array class for storing keys.\n * @param {function} Values   - Array class for storing values.\n * @param {number}   capacity - Desired capacity.\n */\nfunction LRUMap(Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    capacity = Keys;\n    Keys = null;\n    Values = null;\n  }\n\n  this.capacity = capacity;\n\n  if (typeof this.capacity !== 'number' || this.capacity <= 0)\n    throw new Error('mnemonist/lru-map: capacity should be positive number.');\n  else if (!isFinite(this.capacity) || Math.floor(this.capacity) !== this.capacity)\n    throw new Error('mnemonist/lru-map: capacity should be a finite positive integer.');\n\n  var PointerArray = typed.getPointerArray(capacity);\n\n  this.forward = new PointerArray(capacity);\n  this.backward = new PointerArray(capacity);\n  this.K = typeof Keys === 'function' ? new Keys(capacity) : new Array(capacity);\n  this.V = typeof Values === 'function' ? new Values(capacity) : new Array(capacity);\n\n  // Properties\n  this.size = 0;\n  this.head = 0;\n  this.tail = 0;\n  this.items = new Map();\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nLRUMap.prototype.clear = function() {\n  this.size = 0;\n  this.head = 0;\n  this.tail = 0;\n  this.items.clear();\n};\n\n/**\n * Method used to set the value for the given key in the cache.\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {undefined}\n */\nLRUMap.prototype.set = function(key, value) {\n\n  var pointer = this.items.get(key);\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    this.V[pointer] = value;\n\n    return;\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    pointer = this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    this.items.delete(this.K[pointer]);\n  }\n\n  // Storing key & value\n  this.items.set(key, pointer);\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n};\n\n/**\n * Method used to set the value for the given key in the cache.\n *\n * @param  {any} key   - Key.\n * @param  {any} value - Value.\n * @return {{evicted: boolean, key: any, value: any}} An object containing the\n * key and value of an item that was overwritten or evicted in the set\n * operation, as well as a boolean indicating whether it was evicted due to\n * limited capacity. Return value is null if nothing was evicted or overwritten\n * during the set operation.\n */\nLRUMap.prototype.setpop = function(key, value) {\n  var oldValue = null;\n  var oldKey = null;\n\n  var pointer = this.items.get(key);\n\n  // The key already exists, we just need to update the value and splay on top\n  if (typeof pointer !== 'undefined') {\n    this.splayOnTop(pointer);\n    oldValue = this.V[pointer];\n    this.V[pointer] = value;\n    return {evicted: false, key: key, value: oldValue};\n  }\n\n  // The cache is not yet full\n  if (this.size < this.capacity) {\n    pointer = this.size++;\n  }\n\n  // Cache is full, we need to drop the last value\n  else {\n    pointer = this.tail;\n    this.tail = this.backward[pointer];\n    oldValue = this.V[pointer];\n    oldKey = this.K[pointer];\n    this.items.delete(this.K[pointer]);\n  }\n\n  // Storing key & value\n  this.items.set(key, pointer);\n  this.K[pointer] = key;\n  this.V[pointer] = value;\n\n  // Moving the item at the front of the list\n  this.forward[pointer] = this.head;\n  this.backward[this.head] = pointer;\n  this.head = pointer;\n\n  // Return object if eviction took place, otherwise return null\n  if (oldKey) {\n    return {evicted: true, key: oldKey, value: oldValue};\n  }\n  else {\n    return null;\n  }\n};\n\n/**\n * Method used to check whether the key exists in the cache.\n *\n * @param  {any} key   - Key.\n * @return {boolean}\n */\nLRUMap.prototype.has = function(key) {\n  return this.items.has(key);\n};\n\n/**\n * Method used to get the value attached to the given key. Will move the\n * related key to the front of the underlying linked list.\n *\n * @param  {any} key   - Key.\n * @return {any}\n */\nLRUMap.prototype.get = function(key) {\n  var pointer = this.items.get(key);\n\n  if (typeof pointer === 'undefined')\n    return;\n\n  this.splayOnTop(pointer);\n\n  return this.V[pointer];\n};\n\n/**\n * Method used to get the value attached to the given key. Does not modify\n * the ordering of the underlying linked list.\n *\n * @param  {any} key   - Key.\n * @return {any}\n */\nLRUMap.prototype.peek = function(key) {\n  var pointer = this.items.get(key);\n\n  if (typeof pointer === 'undefined')\n    return;\n\n  return this.V[pointer];\n};\n\n/**\n * Methods that can be reused as-is from LRUCache.\n */\nLRUMap.prototype.splayOnTop = LRUCache.prototype.splayOnTop;\nLRUMap.prototype.forEach = LRUCache.prototype.forEach;\nLRUMap.prototype.keys = LRUCache.prototype.keys;\nLRUMap.prototype.values = LRUCache.prototype.values;\nLRUMap.prototype.entries = LRUCache.prototype.entries;\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  LRUMap.prototype[Symbol.iterator] = LRUMap.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nLRUMap.prototype.inspect = LRUCache.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {function} Keys     - Array class for storing keys.\n * @param  {function} Values   - Array class for storing values.\n * @param  {number}   capacity - Cache's capacity.\n * @return {LRUMap}\n */\nLRUMap.from = function(iterable, Keys, Values, capacity) {\n  if (arguments.length < 2) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n  else if (arguments.length === 2) {\n    capacity = Keys;\n    Keys = null;\n    Values = null;\n  }\n\n  var cache = new LRUMap(Keys, Values, capacity);\n\n  forEach(iterable, function(value, key) {\n    cache.set(key, value);\n  });\n\n  return cache;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = LRUMap;\n","/**\n * Mnemonist MultiMap\n * ===================\n *\n * Implementation of a MultiMap with custom container.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n/**\n * MultiMap.\n *\n * @constructor\n */\nfunction MultiMap(Container) {\n\n  this.Container = Container || Array;\n  this.items = new Map();\n  this.clear();\n\n  Object.defineProperty(this.items, 'constructor', {\n    value: MultiMap,\n    enumerable: false\n  });\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nMultiMap.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n  this.dimension = 0;\n  this.items.clear();\n};\n\n/**\n * Method used to set a value.\n *\n * @param  {any}      key   - Key.\n * @param  {any}      value - Value to add.\n * @return {MultiMap}\n */\nMultiMap.prototype.set = function(key, value) {\n  var container = this.items.get(key),\n      sizeBefore;\n\n  if (!container) {\n    this.dimension++;\n    container = new this.Container();\n    this.items.set(key, container);\n  }\n\n  if (this.Container === Set) {\n    sizeBefore = container.size;\n    container.add(value);\n\n    if (sizeBefore < container.size)\n      this.size++;\n  }\n  else {\n    container.push(value);\n    this.size++;\n  }\n\n  return this;\n};\n\n/**\n * Method used to delete the given key.\n *\n * @param  {any}     key - Key to delete.\n * @return {boolean}\n */\nMultiMap.prototype.delete = function(key) {\n  var container = this.items.get(key);\n\n  if (!container)\n    return false;\n\n  this.size -= (this.Container === Set ? container.size : container.length);\n  this.dimension--;\n  this.items.delete(key);\n\n  return true;\n};\n\n/**\n * Method used to delete the remove an item in the container stored at the\n * given key.\n *\n * @param  {any}     key - Key to delete.\n * @return {boolean}\n */\nMultiMap.prototype.remove = function(key, value) {\n  var container = this.items.get(key),\n      wasDeleted,\n      index;\n\n  if (!container)\n    return false;\n\n  if (this.Container === Set) {\n    wasDeleted = container.delete(value);\n\n    if (wasDeleted)\n      this.size--;\n\n    if (container.size === 0) {\n      this.items.delete(key);\n      this.dimension--;\n    }\n\n    return wasDeleted;\n  }\n  else {\n    index = container.indexOf(value);\n\n    if (index === -1)\n      return false;\n\n    this.size--;\n\n    if (container.length === 1) {\n      this.items.delete(key);\n      this.dimension--;\n\n      return true;\n    }\n\n    container.splice(index, 1);\n\n    return true;\n  }\n};\n\n/**\n * Method used to return whether the given keys exists in the map.\n *\n * @param  {any}     key - Key to check.\n * @return {boolean}\n */\nMultiMap.prototype.has = function(key) {\n  return this.items.has(key);\n};\n\n/**\n * Method used to return the container stored at the given key or `undefined`.\n *\n * @param  {any}     key - Key to get.\n * @return {boolean}\n */\nMultiMap.prototype.get = function(key) {\n  return this.items.get(key);\n};\n\n/**\n * Method used to return the multiplicity of the given key, meaning the number\n * of times it is set, or, more trivially, the size of the attached container.\n *\n * @param  {any}     key - Key to check.\n * @return {number}\n */\nMultiMap.prototype.multiplicity = function(key) {\n  var container = this.items.get(key);\n\n  if (typeof container === 'undefined')\n    return 0;\n\n  return this.Container === Set ? container.size : container.length;\n};\nMultiMap.prototype.count = MultiMap.prototype.multiplicity;\n\n/**\n * Method used to iterate over each of the key/value pairs.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nMultiMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  // Inner iteration function is created here to avoid creating it in the loop\n  var key;\n  function inner(value) {\n    callback.call(scope, value, key);\n  }\n\n  this.items.forEach(function(container, k) {\n    key = k;\n    container.forEach(inner);\n  });\n};\n\n/**\n * Method used to iterate over each of the associations.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nMultiMap.prototype.forEachAssociation = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  this.items.forEach(callback, scope);\n};\n\n/**\n * Method returning an iterator over the map's keys.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.keys = function() {\n  return this.items.keys();\n};\n\n/**\n * Method returning an iterator over the map's keys.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.values = function() {\n  var iterator = this.items.values(),\n      inContainer = false,\n      countainer,\n      step,\n      i,\n      l;\n\n  if (this.Container === Set)\n    return new Iterator(function next() {\n      if (!inContainer) {\n        step = iterator.next();\n\n        if (step.done)\n          return {done: true};\n\n        inContainer = true;\n        countainer = step.value.values();\n      }\n\n      step = countainer.next();\n\n      if (step.done) {\n        inContainer = false;\n        return next();\n      }\n\n      return {\n        done: false,\n        value: step.value\n      };\n    });\n\n  return new Iterator(function next() {\n    if (!inContainer) {\n      step = iterator.next();\n\n      if (step.done)\n        return {done: true};\n\n      inContainer = true;\n      countainer = step.value;\n      i = 0;\n      l = countainer.length;\n    }\n\n    if (i >= l) {\n      inContainer = false;\n      return next();\n    }\n\n    return {\n      done: false,\n      value: countainer[i++]\n    };\n  });\n};\n\n/**\n * Method returning an iterator over the map's entries.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.entries = function() {\n  var iterator = this.items.entries(),\n      inContainer = false,\n      countainer,\n      step,\n      key,\n      i,\n      l;\n\n  if (this.Container === Set)\n    return new Iterator(function next() {\n      if (!inContainer) {\n        step = iterator.next();\n\n        if (step.done)\n          return {done: true};\n\n        inContainer = true;\n        key = step.value[0];\n        countainer = step.value[1].values();\n      }\n\n      step = countainer.next();\n\n      if (step.done) {\n        inContainer = false;\n        return next();\n      }\n\n      return {\n        done: false,\n        value: [key, step.value]\n      };\n    });\n\n  return new Iterator(function next() {\n    if (!inContainer) {\n      step = iterator.next();\n\n      if (step.done)\n        return {done: true};\n\n      inContainer = true;\n      key = step.value[0];\n      countainer = step.value[1];\n      i = 0;\n      l = countainer.length;\n    }\n\n    if (i >= l) {\n      inContainer = false;\n      return next();\n    }\n\n    return {\n      done: false,\n      value: [key, countainer[i++]]\n    };\n  });\n};\n\n/**\n * Method returning an iterator over the map's containers.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.containers = function() {\n  return this.items.values();\n};\n\n/**\n * Method returning an iterator over the map's associations.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.associations = function() {\n  return this.items.entries();\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  MultiMap.prototype[Symbol.iterator] = MultiMap.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nMultiMap.prototype.inspect = function() {\n  return this.items;\n};\n\nif (typeof Symbol !== 'undefined')\n  MultiMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = MultiMap.prototype.inspect;\nMultiMap.prototype.toJSON = function() {\n  return this.items;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable  - Target iterable.\n * @param  {Class}    Container - Container.\n * @return {MultiMap}\n */\nMultiMap.from = function(iterable, Container) {\n  var map = new MultiMap(Container);\n\n  forEach(iterable, function(value, key) {\n    map.set(key, value);\n  });\n\n  return map;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = MultiMap;\n","/**\n * Mnemonist MultiSet\n * ====================\n *\n * JavaScript implementation of a MultiSet.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach'),\n    FixedReverseHeap = require('./fixed-reverse-heap.js');\n\n/**\n * Helpers.\n */\nvar MULTISET_ITEM_COMPARATOR = function(a, b) {\n  if (a[1] > b[1])\n    return -1;\n  if (a[1] < b[1])\n    return 1;\n\n  return 0;\n};\n\n// TODO: helper functions: union, intersection, sum, difference, subtract\n\n/**\n * MultiSet.\n *\n * @constructor\n */\nfunction MultiSet() {\n  this.items = new Map();\n\n  Object.defineProperty(this.items, 'constructor', {\n    value: MultiSet,\n    enumerable: false\n  });\n\n  this.clear();\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nMultiSet.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n  this.dimension = 0;\n  this.items.clear();\n};\n\n/**\n * Method used to add an item to the set.\n *\n * @param  {any}    item  - Item to add.\n * @param  {number} count - Optional count.\n * @return {MultiSet}\n */\nMultiSet.prototype.add = function(item, count) {\n  if (count === 0)\n    return this;\n\n  if (count < 0)\n    return this.remove(item, -count);\n\n  count = count || 1;\n\n  if (typeof count !== 'number')\n    throw new Error('mnemonist/multi-set.add: given count should be a number.');\n\n  this.size += count;\n\n  const currentCount = this.items.get(item);\n\n  if (currentCount === undefined)\n    this.dimension++;\n  else\n    count += currentCount;\n\n  this.items.set(item, count);\n\n  return this;\n};\n\n/**\n * Method used to set the multiplicity of an item in the set.\n *\n * @param  {any}    item  - Target item.\n * @param  {number} count - Desired multiplicity.\n * @return {MultiSet}\n */\nMultiSet.prototype.set = function(item, count) {\n  var currentCount;\n\n  if (typeof count !== 'number')\n    throw new Error('mnemonist/multi-set.set: given count should be a number.');\n\n  // Setting an item to 0 or to a negative number means deleting it from the set\n  if (count <= 0) {\n    currentCount = this.items.get(item);\n\n    if (typeof currentCount !== 'undefined') {\n      this.size -= currentCount;\n      this.dimension--;\n    }\n\n    this.items.delete(item);\n    return this;\n  }\n\n  count = count || 1;\n\n  currentCount = this.items.get(item);\n\n  if (typeof currentCount === 'number') {\n    this.items.set(item, currentCount + count);\n  }\n  else {\n    this.dimension++;\n    this.items.set(item, count);\n  }\n\n  this.size += count;\n\n  return this;\n};\n\n/**\n * Method used to return whether the item exists in the set.\n *\n * @param  {any} item  - Item to check.\n * @return {boolan}\n */\nMultiSet.prototype.has = function(item) {\n  return this.items.has(item);\n};\n\n/**\n * Method used to delete an item from the set.\n *\n * @param  {any} item  - Item to delete.\n * @return {boolan}\n */\nMultiSet.prototype.delete = function(item) {\n  var count = this.items.get(item);\n\n  if (count === 0)\n    return false;\n\n  this.size -= count;\n  this.dimension--;\n  this.items.delete(item);\n\n  return true;\n};\n\n/**\n * Method used to remove an item from the set.\n *\n * @param  {any} item  - Item to delete.\n * @param  {number} count - Optional count.\n * @return {undefined}\n */\nMultiSet.prototype.remove = function(item, count) {\n  if (count === 0)\n    return;\n\n  if (count < 0)\n    return this.add(item, -count);\n\n  count = count || 1;\n\n  if (typeof count !== 'number')\n    throw new Error('mnemonist/multi-set.remove: given count should be a number.');\n\n  var currentCount = this.items.get(item);\n\n  if (typeof currentCount === 'undefined') return;\n\n  var newCount = Math.max(0, currentCount - count);\n\n  if (newCount === 0) {\n    this.items.delete(item);\n    this.size -= currentCount;\n    this.dimension--;\n  }\n  else {\n    this.items.set(item, newCount);\n    this.size -= count;\n  }\n\n  return;\n};\n\n/**\n * Method used to change a key into another one, merging counts if the target\n * key already exists.\n *\n * @param  {any} a - From key.\n * @param  {any} b - To key.\n * @return {MultiSet}\n */\nMultiSet.prototype.edit = function(a, b) {\n  var am = this.multiplicity(a);\n\n  // If a does not exist in the set, we can stop right there\n  if (am === 0)\n    return;\n\n  var bm = this.multiplicity(b);\n\n  this.items.set(b, am + bm);\n  this.items.delete(a);\n\n  return this;\n};\n\n/**\n * Method used to return the multiplicity of the given item.\n *\n * @param  {any} item  - Item to get.\n * @return {number}\n */\nMultiSet.prototype.multiplicity = function(item) {\n  var count = this.items.get(item);\n\n  if (typeof count === 'undefined')\n    return 0;\n\n  return count;\n};\nMultiSet.prototype.get = MultiSet.prototype.multiplicity;\nMultiSet.prototype.count = MultiSet.prototype.multiplicity;\n\n/**\n * Method used to return the frequency of the given item in the set.\n *\n * @param  {any} item - Item to get.\n * @return {number}\n */\nMultiSet.prototype.frequency = function(item) {\n  if (this.size === 0)\n    return 0;\n\n  var count = this.multiplicity(item);\n\n  return count / this.size;\n};\n\n/**\n * Method used to return the n most common items from the set.\n *\n * @param  {number} n - Number of items to retrieve.\n * @return {array}\n */\nMultiSet.prototype.top = function(n) {\n  if (typeof n !== 'number' || n <= 0)\n    throw new Error('mnemonist/multi-set.top: n must be a number > 0.');\n\n  var heap = new FixedReverseHeap(Array, MULTISET_ITEM_COMPARATOR, n);\n\n  var iterator = this.items.entries(),\n      step;\n\n  while ((step = iterator.next(), !step.done))\n    heap.push(step.value);\n\n  return heap.consume();\n};\n\n/**\n * Method used to iterate over the set's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nMultiSet.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var i;\n\n  this.items.forEach(function(multiplicity, value) {\n\n    for (i = 0; i < multiplicity; i++)\n      callback.call(scope, value, value);\n  });\n};\n\n/**\n * Method used to iterate over the set's multiplicities.\n *\n * @param  {function}  callback - Function to call for each multiplicity.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nMultiSet.prototype.forEachMultiplicity = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  this.items.forEach(callback, scope);\n};\n\n/**\n * Method returning an iterator over the set's keys. I.e. its unique values,\n * in a sense.\n *\n * @return {Iterator}\n */\nMultiSet.prototype.keys = function() {\n  return this.items.keys();\n};\n\n/**\n * Method returning an iterator over the set's values.\n *\n * @return {Iterator}\n */\nMultiSet.prototype.values = function() {\n  var iterator = this.items.entries(),\n      inContainer = false,\n      step,\n      value,\n      multiplicity,\n      i;\n\n  return new Iterator(function next() {\n    if (!inContainer) {\n      step = iterator.next();\n\n      if (step.done)\n        return {done: true};\n\n      inContainer = true;\n      value = step.value[0];\n      multiplicity = step.value[1];\n      i = 0;\n    }\n\n    if (i >= multiplicity) {\n      inContainer = false;\n      return next();\n    }\n\n    i++;\n\n    return {\n      done: false,\n      value: value\n    };\n  });\n};\n\n/**\n * Method returning an iterator over the set's multiplicities.\n *\n * @return {Iterator}\n */\nMultiSet.prototype.multiplicities = function() {\n  return this.items.entries();\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  MultiSet.prototype[Symbol.iterator] = MultiSet.prototype.values;\n\n/**\n * Convenience known methods.\n */\nMultiSet.prototype.inspect = function() {\n  return this.items;\n};\n\nif (typeof Symbol !== 'undefined')\n  MultiSet.prototype[Symbol.for('nodejs.util.inspect.custom')] = MultiSet.prototype.inspect;\nMultiSet.prototype.toJSON = function() {\n  return this.items;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @return {MultiSet}\n */\nMultiSet.from = function(iterable) {\n  var set = new MultiSet();\n\n  forEach(iterable, function(value) {\n    set.add(value);\n  });\n\n  return set;\n};\n\n/**\n * Function returning whether the multiset A is a subset of the multiset B.\n *\n * @param  {MultiSet} A - First set.\n * @param  {MultiSet} B - Second set.\n * @return {boolean}\n */\nMultiSet.isSubset = function(A, B) {\n  var iterator = A.multiplicities(),\n      step,\n      key,\n      mA;\n\n  // Shortcuts\n  if (A === B)\n    return true;\n\n  if (A.dimension > B.dimension)\n    return false;\n\n  while ((step = iterator.next(), !step.done)) {\n    key = step.value[0];\n    mA = step.value[1];\n\n    if (B.multiplicity(key) < mA)\n      return false;\n  }\n\n  return true;\n};\n\n/**\n * Function returning whether the multiset A is a superset of the multiset B.\n *\n * @param  {MultiSet} A - First set.\n * @param  {MultiSet} B - Second set.\n * @return {boolean}\n */\nMultiSet.isSuperset = function(A, B) {\n  return MultiSet.isSubset(B, A);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = MultiSet;\n","/**\n * Mnemonist PassjoinIndex\n * ========================\n *\n * The PassjoinIndex is an index leveraging the \"passjoin\" algorithm as a mean\n * to index strings for Levenshtein distance queries. It features a complexity\n * related to the Levenshtein query threshold k rather than the number of\n * strings to test (roughly O(k^3)).\n *\n * [References]:\n * Jiang, Yu, Dong Deng, Jiannan Wang, Guoliang Li, et Jianhua Feng.\n * « Efficient Parallel Partition-Based Algorithms for Similarity Search and Join\n * with Edit Distance Constraints ». In Proceedings of the Joint EDBT/ICDT 2013\n * Workshops on - EDBT ’13, 341. Genoa, Italy: ACM Press, 2013.\n * https://doi.org/10.1145/2457317.2457382.\n *\n * Li, Guoliang, Dong Deng, et Jianhua Feng. « A Partition-Based Method for\n * String Similarity Joins with Edit-Distance Constraints ». ACM Transactions on\n * Database Systems 38, no 2 (1 juin 2013): 1‑33.\n * https://doi.org/10.1145/2487259.2487261.\n *\n * [Urls]:\n * http://people.csail.mit.edu/dongdeng/projects/passjoin/index.html\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n// TODO: leveraging BagDistance as an upper bound of Levenshtein\n// TODO: leverage n-grams recursive indexing\n// TODO: try the MultiArray as a memory backend\n// TODO: what about damerau levenshtein\n\n/**\n * Helpers.\n */\n\n/**\n * Function returning the number of substrings that will be selected by the\n * multi-match-aware selection scheme for theshold `k`, for a string of length\n * `s` to match strings of length `l`.\n *\n * @param   {number} k - Levenshtein distance threshold.\n * @param   {number} s - Length of target strings.\n * @param   {number} l - Length of strings to match.\n * @returns {number}   - The number of selected substrings.\n */\nfunction countSubstringsL(k, s, l) {\n  return (((Math.pow(k, 2) - Math.pow(Math.abs(s - l), 2)) / 2) | 0) + k + 1;\n}\n\n/**\n * Function returning the minimum number of substrings that will be selected by\n * the multi-match-aware selection scheme for theshold `k`, for a string of\n * length `s` to match any string of relevant length.\n *\n * @param   {number} k - Levenshtein distance threshold.\n * @param   {number} s - Length of target strings.\n * @returns {number}   - The number of selected substrings.\n */\nfunction countKeys(k, s) {\n  var c = 0;\n\n  for (var l = 0, m = s + 1; l < m; l++)\n    c += countSubstringsL(k, s, l);\n\n  return c;\n}\n\n/**\n * Function used to compare two keys in order to sort them first by decreasing\n * length and then alphabetically as per the \"4.2 Effective Indexing Strategy\"\n * point of the paper.\n *\n * @param   {number} k - Levenshtein distance threshold.\n * @param   {number} s - Length of target strings.\n * @returns {number}   - The number of selected substrings.\n */\nfunction comparator(a, b) {\n  if (a.length > b.length)\n    return -1;\n  if (a.length < b.length)\n    return 1;\n\n  if (a < b)\n    return -1;\n  if (a > b)\n    return 1;\n\n  return 0;\n}\n\n/**\n * Function partitioning a string into k + 1 uneven segments, the shorter\n * ones, then the longer ones.\n *\n * @param   {number} k - Levenshtein distance threshold.\n * @param   {number} l - Length of the string.\n * @returns {Array}    - The partition tuples (start, length).\n */\nfunction partition(k, l) {\n  var m = k + 1,\n      a = (l / m) | 0,\n      b = a + 1,\n      i,\n      j;\n\n  var largeSegments = l - a * m,\n      smallSegments = m - largeSegments;\n\n  var tuples = new Array(k + 1);\n\n  for (i = 0; i < smallSegments; i++)\n    tuples[i] = [i * a, a];\n\n  var offset = (i - 1) * a + a;\n\n  for (j = 0; j < largeSegments; j++)\n    tuples[i + j] = [offset + j * b, b];\n\n  return tuples;\n}\n\n/**\n * Function yielding a string's k + 1 passjoin segments to index.\n *\n * @param   {number} k      - Levenshtein distance threshold.\n * @param   {string} string - Target string.\n * @returns {Array}         - The string's segments.\n */\nfunction segments(k, string) {\n  var l = string.length,\n      m = k + 1,\n      a = (l / m) | 0,\n      b = a + 1,\n      o,\n      i,\n      j;\n\n  var largeSegments = l - a * m,\n      smallSegments = m - largeSegments;\n\n  var S = new Array(k + 1);\n\n  for (i = 0; i < smallSegments; i++) {\n    o = i * a;\n    S[i] = string.slice(o, o + a);\n  }\n\n  var offset = (i - 1) * a + a;\n\n  for (j = 0; j < largeSegments; j++) {\n    o = offset + j * b;\n    S[i + j] = string.slice(o, o + b);\n  }\n\n  return S;\n}\n\n// TODO: jsdocs\nfunction segmentPos(k, i, string) {\n  if (i === 0)\n    return 0;\n\n  var l = string.length;\n\n  var m = k + 1,\n      a = (l / m) | 0,\n      b = a + 1;\n\n  var largeSegments = l - a * m,\n      smallSegments = m - largeSegments;\n\n  if (i <= smallSegments - 1)\n    return i * a;\n\n  var offset = i - smallSegments;\n\n  return smallSegments * a + offset * b;\n}\n\n/**\n * Function returning the interval of relevant substrings to lookup using the\n * multi-match-aware substring selection scheme described in the paper.\n *\n * @param   {number} k      - Levenshtein distance threshold.\n * @param   {number} delta  - Signed length difference between both considered strings.\n * @param   {number} i      - k + 1 segment index.\n * @param   {number} s      - String's length.\n * @param   {number} pi     - k + 1 segment position in target string.\n * @param   {number} li     - k + 1 segment length.\n * @returns {Array}         - The interval (start, stop).\n */\nfunction multiMatchAwareInterval(k, delta, i, s, pi, li) {\n  var start1 = pi - i,\n      end1 = pi + i;\n\n  var o = k - i;\n\n  var start2 = pi + delta - o,\n      end2 = pi + delta + o;\n\n  var end3 = s - li;\n\n  return [Math.max(0, start1, start2), Math.min(end1, end2, end3)];\n}\n\n/**\n * Function yielding relevant substrings to lookup using the multi-match-aware\n * substring selection scheme described in the paper.\n *\n * @param   {number} k      - Levenshtein distance threshold.\n * @param   {string} string  - Target string.\n * @param   {number} l      - Length of strings to match.\n * @param   {number} i      - k + 1 segment index.\n * @param   {number} pi     - k + 1 segment position in target string.\n * @param   {number} li     - k + 1 segment length.\n * @returns {Array}         - The contiguous substrings.\n */\nfunction multiMatchAwareSubstrings(k, string, l, i, pi, li) {\n  var s = string.length;\n\n  // Note that we need to keep the non-absolute delta for this function\n  // to work in both directions, up & down\n  var delta = s - l;\n\n  var interval = multiMatchAwareInterval(k, delta, i, s, pi, li);\n\n  var start = interval[0],\n      stop = interval[1];\n\n  var currentSubstring = '';\n\n  var substrings = [];\n\n  var substring, j, m;\n\n  for (j = start, m = stop + 1; j < m; j++) {\n    substring = string.slice(j, j + li);\n\n    // We skip identical consecutive substrings (to avoid repetition in case\n    // of contiguous letter duplication)\n    if (substring === currentSubstring)\n      continue;\n\n    substrings.push(substring);\n\n    currentSubstring = substring;\n  }\n\n  return substrings;\n}\n\n/**\n * PassjoinIndex.\n *\n * @note I tried to apply the paper's optimizations regarding Levenshtein\n * distance computations but it did not provide a performance boost, quite\n * the contrary. This is because since we are mostly using the index for small k\n * here, most of the strings we work on are quite small and the bookkeeping\n * induced by Ukkonen's method and the paper's one are slowing us down more than\n * they actually help us go faster.\n *\n * @note This implementation does not try to ensure that you add the same string\n * more than once.\n *\n * @constructor\n * @param {function} levenshtein - Levenshtein distance function.\n * @param {number}   k           - Levenshtein distance threshold.\n */\nfunction PassjoinIndex(levenshtein, k) {\n  if (typeof levenshtein !== 'function')\n    throw new Error('mnemonist/passjoin-index: `levenshtein` should be a function returning edit distance between two strings.');\n\n  if (typeof k !== 'number' || k < 1)\n    throw new Error('mnemonist/passjoin-index: `k` should be a number > 0');\n\n  this.levenshtein = levenshtein;\n  this.k = k;\n  this.clear();\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nPassjoinIndex.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n  this.strings = [];\n  this.invertedIndices = {};\n};\n\n/**\n * Method used to add a new value to the index.\n *\n * @param  {string|Array} value - Value to add.\n * @return {PassjoinIndex}\n */\nPassjoinIndex.prototype.add = function(value) {\n  var l = value.length;\n\n  var stringIndex = this.size;\n\n  this.strings.push(value);\n  this.size++;\n\n  var S = segments(this.k, value);\n\n  var Ll = this.invertedIndices[l];\n\n  if (typeof Ll === 'undefined') {\n    Ll = {};\n    this.invertedIndices[l] = Ll;\n  }\n\n  var segment,\n      matches,\n      key,\n      i,\n      m;\n\n  for (i = 0, m = S.length; i < m; i++) {\n    segment = S[i];\n    key = segment + i;\n    matches = Ll[key];\n\n    if (typeof matches === 'undefined') {\n      matches = [stringIndex];\n      Ll[key] = matches;\n    }\n    else {\n      matches.push(stringIndex);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Method used to search for string matching the given query.\n *\n * @param  {string|Array} query - Query string.\n * @return {Array}\n */\nPassjoinIndex.prototype.search = function(query) {\n  var s = query.length,\n      k = this.k;\n\n  var M = new Set();\n\n  var candidates,\n      candidate,\n      queryPos,\n      querySegmentLength,\n      key,\n      S,\n      P,\n      l,\n      m,\n      i,\n      n1,\n      j,\n      n2,\n      y,\n      n3;\n\n  for (l = Math.max(0, s - k), m = s + k + 1; l < m; l++) {\n    var Ll = this.invertedIndices[l];\n\n    if (typeof Ll === 'undefined')\n      continue;\n\n    P = partition(k, l);\n\n    for (i = 0, n1 = P.length; i < n1; i++) {\n      queryPos = P[i][0];\n      querySegmentLength = P[i][1];\n\n      S = multiMatchAwareSubstrings(\n        k,\n        query,\n        l,\n        i,\n        queryPos,\n        querySegmentLength\n      );\n\n      // Empty string edge case\n      if (!S.length)\n        S = [''];\n\n      for (j = 0, n2 = S.length; j < n2; j++) {\n        key = S[j] + i;\n        candidates = Ll[key];\n\n        if (typeof candidates === 'undefined')\n          continue;\n\n        for (y = 0, n3 = candidates.length; y < n3; y++) {\n          candidate = this.strings[candidates[y]];\n\n          // NOTE: first condition is here not to compute Levenshtein\n          // distance for tiny strings\n\n          // NOTE: maintaining a Set of rejected candidate is not really useful\n          // because it consumes more memory and because non-matches are\n          // less likely to be candidates agains\n          if (\n            s <= k && l <= k ||\n            (\n              !M.has(candidate) &&\n              this.levenshtein(query, candidate) <= k\n            )\n          )\n            M.add(candidate);\n        }\n      }\n    }\n  }\n\n  return M;\n};\n\n/**\n * Method used to iterate over the index.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nPassjoinIndex.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0, l = this.strings.length; i < l; i++)\n    callback.call(scope, this.strings[i], i, this);\n};\n\n/**\n * Method used to create an iterator over a index's values.\n *\n * @return {Iterator}\n */\nPassjoinIndex.prototype.values = function() {\n  var strings = this.strings,\n      l = strings.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = strings[i];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  PassjoinIndex.prototype[Symbol.iterator] = PassjoinIndex.prototype.values;\n\n/**\n * Convenience known methods.\n */\nPassjoinIndex.prototype.inspect = function() {\n  var array = this.strings.slice();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: PassjoinIndex,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  PassjoinIndex.prototype[Symbol.for('nodejs.util.inspect.custom')] = PassjoinIndex.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @return {PassjoinIndex}\n */\nPassjoinIndex.from = function(iterable, levenshtein, k) {\n  var index = new PassjoinIndex(levenshtein, k);\n\n  forEach(iterable, function(string) {\n    index.add(string);\n  });\n\n  return index;\n};\n\n/**\n * Exporting.\n */\nPassjoinIndex.countKeys = countKeys;\nPassjoinIndex.comparator = comparator;\nPassjoinIndex.partition = partition;\nPassjoinIndex.segments = segments;\nPassjoinIndex.segmentPos = segmentPos;\nPassjoinIndex.multiMatchAwareInterval = multiMatchAwareInterval;\nPassjoinIndex.multiMatchAwareSubstrings = multiMatchAwareSubstrings;\n\nmodule.exports = PassjoinIndex;\n","/**\n * Mnemonist Queue\n * ================\n *\n * Queue implementation based on the ideas of Queue.js that seems to beat\n * a LinkedList one in performance.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n/**\n * Queue\n *\n * @constructor\n */\nfunction Queue() {\n  this.clear();\n}\n\n/**\n * Method used to clear the queue.\n *\n * @return {undefined}\n */\nQueue.prototype.clear = function() {\n\n  // Properties\n  this.items = [];\n  this.offset = 0;\n  this.size = 0;\n};\n\n/**\n * Method used to add an item to the queue.\n *\n * @param  {any}    item - Item to enqueue.\n * @return {number}\n */\nQueue.prototype.enqueue = function(item) {\n\n  this.items.push(item);\n  return ++this.size;\n};\n\n/**\n * Method used to retrieve & remove the first item of the queue.\n *\n * @return {any}\n */\nQueue.prototype.dequeue = function() {\n  if (!this.size)\n    return;\n\n  var item = this.items[this.offset];\n\n  if (++this.offset * 2 >= this.items.length) {\n    this.items = this.items.slice(this.offset);\n    this.offset = 0;\n  }\n\n  this.size--;\n\n  return item;\n};\n\n/**\n * Method used to retrieve the first item of the queue.\n *\n * @return {any}\n */\nQueue.prototype.peek = function() {\n  if (!this.size)\n    return;\n\n  return this.items[this.offset];\n};\n\n/**\n * Method used to iterate over the queue.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nQueue.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = this.offset, j = 0, l = this.items.length; i < l; i++, j++)\n    callback.call(scope, this.items[i], j, this);\n};\n\n/*\n * Method used to convert the queue to a JavaScript array.\n *\n * @return {array}\n */\nQueue.prototype.toArray = function() {\n  return this.items.slice(this.offset);\n};\n\n/**\n * Method used to create an iterator over a queue's values.\n *\n * @return {Iterator}\n */\nQueue.prototype.values = function() {\n  var items = this.items,\n      i = this.offset;\n\n  return new Iterator(function() {\n    if (i >= items.length)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a queue's entries.\n *\n * @return {Iterator}\n */\nQueue.prototype.entries = function() {\n  var items = this.items,\n      i = this.offset,\n      j = 0;\n\n  return new Iterator(function() {\n    if (i >= items.length)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n    i++;\n\n    return {\n      value: [j++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  Queue.prototype[Symbol.iterator] = Queue.prototype.values;\n\n/**\n * Convenience known methods.\n */\nQueue.prototype.toString = function() {\n  return this.toArray().join(',');\n};\n\nQueue.prototype.toJSON = function() {\n  return this.toArray();\n};\n\nQueue.prototype.inspect = function() {\n  var array = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: Queue,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  Queue.prototype[Symbol.for('nodejs.util.inspect.custom')] = Queue.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a queue.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {Queue}\n */\nQueue.from = function(iterable) {\n  var queue = new Queue();\n\n  forEach(iterable, function(value) {\n    queue.enqueue(value);\n  });\n\n  return queue;\n};\n\n/**\n * Static @.of function taking an arbitrary number of arguments & converting it\n * into a queue.\n *\n * @param  {...any} args\n * @return {Queue}\n */\nQueue.of = function() {\n  return Queue.from(arguments);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Queue;\n","/**\n * Mnemonist Set\n * ==============\n *\n * Useful function related to sets such as union, intersection and so on...\n */\n\n// TODO: optimize versions for less variadicities\n\n/**\n * Variadic function computing the intersection of multiple sets.\n *\n * @param  {...Set} sets - Sets to intersect.\n * @return {Set}         - The intesection.\n */\nexports.intersection = function() {\n  if (arguments.length < 2)\n    throw new Error('mnemonist/Set.intersection: needs at least two arguments.');\n\n  var I = new Set();\n\n  // First we need to find the smallest set\n  var smallestSize = Infinity,\n      smallestSet = null;\n\n  var s, i, l = arguments.length;\n\n  for (i = 0; i < l; i++) {\n    s = arguments[i];\n\n    // If one of the set has no items, we can stop right there\n    if (s.size === 0)\n      return I;\n\n    if (s.size < smallestSize) {\n      smallestSize = s.size;\n      smallestSet = s;\n    }\n  }\n\n  // Now we need to intersect this set with the others\n  var iterator = smallestSet.values(),\n      step,\n      item,\n      add,\n      set;\n\n  // TODO: we can optimize by iterating each next time over the current intersection\n  // but this probably means more RAM to consume since we'll create n-1 sets rather than\n  // only the one.\n  while ((step = iterator.next(), !step.done)) {\n    item = step.value;\n    add = true;\n\n    for (i = 0; i < l; i++) {\n      set = arguments[i];\n\n      if (set === smallestSet)\n        continue;\n\n      if (!set.has(item)) {\n        add = false;\n        break;\n      }\n    }\n\n    if (add)\n      I.add(item);\n  }\n\n  return I;\n};\n\n/**\n * Variadic function computing the union of multiple sets.\n *\n * @param  {...Set} sets - Sets to unite.\n * @return {Set}         - The union.\n */\nexports.union = function() {\n  if (arguments.length < 2)\n    throw new Error('mnemonist/Set.union: needs at least two arguments.');\n\n  var U = new Set();\n\n  var i, l = arguments.length;\n\n  var iterator,\n      step;\n\n  for (i = 0; i < l; i++) {\n    iterator = arguments[i].values();\n\n    while ((step = iterator.next(), !step.done))\n      U.add(step.value);\n  }\n\n  return U;\n};\n\n/**\n * Function computing the difference between two sets.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {Set}   - The difference.\n */\nexports.difference = function(A, B) {\n\n  // If first set is empty\n  if (!A.size)\n    return new Set();\n\n  if (!B.size)\n    return new Set(A);\n\n  var D = new Set();\n\n  var iterator = A.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!B.has(step.value))\n      D.add(step.value);\n  }\n\n  return D;\n};\n\n/**\n * Function computing the symmetric difference between two sets.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {Set}   - The symmetric difference.\n */\nexports.symmetricDifference = function(A, B) {\n  var S = new Set();\n\n  var iterator = A.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!B.has(step.value))\n      S.add(step.value);\n  }\n\n  iterator = B.values();\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!A.has(step.value))\n      S.add(step.value);\n  }\n\n  return S;\n};\n\n/**\n * Function returning whether A is a subset of B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {boolean}\n */\nexports.isSubset = function(A, B) {\n  var iterator = A.values(),\n      step;\n\n  // Shortcuts\n  if (A === B)\n    return true;\n\n  if (A.size > B.size)\n    return false;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!B.has(step.value))\n      return false;\n  }\n\n  return true;\n};\n\n/**\n * Function returning whether A is a superset of B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {boolean}\n */\nexports.isSuperset = function(A, B) {\n  return exports.isSubset(B, A);\n};\n\n/**\n * Function adding the items of set B to the set A.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n */\nexports.add = function(A, B) {\n  var iterator = B.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done))\n    A.add(step.value);\n\n  return;\n};\n\n/**\n * Function subtracting the items of set B from the set A.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n */\nexports.subtract = function(A, B) {\n  var iterator = B.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done))\n    A.delete(step.value);\n\n  return;\n};\n\n/**\n * Function intersecting the items of A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n */\nexports.intersect = function(A, B) {\n  var iterator = A.values(),\n      step;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!B.has(step.value))\n      A.delete(step.value);\n  }\n\n  return;\n};\n\n/**\n * Function disjuncting the items of A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n */\nexports.disjunct = function(A, B) {\n  var iterator = A.values(),\n      step;\n\n  var toRemove = [];\n\n  while ((step = iterator.next(), !step.done)) {\n    if (B.has(step.value))\n      toRemove.push(step.value);\n  }\n\n  iterator = B.values();\n\n  while ((step = iterator.next(), !step.done)) {\n    if (!A.has(step.value))\n      A.add(step.value);\n  }\n\n  for (var i = 0, l = toRemove.length; i < l; i++)\n    A.delete(toRemove[i]);\n\n  return;\n};\n\n/**\n * Function returning the size of the intersection of A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {number}\n */\nexports.intersectionSize = function(A, B) {\n  var tmp;\n\n  // We need to know the smallest set\n  if (A.size > B.size) {\n    tmp = A;\n    A = B;\n    B = tmp;\n  }\n\n  if (A.size === 0)\n    return 0;\n\n  if (A === B)\n    return A.size;\n\n  var iterator = A.values(),\n      step;\n\n  var I = 0;\n\n  while ((step = iterator.next(), !step.done)) {\n    if (B.has(step.value))\n      I++;\n  }\n\n  return I;\n};\n\n/**\n * Function returning the size of the union of A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {number}\n */\nexports.unionSize = function(A, B) {\n  var I = exports.intersectionSize(A, B);\n\n  return A.size + B.size - I;\n};\n\n/**\n * Function returning the Jaccard similarity between A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {number}\n */\nexports.jaccard = function(A, B) {\n  var I = exports.intersectionSize(A, B);\n\n  if (I === 0)\n    return 0;\n\n  var U = A.size + B.size - I;\n\n  return I / U;\n};\n\n/**\n * Function returning the overlap coefficient between A & B.\n *\n * @param  {Set} A - First set.\n * @param  {Set} B - Second set.\n * @return {number}\n */\nexports.overlap = function(A, B) {\n  var I = exports.intersectionSize(A, B);\n\n  if (I === 0)\n    return 0;\n\n  return I / Math.min(A.size, B.size);\n};\n","/**\n * Mnemonist Quick Sort\n * =====================\n *\n * Quick sort related functions.\n * Adapted from: https://alienryderflex.com/quicksort/\n */\nvar LOS = new Float64Array(64),\n    HIS = new Float64Array(64);\n\nfunction inplaceQuickSort(array, lo, hi) {\n  var p, i, l, r, swap;\n\n  LOS[0] = lo;\n  HIS[0] = hi;\n  i = 0;\n\n  while (i >= 0) {\n    l = LOS[i];\n    r = HIS[i] - 1;\n\n    if (l < r) {\n      p = array[l];\n\n      while (l < r) {\n        while (array[r] >= p && l < r)\n          r--;\n\n        if (l < r)\n          array[l++] = array[r];\n\n        while (array[l] <= p && l < r)\n          l++;\n\n        if (l < r)\n          array[r--] = array[l];\n      }\n\n      array[l] = p;\n      LOS[i + 1] = l + 1;\n      HIS[i + 1] = HIS[i];\n      HIS[i++] = l;\n\n      if (HIS[i] - LOS[i] > HIS[i - 1] - LOS[i - 1]) {\n        swap = LOS[i];\n        LOS[i] = LOS[i - 1];\n        LOS[i - 1] = swap;\n\n        swap = HIS[i];\n        HIS[i] = HIS[i - 1];\n        HIS[i - 1] = swap;\n      }\n    }\n    else {\n      i--;\n    }\n  }\n\n  return array;\n}\n\nexports.inplaceQuickSort = inplaceQuickSort;\n\nfunction inplaceQuickSortIndices(array, indices, lo, hi) {\n  var p, i, l, r, t, swap;\n\n  LOS[0] = lo;\n  HIS[0] = hi;\n  i = 0;\n\n  while (i >= 0) {\n    l = LOS[i];\n    r = HIS[i] - 1;\n\n    if (l < r) {\n      t = indices[l];\n      p = array[t];\n\n      while (l < r) {\n        while (array[indices[r]] >= p && l < r)\n          r--;\n\n        if (l < r)\n          indices[l++] = indices[r];\n\n        while (array[indices[l]] <= p && l < r)\n          l++;\n\n        if (l < r)\n          indices[r--] = indices[l];\n      }\n\n      indices[l] = t;\n      LOS[i + 1] = l + 1;\n      HIS[i + 1] = HIS[i];\n      HIS[i++] = l;\n\n      if (HIS[i] - LOS[i] > HIS[i - 1] - LOS[i - 1]) {\n        swap = LOS[i];\n        LOS[i] = LOS[i - 1];\n        LOS[i - 1] = swap;\n\n        swap = HIS[i];\n        HIS[i] = HIS[i - 1];\n        HIS[i - 1] = swap;\n      }\n    }\n    else {\n      i--;\n    }\n  }\n\n  return indices;\n}\n\nexports.inplaceQuickSortIndices = inplaceQuickSortIndices;\n","/**\n * Mnemonist SparseMap\n * ====================\n *\n * JavaScript sparse map implemented on top of byte arrays.\n *\n * [Reference]: https://research.swtch.com/sparse\n */\nvar Iterator = require('obliterator/iterator'),\n    getPointerArray = require('./utils/typed-arrays.js').getPointerArray;\n\n/**\n * SparseMap.\n *\n * @constructor\n */\nfunction SparseMap(Values, length) {\n  if (arguments.length < 2) {\n    length = Values;\n    Values = Array;\n  }\n\n  var ByteArray = getPointerArray(length);\n\n  // Properties\n  this.size = 0;\n  this.length = length;\n  this.dense = new ByteArray(length);\n  this.sparse = new ByteArray(length);\n  this.vals = new Values(length);\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nSparseMap.prototype.clear = function() {\n  this.size = 0;\n};\n\n/**\n * Method used to check the existence of a member in the set.\n *\n * @param  {number} member - Member to test.\n * @return {SparseMap}\n */\nSparseMap.prototype.has = function(member) {\n  var index = this.sparse[member];\n\n  return (\n    index < this.size &&\n    this.dense[index] === member\n  );\n};\n\n/**\n * Method used to get the value associated to a member in the set.\n *\n * @param  {number} member - Member to test.\n * @return {any}\n */\nSparseMap.prototype.get = function(member) {\n  var index = this.sparse[member];\n\n  if (index < this.size && this.dense[index] === member)\n    return this.vals[index];\n\n  return;\n};\n\n/**\n * Method used to set a value into the map.\n *\n * @param  {number} member - Member to set.\n * @param  {any}    value  - Associated value.\n * @return {SparseMap}\n */\nSparseMap.prototype.set = function(member, value) {\n  var index = this.sparse[member];\n\n  if (index < this.size && this.dense[index] === member) {\n    this.vals[index] = value;\n    return this;\n  }\n\n  this.dense[this.size] = member;\n  this.sparse[member] = this.size;\n  this.vals[this.size] = value;\n  this.size++;\n\n  return this;\n};\n\n/**\n * Method used to remove a member from the set.\n *\n * @param  {number} member - Member to delete.\n * @return {boolean}\n */\nSparseMap.prototype.delete = function(member) {\n  var index = this.sparse[member];\n\n  if (index >= this.size || this.dense[index] !== member)\n    return false;\n\n  index = this.dense[this.size - 1];\n  this.dense[this.sparse[member]] = index;\n  this.sparse[index] = this.sparse[member];\n  this.size--;\n\n  return true;\n};\n\n/**\n * Method used to iterate over the set's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nSparseMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0; i < this.size; i++)\n    callback.call(scope, this.vals[i], this.dense[i]);\n};\n\n/**\n * Method used to create an iterator over a set's members.\n *\n * @return {Iterator}\n */\nSparseMap.prototype.keys = function() {\n  var size = this.size,\n      dense = this.dense,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = dense[i];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\nSparseMap.prototype.values = function() {\n  var size = this.size,\n      values = this.vals,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = values[i];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a set's entries.\n *\n * @return {Iterator}\n */\nSparseMap.prototype.entries = function() {\n  var size = this.size,\n      dense = this.dense,\n      values = this.vals,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = [dense[i], values[i]];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  SparseMap.prototype[Symbol.iterator] = SparseMap.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nSparseMap.prototype.inspect = function() {\n  var proxy = new Map();\n\n  for (var i = 0; i < this.size; i++)\n    proxy.set(this.dense[i], this.vals[i]);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: SparseMap,\n    enumerable: false\n  });\n\n  proxy.length = this.length;\n\n  if (this.vals.constructor !== Array)\n    proxy.type = this.vals.constructor.name;\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  SparseMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = SparseMap.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = SparseMap;\n","/**\n * Mnemonist SparseQueueSet\n * =========================\n *\n * JavaScript sparse queue set implemented on top of byte arrays.\n *\n * [Reference]: https://research.swtch.com/sparse\n */\nvar Iterator = require('obliterator/iterator'),\n    getPointerArray = require('./utils/typed-arrays.js').getPointerArray;\n\n/**\n * SparseQueueSet.\n *\n * @constructor\n */\nfunction SparseQueueSet(capacity) {\n\n  var ByteArray = getPointerArray(capacity);\n\n  // Properties\n  this.start = 0;\n  this.size = 0;\n  this.capacity = capacity;\n  this.dense = new ByteArray(capacity);\n  this.sparse = new ByteArray(capacity);\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nSparseQueueSet.prototype.clear = function() {\n  this.start = 0;\n  this.size = 0;\n};\n\n/**\n * Method used to check the existence of a member in the queue.\n *\n * @param  {number} member - Member to test.\n * @return {SparseQueueSet}\n */\nSparseQueueSet.prototype.has = function(member) {\n  if (this.size === 0)\n    return false;\n\n  var index = this.sparse[member];\n\n  var inBounds = (\n    index < this.capacity &&\n    (\n      index >= this.start &&\n      index < this.start + this.size\n    ) ||\n    (\n      index < ((this.start + this.size) % this.capacity)\n    )\n  );\n\n  return (\n    inBounds &&\n    this.dense[index] === member\n  );\n};\n\n/**\n * Method used to add a member to the queue.\n *\n * @param  {number} member - Member to add.\n * @return {SparseQueueSet}\n */\nSparseQueueSet.prototype.enqueue = function(member) {\n  var index = this.sparse[member];\n\n  if (this.size !== 0) {\n    var inBounds = (\n      index < this.capacity &&\n      (\n        index >= this.start &&\n        index < this.start + this.size\n      ) ||\n      (\n        index < ((this.start + this.size) % this.capacity)\n      )\n    );\n\n    if (inBounds && this.dense[index] === member)\n      return this;\n  }\n\n  index = (this.start + this.size) % this.capacity;\n\n  this.dense[index] = member;\n  this.sparse[member] = index;\n  this.size++;\n\n  return this;\n};\n\n/**\n * Method used to remove the next member from the queue.\n *\n * @param  {number} member - Member to delete.\n * @return {boolean}\n */\nSparseQueueSet.prototype.dequeue = function() {\n  if (this.size === 0)\n    return;\n\n  var index = this.start;\n\n  this.size--;\n  this.start++;\n\n  if (this.start === this.capacity)\n    this.start = 0;\n\n  var member = this.dense[index];\n\n  this.sparse[member] = this.capacity;\n\n  return member;\n};\n\n/**\n * Method used to iterate over the queue's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nSparseQueueSet.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  while (j < l) {\n    callback.call(scope, this.dense[i], j, this);\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n  }\n};\n\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\nSparseQueueSet.prototype.values = function() {\n  var dense = this.dense,\n      c = this.capacity,\n      l = this.size,\n      i = this.start,\n      j = 0;\n\n  return new Iterator(function() {\n    if (j >= l)\n      return {\n        done: true\n      };\n\n    var value = dense[i];\n\n    i++;\n    j++;\n\n    if (i === c)\n      i = 0;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  SparseQueueSet.prototype[Symbol.iterator] = SparseQueueSet.prototype.values;\n\n/**\n * Convenience known methods.\n */\nSparseQueueSet.prototype.inspect = function() {\n  var proxy = [];\n\n  this.forEach(function(member) {\n    proxy.push(member);\n  });\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: SparseQueueSet,\n    enumerable: false\n  });\n\n  proxy.capacity = this.capacity;\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  SparseQueueSet.prototype[Symbol.for('nodejs.util.inspect.custom')] = SparseQueueSet.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = SparseQueueSet;\n","/**\n * Mnemonist SparseSet\n * ====================\n *\n * JavaScript sparse set implemented on top of byte arrays.\n *\n * [Reference]: https://research.swtch.com/sparse\n */\nvar Iterator = require('obliterator/iterator'),\n    getPointerArray = require('./utils/typed-arrays.js').getPointerArray;\n\n/**\n * SparseSet.\n *\n * @constructor\n */\nfunction SparseSet(length) {\n\n  var ByteArray = getPointerArray(length);\n\n  // Properties\n  this.size = 0;\n  this.length = length;\n  this.dense = new ByteArray(length);\n  this.sparse = new ByteArray(length);\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nSparseSet.prototype.clear = function() {\n  this.size = 0;\n};\n\n/**\n * Method used to check the existence of a member in the set.\n *\n * @param  {number} member - Member to test.\n * @return {SparseSet}\n */\nSparseSet.prototype.has = function(member) {\n  var index = this.sparse[member];\n\n  return (\n    index < this.size &&\n    this.dense[index] === member\n  );\n};\n\n/**\n * Method used to add a member to the set.\n *\n * @param  {number} member - Member to add.\n * @return {SparseSet}\n */\nSparseSet.prototype.add = function(member) {\n  var index = this.sparse[member];\n\n  if (index < this.size && this.dense[index] === member)\n    return this;\n\n  this.dense[this.size] = member;\n  this.sparse[member] = this.size;\n  this.size++;\n\n  return this;\n};\n\n/**\n * Method used to remove a member from the set.\n *\n * @param  {number} member - Member to delete.\n * @return {boolean}\n */\nSparseSet.prototype.delete = function(member) {\n  var index = this.sparse[member];\n\n  if (index >= this.size || this.dense[index] !== member)\n    return false;\n\n  index = this.dense[this.size - 1];\n  this.dense[this.sparse[member]] = index;\n  this.sparse[index] = this.sparse[member];\n  this.size--;\n\n  return true;\n};\n\n/**\n * Method used to iterate over the set's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nSparseSet.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  var item;\n\n  for (var i = 0; i < this.size; i++) {\n    item = this.dense[i];\n\n    callback.call(scope, item, item);\n  }\n};\n\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\nSparseSet.prototype.values = function() {\n  var size = this.size,\n      dense = this.dense,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = dense[i];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  SparseSet.prototype[Symbol.iterator] = SparseSet.prototype.values;\n\n/**\n * Convenience known methods.\n */\nSparseSet.prototype.inspect = function() {\n  var proxy = new Set();\n\n  for (var i = 0; i < this.size; i++)\n    proxy.add(this.dense[i]);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: SparseSet,\n    enumerable: false\n  });\n\n  proxy.length = this.length;\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  SparseSet.prototype[Symbol.for('nodejs.util.inspect.custom')] = SparseSet.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = SparseSet;\n","/**\n * Mnemonist Stack\n * ================\n *\n * Stack implementation relying on JavaScript arrays, which are fast enough &\n * correctly optimized for this kind of work.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n/**\n * Stack\n *\n * @constructor\n */\nfunction Stack() {\n  this.clear();\n}\n\n/**\n * Method used to clear the stack.\n *\n * @return {undefined}\n */\nStack.prototype.clear = function() {\n\n  // Properties\n  this.items = [];\n  this.size = 0;\n};\n\n/**\n * Method used to add an item to the stack.\n *\n * @param  {any}    item - Item to add.\n * @return {number}\n */\nStack.prototype.push = function(item) {\n  this.items.push(item);\n  return ++this.size;\n};\n\n/**\n * Method used to retrieve & remove the last item of the stack.\n *\n * @return {any}\n */\nStack.prototype.pop = function() {\n  if (this.size === 0)\n    return;\n\n  this.size--;\n  return this.items.pop();\n};\n\n/**\n * Method used to get the last item of the stack.\n *\n * @return {any}\n */\nStack.prototype.peek = function() {\n  return this.items[this.size - 1];\n};\n\n/**\n * Method used to iterate over the stack.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nStack.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0, l = this.items.length; i < l; i++)\n    callback.call(scope, this.items[l - i - 1], i, this);\n};\n\n/**\n * Method used to convert the stack to a JavaScript array.\n *\n * @return {array}\n */\nStack.prototype.toArray = function() {\n  var array = new Array(this.size),\n      l = this.size - 1,\n      i = this.size;\n\n  while (i--)\n    array[i] = this.items[l - i];\n\n  return array;\n};\n\n/**\n * Method used to create an iterator over a stack's values.\n *\n * @return {Iterator}\n */\nStack.prototype.values = function() {\n  var items = this.items,\n      l = items.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[l - i - 1];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a stack's entries.\n *\n * @return {Iterator}\n */\nStack.prototype.entries = function() {\n  var items = this.items,\n      l = items.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[l - i - 1];\n\n    return {\n      value: [i++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  Stack.prototype[Symbol.iterator] = Stack.prototype.values;\n\n\n/**\n * Convenience known methods.\n */\nStack.prototype.toString = function() {\n  return this.toArray().join(',');\n};\n\nStack.prototype.toJSON = function() {\n  return this.toArray();\n};\n\nStack.prototype.inspect = function() {\n  var array = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: Stack,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  Stack.prototype[Symbol.for('nodejs.util.inspect.custom')] = Stack.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a stack.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {Stack}\n */\nStack.from = function(iterable) {\n  var stack = new Stack();\n\n  forEach(iterable, function(value) {\n    stack.push(value);\n  });\n\n  return stack;\n};\n\n/**\n * Static @.of function taking an arbitrary number of arguments & converting it\n * into a stack.\n *\n * @param  {...any} args\n * @return {Stack}\n */\nStack.of = function() {\n  return Stack.from(arguments);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Stack;\n","/* eslint no-constant-condition: 0 */\n/**\n * Mnemonist StaticDisjointSet\n * ============================\n *\n * JavaScript implementation of a static disjoint set (union-find).\n *\n * Note that to remain performant, this implementation needs to know a size\n * beforehand.\n */\nvar helpers = require('./utils/typed-arrays.js');\n\n/**\n * StaticDisjointSet.\n *\n * @constructor\n */\nfunction StaticDisjointSet(size) {\n\n  // Optimizing the typed array types\n  var ParentsTypedArray = helpers.getPointerArray(size),\n      RanksTypedArray = helpers.getPointerArray(Math.log2(size));\n\n  // Properties\n  this.size = size;\n  this.dimension = size;\n  this.parents = new ParentsTypedArray(size);\n  this.ranks = new RanksTypedArray(size);\n\n  // Initializing parents\n  for (var i = 0; i < size; i++)\n    this.parents[i] = i;\n}\n\n/**\n * Method used to find the root of the given item.\n *\n * @param  {number} x - Target item.\n * @return {number}\n */\nStaticDisjointSet.prototype.find = function(x) {\n  var y = x;\n\n  var c, p;\n\n  while (true) {\n    c = this.parents[y];\n\n    if (y === c)\n      break;\n\n    y = c;\n  }\n\n  // Path compression\n  while (true) {\n    p = this.parents[x];\n\n    if (p === y)\n      break;\n\n    this.parents[x] = y;\n    x = p;\n  }\n\n  return y;\n};\n\n/**\n * Method used to perform the union of two items.\n *\n * @param  {number} x - First item.\n * @param  {number} y - Second item.\n * @return {StaticDisjointSet}\n */\nStaticDisjointSet.prototype.union = function(x, y) {\n  var xRoot = this.find(x),\n      yRoot = this.find(y);\n\n  // x and y are already in the same set\n  if (xRoot === yRoot)\n    return this;\n\n  this.dimension--;\n\n  // x and y are not in the same set, we merge them\n  var xRank = this.ranks[x],\n      yRank = this.ranks[y];\n\n  if (xRank < yRank) {\n    this.parents[xRoot] = yRoot;\n  }\n  else if (xRank > yRank) {\n    this.parents[yRoot] = xRoot;\n  }\n  else {\n    this.parents[yRoot] = xRoot;\n    this.ranks[xRoot]++;\n  }\n\n  return this;\n};\n\n/**\n * Method returning whether two items are connected.\n *\n * @param  {number} x - First item.\n * @param  {number} y - Second item.\n * @return {boolean}\n */\nStaticDisjointSet.prototype.connected = function(x, y) {\n  var xRoot = this.find(x);\n\n  return xRoot === this.find(y);\n};\n\n/**\n * Method returning the set mapping.\n *\n * @return {TypedArray}\n */\nStaticDisjointSet.prototype.mapping = function() {\n  var MappingClass = helpers.getPointerArray(this.dimension);\n\n  var ids = {},\n      mapping = new MappingClass(this.size),\n      c = 0;\n\n  var r;\n\n  for (var i = 0, l = this.parents.length; i < l; i++) {\n    r = this.find(i);\n\n    if (typeof ids[r] === 'undefined') {\n      mapping[i] = c;\n      ids[r] = c++;\n    }\n    else {\n      mapping[i] = ids[r];\n    }\n  }\n\n  return mapping;\n};\n\n/**\n * Method used to compile the disjoint set into an array of arrays.\n *\n * @return {array}\n */\nStaticDisjointSet.prototype.compile = function() {\n  var ids = {},\n      result = new Array(this.dimension),\n      c = 0;\n\n  var r;\n\n  for (var i = 0, l = this.parents.length; i < l; i++) {\n    r = this.find(i);\n\n    if (typeof ids[r] === 'undefined') {\n      result[c] = [i];\n      ids[r] = c++;\n    }\n    else {\n      result[ids[r]].push(i);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Convenience known methods.\n */\nStaticDisjointSet.prototype.inspect = function() {\n  var array = this.compile();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: StaticDisjointSet,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  StaticDisjointSet.prototype[Symbol.for('nodejs.util.inspect.custom')] = StaticDisjointSet.prototype.inspect;\n\n\n/**\n * Exporting.\n */\nmodule.exports = StaticDisjointSet;\n","/*\n * Mnemonist StaticIntervalTree\n * =============================\n *\n * JavaScript implementation of a static interval tree. This tree is static in\n * that you are required to know all its items beforehand and to built it\n * from an iterable.\n *\n * This implementation represents the interval tree as an augmented balanced\n * binary search tree. It works by sorting the intervals by startpoint first\n * then proceeds building the augmented balanced BST bottom-up from the\n * sorted list.\n *\n * Note that this implementation considers every given intervals as closed for\n * simplicity's sake.\n *\n * For more information: https://en.wikipedia.org/wiki/Interval_tree\n */\nvar iterables = require('./utils/iterables.js'),\n    typed = require('./utils/typed-arrays.js');\n\nvar FixedStack = require('./fixed-stack.js');\n\n\n// TODO: pass index to getters\n// TODO: custom comparison\n// TODO: possibility to pass offset buffer\n\n// TODO: intervals() => Symbol.iterator\n// TODO: dfs()\n\n/**\n * Helpers.\n */\n\n/**\n * Recursive function building the BST from the sorted list of interval\n * indices.\n *\n * @param  {array}    intervals     - Array of intervals to index.\n * @param  {function} endGetter     - Getter function for end of intervals.\n * @param  {array}    sortedIndices - Sorted indices of the intervals.\n * @param  {array}    tree          - BST memory.\n * @param  {array}    augmentations - Array of node augmentations.\n * @param  {number}   i             - BST index of current node.\n * @param  {number}   low           - Dichotomy low index.\n * @param  {number}   high          - Dichotomy high index.\n * @return {number}                 - Created node augmentation value.\n */\nfunction buildBST(\n  intervals,\n  endGetter,\n  sortedIndices,\n  tree,\n  augmentations,\n  i,\n  low,\n  high\n) {\n  var mid = (low + (high - low) / 2) | 0,\n      midMinusOne = ~-mid,\n      midPlusOne = -~mid;\n\n  var current = sortedIndices[mid];\n  tree[i] = current + 1;\n\n  var end = endGetter ? endGetter(intervals[current]) : intervals[current][1];\n\n  var left = i * 2 + 1,\n      right = i * 2 + 2;\n\n  var leftEnd = -Infinity,\n      rightEnd = -Infinity;\n\n  if (low <= midMinusOne) {\n    leftEnd = buildBST(\n      intervals,\n      endGetter,\n      sortedIndices,\n      tree,\n      augmentations,\n      left,\n      low,\n      midMinusOne\n    );\n  }\n\n  if (midPlusOne <= high) {\n    rightEnd = buildBST(\n      intervals,\n      endGetter,\n      sortedIndices,\n      tree,\n      augmentations,\n      right,\n      midPlusOne,\n      high\n    );\n  }\n\n  var augmentation = Math.max(end, leftEnd, rightEnd);\n\n  var augmentationPointer = current;\n\n  if (augmentation === leftEnd)\n    augmentationPointer = augmentations[tree[left] - 1];\n  else if (augmentation === rightEnd)\n    augmentationPointer = augmentations[tree[right] - 1];\n\n  augmentations[current] = augmentationPointer;\n\n  return augmentation;\n}\n\n/**\n * StaticIntervalTree.\n *\n * @constructor\n * @param {array}           intervals - Array of intervals to index.\n * @param {array<function>} getters   - Optional getters.\n */\nfunction StaticIntervalTree(intervals, getters) {\n\n  // Properties\n  this.size = intervals.length;\n  this.intervals = intervals;\n\n  var startGetter = null,\n      endGetter = null;\n\n  if (Array.isArray(getters)) {\n    startGetter = getters[0];\n    endGetter = getters[1];\n  }\n\n  // Building the indices array\n  var length = intervals.length;\n\n  var IndicesArray = typed.getPointerArray(length + 1);\n\n  var indices = new IndicesArray(length);\n\n  var i;\n\n  for (i = 1; i < length; i++)\n    indices[i] = i;\n\n  // Sorting indices array\n  // TODO: check if some version of radix sort can outperform this part\n  indices.sort(function(a, b) {\n    a = intervals[a];\n    b = intervals[b];\n\n    if (startGetter) {\n      a = startGetter(a);\n      b = startGetter(b);\n    }\n    else {\n      a = a[0];\n      b = b[0];\n    }\n\n    if (a < b)\n      return -1;\n\n    if (a > b)\n      return 1;\n\n    // TODO: use getters\n    // TODO: this ordering has the following invariant: if query interval\n    // contains [nodeStart, max], then whole right subtree can be collected\n    // a = a[1];\n    // b = b[1];\n\n    // if (a < b)\n    //   return 1;\n\n    // if (a > b)\n    //   return -1;\n\n    return 0;\n  });\n\n  // Building the binary tree\n  var height = Math.ceil(Math.log2(length + 1)),\n      treeSize = Math.pow(2, height) - 1;\n\n  var tree = new IndicesArray(treeSize);\n\n  var augmentations = new IndicesArray(length);\n\n  buildBST(\n    intervals,\n    endGetter,\n    indices,\n    tree,\n    augmentations,\n    0,\n    0,\n    length - 1\n  );\n\n  // Dropping indices\n  indices = null;\n\n  // Storing necessary information\n  this.height = height;\n  this.tree = tree;\n  this.augmentations = augmentations;\n  this.startGetter = startGetter;\n  this.endGetter = endGetter;\n\n  // Initializing DFS stack\n  this.stack = new FixedStack(IndicesArray, this.height);\n}\n\n/**\n * Method returning a list of intervals containing the given point.\n *\n * @param  {any}   point - Target point.\n * @return {array}\n */\nStaticIntervalTree.prototype.intervalsContainingPoint = function(point) {\n  var matches = [];\n\n  var stack = this.stack;\n\n  stack.clear();\n  stack.push(0);\n\n  var l = this.tree.length;\n\n  var bstIndex,\n      intervalIndex,\n      interval,\n      maxInterval,\n      start,\n      end,\n      max,\n      left,\n      right;\n\n  while (stack.size) {\n    bstIndex = stack.pop();\n    intervalIndex = this.tree[bstIndex] - 1;\n    interval = this.intervals[intervalIndex];\n    maxInterval = this.intervals[this.augmentations[intervalIndex]];\n\n    max = this.endGetter ? this.endGetter(maxInterval) : maxInterval[1];\n\n    // No possible match, point is farther right than the max end value\n    if (point > max)\n      continue;\n\n    // Searching left\n    left = bstIndex * 2 + 1;\n\n    if (left < l && this.tree[left] !== 0)\n      stack.push(left);\n\n    start = this.startGetter ? this.startGetter(interval) : interval[0];\n    end = this.endGetter ? this.endGetter(interval) : interval[1];\n\n    // Checking current node\n    if (point >= start && point <= end)\n      matches.push(interval);\n\n    // If the point is to the left of the start of the current interval,\n    // then it cannot be in the right child\n    if (point < start)\n      continue;\n\n    // Searching right\n    right = bstIndex * 2 + 2;\n\n    if (right < l && this.tree[right] !== 0)\n      stack.push(right);\n  }\n\n  return matches;\n};\n\n/**\n * Method returning a list of intervals overlapping the given interval.\n *\n * @param  {any}   interval - Target interval.\n * @return {array}\n */\nStaticIntervalTree.prototype.intervalsOverlappingInterval = function(interval) {\n  var intervalStart = this.startGetter ? this.startGetter(interval) : interval[0],\n      intervalEnd = this.endGetter ? this.endGetter(interval) : interval[1];\n\n  var matches = [];\n\n  var stack = this.stack;\n\n  stack.clear();\n  stack.push(0);\n\n  var l = this.tree.length;\n\n  var bstIndex,\n      intervalIndex,\n      currentInterval,\n      maxInterval,\n      start,\n      end,\n      max,\n      left,\n      right;\n\n  while (stack.size) {\n    bstIndex = stack.pop();\n    intervalIndex = this.tree[bstIndex] - 1;\n    currentInterval = this.intervals[intervalIndex];\n    maxInterval = this.intervals[this.augmentations[intervalIndex]];\n\n    max = this.endGetter ? this.endGetter(maxInterval) : maxInterval[1];\n\n    // No possible match, start is farther right than the max end value\n    if (intervalStart > max)\n      continue;\n\n    // Searching left\n    left = bstIndex * 2 + 1;\n\n    if (left < l && this.tree[left] !== 0)\n      stack.push(left);\n\n    start = this.startGetter ? this.startGetter(currentInterval) : currentInterval[0];\n    end = this.endGetter ? this.endGetter(currentInterval) : currentInterval[1];\n\n    // Checking current node\n    if (intervalEnd >= start && intervalStart <= end)\n      matches.push(currentInterval);\n\n    // If the end is to the left of the start of the current interval,\n    // then it cannot be in the right child\n    if (intervalEnd < start)\n      continue;\n\n    // Searching right\n    right = bstIndex * 2 + 2;\n\n    if (right < l && this.tree[right] !== 0)\n      stack.push(right);\n  }\n\n  return matches;\n};\n\n/**\n * Convenience known methods.\n */\nStaticIntervalTree.prototype.inspect = function() {\n  var proxy = this.intervals.slice();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: StaticIntervalTree,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  StaticIntervalTree.prototype[Symbol.for('nodejs.util.inspect.custom')] = StaticIntervalTree.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @return {StaticIntervalTree}\n */\nStaticIntervalTree.from = function(iterable, getters) {\n  if (iterables.isArrayLike(iterable))\n    return new StaticIntervalTree(iterable, getters);\n\n  return new StaticIntervalTree(Array.from(iterable), getters);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = StaticIntervalTree;\n","/**\n * Mnemonist Suffix Array\n * =======================\n *\n * Linear time implementation of a suffix array using the recursive\n * method by Karkkainen and Sanders.\n *\n * [References]:\n * https://www.cs.helsinki.fi/u/tpkarkka/publications/jacm05-revised.pdf\n * http://people.mpi-inf.mpg.de/~sanders/programs/suffix/\n * http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.184.442&rep=rep1&type=pdf\n *\n * [Article]:\n * \"Simple Linear Work Suffix Array Construction\", Karkkainen and Sanders.\n *\n * [Note]:\n * A paper by Simon J. Puglisi, William F. Smyth & Andrew Turpin named\n * \"The Performance of Linear Time Suffix Sorting Algorithms\" seems to\n * prove that supralinear algorithm are in fact better faring for\n * \"real\" world use cases. It would be nice to check this out in JavaScript\n * because the high level of the language could change a lot to the fact.\n *\n * The current code is largely inspired by the following:\n * https://github.com/tixxit/suffixarray/blob/master/suffixarray.js\n */\n\n/**\n * Constants.\n */\nvar SEPARATOR = '\\u0001';\n\n/**\n * Function used to sort the triples.\n *\n * @param {string|array} string - Padded sequence.\n * @param {array}        array  - Array to sort (will be mutated).\n * @param {number}       offset - Index offset.\n */\nfunction sort(string, array, offset) {\n  var l = array.length,\n      buckets = [],\n      i = l,\n      j = -1,\n      b,\n      d = 0,\n      bits;\n\n  while (i--)\n    j = Math.max(string[array[i] + offset], j);\n\n  bits = j >> 24 && 32 || j >> 16 && 24 || j >> 8 && 16 || 8;\n\n  for (; d < bits; d += 4) {\n    for (i = 16; i--;)\n      buckets[i] = [];\n    for (i = l; i--;)\n      buckets[((string[array[i] + offset]) >> d) & 15].push(array[i]);\n    for (b = 0; b < 16; b++) {\n      for (j = buckets[b].length; j--;)\n        array[++i] = buckets[b][j];\n    }\n  }\n}\n\n/**\n * Comparison helper.\n */\nfunction compare(string, lookup, m, n) {\n  return (\n    (string[m] - string[n]) ||\n    (m % 3 === 2 ?\n      (string[m + 1] - string[n + 1]) || (lookup[m + 2] - lookup[n + 2]) :\n      (lookup[m + 1] - lookup[n + 1]))\n  );\n}\n\n/**\n * Recursive function used to build the suffix tree in linear time.\n *\n * @param  {string|array} string - Padded sequence.\n * @param  {number}       l      - True length of sequence (unpadded).\n * @return {array}\n */\nfunction build(string, l) {\n  var a = [],\n      b = [],\n      al = (2 * l / 3) | 0,\n      bl = l - al,\n      r = (al + 1) >> 1,\n      i = al,\n      j = 0,\n      k,\n      lookup = [],\n      result = [];\n\n  if (l === 1)\n    return [0];\n\n  while (i--)\n    a[i] = ((i * 3) >> 1) + 1;\n\n  for (i = 3; i--;)\n    sort(string, a, i);\n\n  j = b[((a[0] / 3) | 0) + (a[0] % 3 === 1 ? 0 : r)] = 1;\n\n  for (i = 1; i < al; i++) {\n    if (string[a[i]] !== string[a[i - 1]] ||\n        string[a[i] + 1] !== string[a[i - 1] + 1] ||\n        string[a[i] + 2] !== string[a[i - 1] + 2])\n      j++;\n\n    b[((a[i] / 3) | 0) + (a[i] % 3 === 1 ? 0 : r)] = j;\n  }\n\n  if (j < al) {\n    b = build(b, al);\n\n    for (i = al; i--;)\n      a[i] = b[i] < r ? b[i] * 3 + 1 : ((b[i] - r) * 3 + 2);\n  }\n\n  for (i = al; i--;)\n    lookup[a[i]] = i;\n  lookup[l] = -1;\n  lookup[l + 1] = -2;\n\n  b = l % 3 === 1 ? [l - 1] : [];\n\n  for (i = 0; i < al; i++) {\n    if (a[i] % 3 === 1)\n      b.push(a[i] - 1);\n  }\n\n  sort(string, b, 0);\n\n  for (i = 0, j = 0, k = 0; i < al && j < bl;)\n    result[k++] = (\n      compare(string, lookup, a[i], b[j]) < 0 ?\n        a[i++] :\n        b[j++]\n    );\n\n  while (i < al)\n    result[k++] = a[i++];\n\n  while (j < bl)\n    result[k++] = b[j++];\n\n  return result;\n}\n\n/**\n * Function used to create the array we are going to work on.\n *\n * @param  {string|array} target - Target sequence.\n * @return {array}\n */\nfunction convert(target) {\n\n  // Creating the alphabet array\n  var length = target.length,\n      paddingOffset = length % 3,\n      array = new Array(length + paddingOffset),\n      l,\n      i;\n\n  // If we have an arbitrary sequence, we need to transform it\n  if (typeof target !== 'string') {\n    var uniqueTokens = Object.create(null);\n\n    for (i = 0; i < length; i++) {\n      if (!uniqueTokens[target[i]])\n        uniqueTokens[target[i]] = true;\n    }\n\n    var alphabet = Object.create(null),\n        sortedUniqueTokens = Object.keys(uniqueTokens).sort();\n\n    for (i = 0, l = sortedUniqueTokens.length; i < l; i++)\n      alphabet[sortedUniqueTokens[i]] = i + 1;\n\n    for (i = 0; i < length; i++) {\n      array[i] = alphabet[target[i]];\n    }\n  }\n  else {\n    for (i = 0; i < length; i++)\n      array[i] = target.charCodeAt(i);\n  }\n\n  // Padding the array\n  for (i = length; i < length + paddingOffset; i++)\n    array[i] = 0;\n\n  return array;\n}\n\n/**\n * Suffix Array.\n *\n * @constructor\n * @param {string|array} string - Sequence for which to build the suffix array.\n */\nfunction SuffixArray(string) {\n\n  // Properties\n  this.hasArbitrarySequence = typeof string !== 'string';\n  this.string = string;\n  this.length = string.length;\n\n  // Building the array\n  this.array = build(convert(string), this.length);\n}\n\n/**\n * Convenience known methods.\n */\nSuffixArray.prototype.toString = function() {\n  return this.array.join(',');\n};\n\nSuffixArray.prototype.toJSON = function() {\n  return this.array;\n};\n\nSuffixArray.prototype.inspect = function() {\n  var array = new Array(this.length);\n\n  for (var i = 0; i < this.length; i++)\n    array[i] = this.string.slice(this.array[i]);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: SuffixArray,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  SuffixArray.prototype[Symbol.for('nodejs.util.inspect.custom')] = SuffixArray.prototype.inspect;\n\n/**\n * Generalized Suffix Array.\n *\n * @constructor\n */\nfunction GeneralizedSuffixArray(strings) {\n\n  // Properties\n  this.hasArbitrarySequence = typeof strings[0] !== 'string';\n  this.size = strings.length;\n\n  if (this.hasArbitrarySequence) {\n    this.text = [];\n\n    for (var i = 0, l = this.size; i < l; i++) {\n      this.text.push.apply(this.text, strings[i]);\n\n      if (i < l - 1)\n        this.text.push(SEPARATOR);\n    }\n  }\n  else {\n    this.text = strings.join(SEPARATOR);\n  }\n\n  this.firstLength = strings[0].length;\n  this.length = this.text.length;\n\n  // Building the array\n  this.array = build(convert(this.text), this.length);\n}\n\n/**\n * Method used to retrieve the longest common subsequence of the generalized\n * suffix array.\n *\n * @return {string|array}\n */\nGeneralizedSuffixArray.prototype.longestCommonSubsequence = function() {\n  var lcs = this.hasArbitrarySequence ? [] : '',\n      lcp,\n      i,\n      j,\n      s,\n      t;\n\n  for (i = 1; i < this.length; i++) {\n    s = this.array[i];\n    t = this.array[i - 1];\n\n    if (s < this.firstLength &&\n        t < this.firstLength)\n      continue;\n\n    if (s > this.firstLength &&\n        t > this.firstLength)\n      continue;\n\n    lcp = Math.min(this.length - s, this.length - t);\n\n    for (j = 0; j < lcp; j++) {\n      if (this.text[s + j] !== this.text[t + j]) {\n        lcp = j;\n        break;\n      }\n    }\n\n    if (lcp > lcs.length)\n      lcs = this.text.slice(s, s + lcp);\n  }\n\n  return lcs;\n};\n\n/**\n * Convenience known methods.\n */\nGeneralizedSuffixArray.prototype.toString = function() {\n  return this.array.join(',');\n};\n\nGeneralizedSuffixArray.prototype.toJSON = function() {\n  return this.array;\n};\n\nGeneralizedSuffixArray.prototype.inspect = function() {\n  var array = new Array(this.length);\n\n  for (var i = 0; i < this.length; i++)\n    array[i] = this.text.slice(this.array[i]);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: GeneralizedSuffixArray,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  GeneralizedSuffixArray.prototype[Symbol.for('nodejs.util.inspect.custom')] = GeneralizedSuffixArray.prototype.inspect;\n\n/**\n * Exporting.\n */\nSuffixArray.GeneralizedSuffixArray = GeneralizedSuffixArray;\nmodule.exports = SuffixArray;\n","/* eslint no-loop-func: 0 */\n/**\n * Mnemonist SymSpell\n * ===================\n *\n * JavaScript implementation of the Symmetric Delete Spelling dictionary to\n * efficiently index & query expression based on edit distance.\n * Note that the current implementation target the v3.0 of the algorithm.\n *\n * [Reference]:\n * http://blog.faroo.com/2012/06/07/improved-edit-distance-based-spelling-correction/\n * https://github.com/wolfgarbe/symspell\n *\n * [Author]:\n * Wolf Garbe\n */\nvar forEach = require('obliterator/foreach');\n\n/**\n * Constants.\n */\nvar DEFAULT_MAX_DISTANCE = 2,\n    DEFAULT_VERBOSITY = 2;\n\nvar VERBOSITY = new Set([\n  // Returns only the top suggestion\n  0,\n  // Returns suggestions with the smallest edit distance\n  1,\n  // Returns every suggestion (no early termination)\n  2\n]);\n\nvar VERBOSITY_EXPLANATIONS = {\n  0: 'Returns only the top suggestion',\n  1: 'Returns suggestions with the smallest edit distance',\n  2: 'Returns every suggestion (no early termination)'\n};\n\n/**\n * Functions.\n */\n\n/**\n * Function creating a dictionary item.\n *\n * @param  {number} [value] - An optional suggestion.\n * @return {object}         - The created item.\n */\nfunction createDictionaryItem(value) {\n  var suggestions = new Set();\n\n  if (typeof value === 'number')\n    suggestions.add(value);\n\n  return {\n    suggestions,\n    count: 0\n  };\n}\n\n/**\n * Function creating a suggestion item.\n *\n * @return {object} - The created item.\n */\nfunction createSuggestionItem(term, distance, count) {\n  return {\n    term: term || '',\n    distance: distance || 0,\n    count: count || 0\n  };\n}\n\n/**\n * Simplified edit function.\n *\n * @param {string} word      - Target word.\n * @param {number} distance  - Distance.\n * @param {number} max       - Max distance.\n * @param {Set}    [deletes] - Set mutated to store deletes.\n */\nfunction edits(word, distance, max, deletes) {\n  deletes = deletes || new Set();\n  distance++;\n\n  var deletedItem,\n      l = word.length,\n      i;\n\n  if (l > 1) {\n    for (i = 0; i < l; i++) {\n      deletedItem = word.substring(0, i) + word.substring(i + 1);\n\n      if (!deletes.has(deletedItem)) {\n        deletes.add(deletedItem);\n\n        if (distance < max)\n          edits(deletedItem, distance, max, deletes);\n      }\n    }\n  }\n\n  return deletes;\n}\n\n/**\n * Function used to conditionally add suggestions.\n *\n * @param {array}  words       - Words list.\n * @param {number} verbosity   - Verbosity level.\n * @param {object} item        - The target item.\n * @param {string} suggestion  - The target suggestion.\n * @param {number} int         - Integer key of the word.\n * @param {object} deletedItem - Considered deleted item.\n * @param {SymSpell}\n */\nfunction addLowestDistance(words, verbosity, item, suggestion, int, deletedItem) {\n  var first = item.suggestions.values().next().value;\n\n  if (verbosity < 2 &&\n      item.suggestions.size > 0 &&\n      words[first].length - deletedItem.length > suggestion.length - deletedItem.length) {\n    item.suggestions = new Set();\n    item.count = 0;\n  }\n\n  if (verbosity === 2 ||\n      !item.suggestions.size ||\n      words[first].length - deletedItem.length >= suggestion.length - deletedItem.length) {\n    item.suggestions.add(int);\n  }\n}\n\n/**\n * Custom Damerau-Levenshtein used by the algorithm.\n *\n * @param  {string} source - First string.\n * @param  {string} target - Second string.\n * @return {number}        - The distance.\n */\nfunction damerauLevenshtein(source, target) {\n  var m = source.length,\n      n = target.length,\n      H = [[]],\n      INF = m + n,\n      sd = new Map(),\n      i,\n      l,\n      j;\n\n  H[0][0] = INF;\n\n  for (i = 0; i <= m; i++) {\n    if (!H[i + 1])\n      H[i + 1] = [];\n    H[i + 1][1] = i;\n    H[i + 1][0] = INF;\n  }\n\n  for (j = 0; j <= n; j++) {\n    H[1][j + 1] = j;\n    H[0][j + 1] = INF;\n  }\n\n  var st = source + target,\n      letter;\n\n  for (i = 0, l = st.length; i < l; i++) {\n    letter = st[i];\n\n    if (!sd.has(letter))\n      sd.set(letter, 0);\n  }\n\n  // Iterating\n  for (i = 1; i <= m; i++) {\n    var DB = 0;\n\n    for (j = 1; j <= n; j++) {\n      var i1 = sd.get(target[j - 1]),\n          j1 = DB;\n\n      if (source[i - 1] === target[j - 1]) {\n        H[i + 1][j + 1] = H[i][j];\n        DB = j;\n      }\n      else {\n        H[i + 1][j + 1] = Math.min(\n          H[i][j],\n          H[i + 1][j],\n          H[i][j + 1]\n        ) + 1;\n      }\n\n      H[i + 1][j + 1] = Math.min(\n        H[i + 1][j + 1],\n        H[i1][j1] + (i - i1 - 1) + 1 + (j - j1 - 1)\n      );\n    }\n\n    sd.set(source[i - 1], i);\n  }\n\n  return H[m + 1][n + 1];\n}\n\n/**\n * Lookup function.\n *\n * @param  {object} dictionary  - A SymSpell dictionary.\n * @param  {array}  words       - Unique words list.\n * @param  {number} verbosity   - Verbosity level.\n * @param  {number} maxDistance - Maximum distance.\n * @param  {number} maxLength   - Maximum word length in the dictionary.\n * @param  {string} input       - Input string.\n * @return {array}              - The list of suggestions.\n */\nfunction lookup(dictionary, words, verbosity, maxDistance, maxLength, input) {\n  var length = input.length;\n\n  if (length - maxDistance > maxLength)\n    return [];\n\n  var candidates = [input],\n      candidateSet = new Set(),\n      suggestionSet = new Set();\n\n  var suggestions = [],\n      candidate,\n      item;\n\n  // Exhausting every candidates\n  while (candidates.length > 0) {\n    candidate = candidates.shift();\n\n    // Early termination\n    if (\n      verbosity < 2 &&\n      suggestions.length > 0 &&\n      length - candidate.length > suggestions[0].distance\n    )\n      break;\n\n    item = dictionary[candidate];\n\n    if (item !== undefined) {\n      if (typeof item === 'number')\n        item = createDictionaryItem(item);\n\n      if (item.count > 0 && !suggestionSet.has(candidate)) {\n        suggestionSet.add(candidate);\n\n        var suggestItem = createSuggestionItem(\n          candidate,\n          length - candidate.length,\n          item.count\n        );\n\n        suggestions.push(suggestItem);\n\n        // Another early termination\n        if (verbosity < 2 && length - candidate.length === 0)\n          break;\n      }\n\n      // Iterating over the item's suggestions\n      item.suggestions.forEach(index => {\n        var suggestion = words[index];\n\n        // Do we already have this suggestion?\n        if (suggestionSet.has(suggestion))\n          return;\n\n        suggestionSet.add(suggestion);\n\n        // Computing distance between candidate & suggestion\n        var distance = 0;\n\n        if (input !== suggestion) {\n          if (suggestion.length === candidate.length) {\n            distance = length - candidate.length;\n          }\n          else if (length === candidate.length) {\n            distance = suggestion.length - candidate.length;\n          }\n          else {\n            var ii = 0,\n                jj = 0;\n\n            var l = suggestion.length;\n\n            while (\n              ii < l &&\n              ii < length &&\n              suggestion[ii] === input[ii]\n            ) {\n              ii++;\n            }\n\n            while (\n              jj < l - ii &&\n              jj < length &&\n              suggestion[l - jj - 1] === input[length - jj - 1]\n            ) {\n              jj++;\n            }\n\n            if (ii > 0 || jj > 0) {\n              distance = damerauLevenshtein(\n                suggestion.substr(ii, l - ii - jj),\n                input.substr(ii, length - ii - jj)\n              );\n            }\n            else {\n              distance = damerauLevenshtein(suggestion, input);\n            }\n          }\n        }\n\n        // Removing suggestions of higher distance\n        if (verbosity < 2 &&\n            suggestions.length > 0 &&\n            suggestions[0].distance > distance) {\n          suggestions = [];\n        }\n\n        if (verbosity < 2 &&\n            suggestions.length > 0 &&\n            distance > suggestions[0].distance) {\n          return;\n        }\n\n        if (distance <= maxDistance) {\n          var target = dictionary[suggestion];\n\n          if (target !== undefined) {\n            suggestions.push(createSuggestionItem(\n              suggestion,\n              distance,\n              target.count\n            ));\n          }\n        }\n      });\n    }\n\n    // Adding edits\n    if (length - candidate.length < maxDistance) {\n\n      if (verbosity < 2 &&\n          suggestions.length > 0 &&\n          length - candidate.length >= suggestions[0].distance)\n        continue;\n\n      for (var i = 0, l = candidate.length; i < l; i++) {\n        var deletedItem = (\n          candidate.substring(0, i) +\n          candidate.substring(i + 1)\n        );\n\n        if (!candidateSet.has(deletedItem)) {\n          candidateSet.add(deletedItem);\n          candidates.push(deletedItem);\n        }\n      }\n    }\n  }\n\n  if (verbosity === 0)\n    return suggestions.slice(0, 1);\n\n  return suggestions;\n}\n\n/**\n * SymSpell.\n *\n * @constructor\n */\nfunction SymSpell(options) {\n  options = options || {};\n\n  this.clear();\n\n  // Properties\n  this.maxDistance = typeof options.maxDistance === 'number' ?\n    options.maxDistance :\n    DEFAULT_MAX_DISTANCE;\n  this.verbosity = typeof options.verbosity === 'number' ?\n    options.verbosity :\n    DEFAULT_VERBOSITY;\n\n  // Sanity checks\n  if (typeof this.maxDistance !== 'number' || this.maxDistance <= 0)\n    throw Error('mnemonist/SymSpell.constructor: invalid `maxDistance` option. Should be a integer greater than 0.');\n\n  if (!VERBOSITY.has(this.verbosity))\n    throw Error('mnemonist/SymSpell.constructor: invalid `verbosity` option. Should be either 0, 1 or 2.');\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nSymSpell.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n  this.dictionary = Object.create(null);\n  this.maxLength = 0;\n  this.words = [];\n};\n\n/**\n * Method used to add a word to the index.\n *\n * @param {string} word - Word to add.\n * @param {SymSpell}\n */\nSymSpell.prototype.add = function(word) {\n  var item = this.dictionary[word];\n\n  if (item !== undefined) {\n    if (typeof item === 'number') {\n      item = createDictionaryItem(item);\n      this.dictionary[word] = item;\n    }\n\n    item.count++;\n  }\n\n  else {\n    item = createDictionaryItem();\n    item.count++;\n\n    this.dictionary[word] = item;\n\n    if (word.length > this.maxLength)\n      this.maxLength = word.length;\n  }\n\n  if (item.count === 1) {\n    var number = this.words.length;\n    this.words.push(word);\n\n    var deletes = edits(word, 0, this.maxDistance);\n\n    deletes.forEach(deletedItem => {\n      var target = this.dictionary[deletedItem];\n\n      if (target !== undefined) {\n        if (typeof target === 'number') {\n          target = createDictionaryItem(target);\n\n          this.dictionary[deletedItem] = target;\n        }\n\n        if (!target.suggestions.has(number)) {\n          addLowestDistance(\n            this.words,\n            this.verbosity,\n            target,\n            word,\n            number,\n            deletedItem\n          );\n        }\n      }\n      else {\n        this.dictionary[deletedItem] = number;\n      }\n    });\n  }\n\n  this.size++;\n\n  return this;\n};\n\n/**\n * Method used to search the index.\n *\n * @param  {string} input - Input query.\n * @return {array}        - The found suggestions.\n */\nSymSpell.prototype.search = function(input) {\n  return lookup(\n    this.dictionary,\n    this.words,\n    this.verbosity,\n    this.maxDistance,\n    this.maxLength,\n    input\n  );\n};\n\n/**\n * Convenience known methods.\n */\nSymSpell.prototype.inspect = function() {\n  var array = [];\n\n  array.size = this.size;\n  array.maxDistance = this.maxDistance;\n  array.verbosity = this.verbosity;\n  array.behavior = VERBOSITY_EXPLANATIONS[this.verbosity];\n\n  for (var k in this.dictionary) {\n    if (typeof this.dictionary[k] === 'object' && this.dictionary[k].count)\n      array.push([k, this.dictionary[k].count]);\n  }\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: SymSpell,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  SymSpell.prototype[Symbol.for('nodejs.util.inspect.custom')] = SymSpell.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @return {SymSpell}\n */\nSymSpell.from = function(iterable, options) {\n  var index = new SymSpell(options);\n\n  forEach(iterable, function(value) {\n    index.add(value);\n  });\n\n  return index;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = SymSpell;\n","/**\n * Mnemonist TrieMap\n * ==================\n *\n * JavaScript TrieMap implementation based upon plain objects. As such this\n * structure is more a convenience building upon the trie's advantages than\n * a real performant alternative to already existing structures.\n *\n * Note that the Trie is based upon the TrieMap since the underlying machine\n * is the very same. The Trie just does not let you set values and only\n * considers the existence of the given prefixes.\n */\nvar forEach = require('obliterator/foreach'),\n    Iterator = require('obliterator/iterator');\n\n/**\n * Constants.\n */\nvar SENTINEL = String.fromCharCode(0);\n\n/**\n * TrieMap.\n *\n * @constructor\n */\nfunction TrieMap(Token) {\n  this.mode = Token === Array ? 'array' : 'string';\n  this.clear();\n}\n\n/**\n * Method used to clear the trie.\n *\n * @return {undefined}\n */\nTrieMap.prototype.clear = function() {\n\n  // Properties\n  this.root = {};\n  this.size = 0;\n};\n\n/**\n * Method used to set the value of the given prefix in the trie.\n *\n * @param  {string|array} prefix - Prefix to follow.\n * @param  {any}          value  - Value for the prefix.\n * @return {TrieMap}\n */\nTrieMap.prototype.set = function(prefix, value) {\n  var node = this.root,\n      token;\n\n  for (var i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n\n    node = node[token] || (node[token] = {});\n  }\n\n  // Do we need to increase size?\n  if (!(SENTINEL in node))\n    this.size++;\n\n  node[SENTINEL] = value;\n\n  return this;\n};\n\n/**\n * Method used to update the value of the given prefix in the trie.\n *\n * @param  {string|array} prefix - Prefix to follow.\n * @param  {(oldValue: any | undefined) => any} updateFunction - Update value visitor callback.\n * @return {TrieMap}\n */\nTrieMap.prototype.update = function(prefix, updateFunction) {\n  var node = this.root,\n      token;\n\n  for (var i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n\n    node = node[token] || (node[token] = {});\n  }\n\n  // Do we need to increase size?\n  if (!(SENTINEL in node))\n    this.size++;\n\n  node[SENTINEL] = updateFunction(node[SENTINEL]);\n\n  return this;\n};\n\n/**\n * Method used to return the value sitting at the end of the given prefix or\n * undefined if none exist.\n *\n * @param  {string|array} prefix - Prefix to follow.\n * @return {any|undefined}\n */\nTrieMap.prototype.get = function(prefix) {\n  var node = this.root,\n      token,\n      i,\n      l;\n\n  for (i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n    node = node[token];\n\n    // Prefix does not exist\n    if (typeof node === 'undefined')\n      return;\n  }\n\n  if (!(SENTINEL in node))\n    return;\n\n  return node[SENTINEL];\n};\n\n/**\n * Method used to delete a prefix from the trie.\n *\n * @param  {string|array} prefix - Prefix to delete.\n * @return {boolean}\n */\nTrieMap.prototype.delete = function(prefix) {\n  var node = this.root,\n      toPrune = null,\n      tokenToPrune = null,\n      parent,\n      token,\n      i,\n      l;\n\n  for (i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n    parent = node;\n    node = node[token];\n\n    // Prefix does not exist\n    if (typeof node === 'undefined')\n      return false;\n\n    // Keeping track of a potential branch to prune\n    if (toPrune !== null) {\n      if (Object.keys(node).length > 1) {\n        toPrune = null;\n        tokenToPrune = null;\n      }\n    }\n    else {\n      if (Object.keys(node).length < 2) {\n        toPrune = parent;\n        tokenToPrune = token;\n      }\n    }\n  }\n\n  if (!(SENTINEL in node))\n    return false;\n\n  this.size--;\n\n  if (toPrune)\n    delete toPrune[tokenToPrune];\n  else\n    delete node[SENTINEL];\n\n  return true;\n};\n\n// TODO: add #.prune?\n\n/**\n * Method used to assert whether the given prefix exists in the TrieMap.\n *\n * @param  {string|array} prefix - Prefix to check.\n * @return {boolean}\n */\nTrieMap.prototype.has = function(prefix) {\n  var node = this.root,\n      token;\n\n  for (var i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n    node = node[token];\n\n    if (typeof node === 'undefined')\n      return false;\n  }\n\n  return SENTINEL in node;\n};\n\n/**\n * Method used to retrieve every item in the trie with the given prefix.\n *\n * @param  {string|array} prefix - Prefix to query.\n * @return {array}\n */\nTrieMap.prototype.find = function(prefix) {\n  var isString = typeof prefix === 'string';\n\n  var node = this.root,\n      matches = [],\n      token,\n      i,\n      l;\n\n  for (i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n    node = node[token];\n\n    if (typeof node === 'undefined')\n      return matches;\n  }\n\n  // Performing DFS from prefix\n  var nodeStack = [node],\n      prefixStack = [prefix],\n      k;\n\n  while (nodeStack.length) {\n    prefix = prefixStack.pop();\n    node = nodeStack.pop();\n\n    for (k in node) {\n      if (k === SENTINEL) {\n        matches.push([prefix, node[SENTINEL]]);\n        continue;\n      }\n\n      nodeStack.push(node[k]);\n      prefixStack.push(isString ? prefix + k : prefix.concat(k));\n    }\n  }\n\n  return matches;\n};\n\n/**\n * Method returning an iterator over the trie's values.\n *\n * @param  {string|array} [prefix] - Optional starting prefix.\n * @return {Iterator}\n */\nTrieMap.prototype.values = function(prefix) {\n  var node = this.root,\n      nodeStack = [],\n      token,\n      i,\n      l;\n\n  // Resolving initial prefix\n  if (prefix) {\n    for (i = 0, l = prefix.length; i < l; i++) {\n      token = prefix[i];\n      node = node[token];\n\n      // If the prefix does not exist, we return an empty iterator\n      if (typeof node === 'undefined')\n        return Iterator.empty();\n    }\n  }\n\n  nodeStack.push(node);\n\n  return new Iterator(function() {\n    var currentNode,\n        hasValue = false,\n        k;\n\n    while (nodeStack.length) {\n      currentNode = nodeStack.pop();\n\n      for (k in currentNode) {\n        if (k === SENTINEL) {\n          hasValue = true;\n          continue;\n        }\n\n        nodeStack.push(currentNode[k]);\n      }\n\n      if (hasValue)\n        return {done: false, value: currentNode[SENTINEL]};\n    }\n\n    return {done: true};\n  });\n};\n\n/**\n * Method returning an iterator over the trie's prefixes.\n *\n * @param  {string|array} [prefix] - Optional starting prefix.\n * @return {Iterator}\n */\nTrieMap.prototype.prefixes = function(prefix) {\n  var node = this.root,\n      nodeStack = [],\n      prefixStack = [],\n      token,\n      i,\n      l;\n\n  var isString = this.mode === 'string';\n\n  // Resolving initial prefix\n  if (prefix) {\n    for (i = 0, l = prefix.length; i < l; i++) {\n      token = prefix[i];\n      node = node[token];\n\n      // If the prefix does not exist, we return an empty iterator\n      if (typeof node === 'undefined')\n        return Iterator.empty();\n    }\n  }\n  else {\n    prefix = isString ? '' : [];\n  }\n\n  nodeStack.push(node);\n  prefixStack.push(prefix);\n\n  return new Iterator(function() {\n    var currentNode,\n        currentPrefix,\n        hasValue = false,\n        k;\n\n    while (nodeStack.length) {\n      currentNode = nodeStack.pop();\n      currentPrefix = prefixStack.pop();\n\n      for (k in currentNode) {\n        if (k === SENTINEL) {\n          hasValue = true;\n          continue;\n        }\n\n        nodeStack.push(currentNode[k]);\n        prefixStack.push(isString ? currentPrefix + k : currentPrefix.concat(k));\n      }\n\n      if (hasValue)\n        return {done: false, value: currentPrefix};\n    }\n\n    return {done: true};\n  });\n};\nTrieMap.prototype.keys = TrieMap.prototype.prefixes;\n\n/**\n * Method returning an iterator over the trie's entries.\n *\n * @param  {string|array} [prefix] - Optional starting prefix.\n * @return {Iterator}\n */\nTrieMap.prototype.entries = function(prefix) {\n  var node = this.root,\n      nodeStack = [],\n      prefixStack = [],\n      token,\n      i,\n      l;\n\n  var isString = this.mode === 'string';\n\n  // Resolving initial prefix\n  if (prefix) {\n    for (i = 0, l = prefix.length; i < l; i++) {\n      token = prefix[i];\n      node = node[token];\n\n      // If the prefix does not exist, we return an empty iterator\n      if (typeof node === 'undefined')\n        return Iterator.empty();\n    }\n  }\n  else {\n    prefix = isString ? '' : [];\n  }\n\n  nodeStack.push(node);\n  prefixStack.push(prefix);\n\n  return new Iterator(function() {\n    var currentNode,\n        currentPrefix,\n        hasValue = false,\n        k;\n\n    while (nodeStack.length) {\n      currentNode = nodeStack.pop();\n      currentPrefix = prefixStack.pop();\n\n      for (k in currentNode) {\n        if (k === SENTINEL) {\n          hasValue = true;\n          continue;\n        }\n\n        nodeStack.push(currentNode[k]);\n        prefixStack.push(isString ? currentPrefix + k : currentPrefix.concat(k));\n      }\n\n      if (hasValue)\n        return {done: false, value: [currentPrefix, currentNode[SENTINEL]]};\n    }\n\n    return {done: true};\n  });\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  TrieMap.prototype[Symbol.iterator] = TrieMap.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nTrieMap.prototype.inspect = function() {\n  var proxy = new Array(this.size);\n\n  var iterator = this.entries(),\n      step,\n      i = 0;\n\n  while ((step = iterator.next(), !step.done))\n    proxy[i++] = step.value;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: TrieMap,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  TrieMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = TrieMap.prototype.inspect;\n\nTrieMap.prototype.toJSON = function() {\n  return this.root;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a trie.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {TrieMap}\n */\nTrieMap.from = function(iterable) {\n  var trie = new TrieMap();\n\n  forEach(iterable, function(value, key) {\n    trie.set(key, value);\n  });\n\n  return trie;\n};\n\n/**\n * Exporting.\n */\nTrieMap.SENTINEL = SENTINEL;\nmodule.exports = TrieMap;\n","/**\n * Mnemonist Trie\n * ===============\n *\n * JavaScript Trie implementation based upon plain objects. As such this\n * structure is more a convenience building upon the trie's advantages than\n * a real performant alternative to already existing structures.\n *\n * Note that the Trie is based upon the TrieMap since the underlying machine\n * is the very same. The Trie just does not let you set values and only\n * considers the existence of the given prefixes.\n */\nvar forEach = require('obliterator/foreach'),\n    TrieMap = require('./trie-map.js');\n\n/**\n * Constants.\n */\nvar SENTINEL = String.fromCharCode(0);\n\n/**\n * Trie.\n *\n * @constructor\n */\nfunction Trie(Token) {\n  this.mode = Token === Array ? 'array' : 'string';\n  this.clear();\n}\n\n// Re-using TrieMap's prototype\nfor (var methodName in TrieMap.prototype)\n  Trie.prototype[methodName] = TrieMap.prototype[methodName];\n\n// Dropping irrelevant methods\ndelete Trie.prototype.set;\ndelete Trie.prototype.get;\ndelete Trie.prototype.values;\ndelete Trie.prototype.entries;\n\n/**\n * Method used to add the given prefix to the trie.\n *\n * @param  {string|array} prefix - Prefix to follow.\n * @return {TrieMap}\n */\nTrie.prototype.add = function(prefix) {\n  var node = this.root,\n      token;\n\n  for (var i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n\n    node = node[token] || (node[token] = {});\n  }\n\n  // Do we need to increase size?\n  if (!(SENTINEL in node))\n    this.size++;\n\n  node[SENTINEL] = true;\n\n  return this;\n};\n\n/**\n * Method used to retrieve every item in the trie with the given prefix.\n *\n * @param  {string|array} prefix - Prefix to query.\n * @return {array}\n */\nTrie.prototype.find = function(prefix) {\n  var isString = typeof prefix === 'string';\n\n  var node = this.root,\n      matches = [],\n      token,\n      i,\n      l;\n\n  for (i = 0, l = prefix.length; i < l; i++) {\n    token = prefix[i];\n    node = node[token];\n\n    if (typeof node === 'undefined')\n      return matches;\n  }\n\n  // Performing DFS from prefix\n  var nodeStack = [node],\n      prefixStack = [prefix],\n      k;\n\n  while (nodeStack.length) {\n    prefix = prefixStack.pop();\n    node = nodeStack.pop();\n\n    for (k in node) {\n      if (k === SENTINEL) {\n        matches.push(prefix);\n        continue;\n      }\n\n      nodeStack.push(node[k]);\n      prefixStack.push(isString ? prefix + k : prefix.concat(k));\n    }\n  }\n\n  return matches;\n};\n\n/**\n * Attaching the #.keys method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  Trie.prototype[Symbol.iterator] = Trie.prototype.keys;\n\n/**\n * Convenience known methods.\n */\nTrie.prototype.inspect = function() {\n  var proxy = new Set();\n\n  var iterator = this.keys(),\n      step;\n\n  while ((step = iterator.next(), !step.done))\n    proxy.add(step.value);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: Trie,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  Trie.prototype[Symbol.for('nodejs.util.inspect.custom')] = Trie.prototype.inspect;\n\nTrie.prototype.toJSON = function() {\n  return this.root;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a trie.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {Trie}\n */\nTrie.from = function(iterable) {\n  var trie = new Trie();\n\n  forEach(iterable, function(value) {\n    trie.add(value);\n  });\n\n  return trie;\n};\n\n/**\n * Exporting.\n */\nTrie.SENTINEL = SENTINEL;\nmodule.exports = Trie;\n","/**\n * Mnemonist Binary Search Helpers\n * ================================\n *\n * Typical binary search functions.\n */\n\n/**\n * Function returning the index of the search value in the array or `-1` if\n * not found.\n *\n * @param  {array} array - Haystack.\n * @param  {any}   value - Needle.\n * @return {number}\n */\nexports.search = function(array, value, lo, hi) {\n  var mid = 0;\n\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  hi--;\n\n  var current;\n\n  while (lo <= hi) {\n    mid = (lo + hi) >>> 1;\n\n    current = array[mid];\n\n    if (current > value) {\n      hi = ~-mid;\n    }\n    else if (current < value) {\n      lo = -~mid;\n    }\n    else {\n      return mid;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Same as above, but can use a custom comparator function.\n *\n * @param  {function} comparator - Custom comparator function.\n * @param  {array}    array      - Haystack.\n * @param  {any}      value      - Needle.\n * @return {number}\n */\nexports.searchWithComparator = function(comparator, array, value) {\n  var mid = 0,\n      lo = 0,\n      hi = ~-array.length,\n      comparison;\n\n  while (lo <= hi) {\n    mid = (lo + hi) >>> 1;\n\n    comparison = comparator(array[mid], value);\n\n    if (comparison > 0) {\n      hi = ~-mid;\n    }\n    else if (comparison < 0) {\n      lo = -~mid;\n    }\n    else {\n      return mid;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Function returning the lower bound of the given value in the array.\n *\n * @param  {array}  array - Haystack.\n * @param  {any}    value - Needle.\n * @param  {number} [lo] - Start index.\n * @param  {numner} [hi] - End index.\n * @return {number}\n */\nexports.lowerBound = function(array, value, lo, hi) {\n  var mid = 0;\n\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (value <= array[mid]) {\n      hi = mid;\n    }\n    else {\n      lo = -~mid;\n    }\n  }\n\n  return lo;\n};\n\n/**\n * Same as above, but can use a custom comparator function.\n *\n * @param  {function} comparator - Custom comparator function.\n * @param  {array}    array      - Haystack.\n * @param  {any}      value      - Needle.\n * @return {number}\n */\nexports.lowerBoundWithComparator = function(comparator, array, value) {\n  var mid = 0,\n      lo = 0,\n      hi = array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (comparator(value, array[mid]) <= 0) {\n      hi = mid;\n    }\n    else {\n      lo = -~mid;\n    }\n  }\n\n  return lo;\n};\n\n/**\n * Same as above, but can work on sorted indices.\n *\n * @param  {array}    array - Haystack.\n * @param  {array}    array - Indices.\n * @param  {any}      value - Needle.\n * @return {number}\n */\nexports.lowerBoundIndices = function(array, indices, value, lo, hi) {\n  var mid = 0;\n\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (value <= array[indices[mid]]) {\n      hi = mid;\n    }\n    else {\n      lo = -~mid;\n    }\n  }\n\n  return lo;\n};\n\n/**\n * Function returning the upper bound of the given value in the array.\n *\n * @param  {array}  array - Haystack.\n * @param  {any}    value - Needle.\n * @param  {number} [lo] - Start index.\n * @param  {numner} [hi] - End index.\n * @return {number}\n */\nexports.upperBound = function(array, value, lo, hi) {\n  var mid = 0;\n\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (value >= array[mid]) {\n      lo = -~mid;\n    }\n    else {\n      hi = mid;\n    }\n  }\n\n  return lo;\n};\n\n/**\n * Same as above, but can use a custom comparator function.\n *\n * @param  {function} comparator - Custom comparator function.\n * @param  {array}    array      - Haystack.\n * @param  {any}      value      - Needle.\n * @return {number}\n */\nexports.upperBoundWithComparator = function(comparator, array, value) {\n  var mid = 0,\n      lo = 0,\n      hi = array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (comparator(value, array[mid]) >= 0) {\n      lo = -~mid;\n    }\n    else {\n      hi = mid;\n    }\n  }\n\n  return lo;\n};\n","/**\n * Mnemonist Bitwise Helpers\n * ==========================\n *\n * Miscellaneous helpers helping with bitwise operations.\n */\n\n/**\n * Takes a 32 bits integer and returns its MSB using SWAR strategy.\n *\n * @param  {number} x - Target number.\n * @return {number}\n */\nfunction msb32(x) {\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n\n  return (x & ~(x >> 1));\n}\nexports.msb32 = msb32;\n\n/**\n * Takes a byte and returns its MSB using SWAR strategy.\n *\n * @param  {number} x - Target number.\n * @return {number}\n */\nfunction msb8(x) {\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n\n  return (x & ~(x >> 1));\n}\nexports.msb8 = msb8;\n\n/**\n * Takes a number and return bit at position.\n *\n * @param  {number} x   - Target number.\n * @param  {number} pos - Position.\n * @return {number}\n */\nexports.test = function(x, pos) {\n  return (x >> pos) & 1;\n};\n\n/**\n * Compare two bytes and return their critical bit.\n *\n * @param  {number} a - First byte.\n * @param  {number} b - Second byte.\n * @return {number}\n */\nexports.criticalBit8 = function(a, b) {\n  return msb8(a ^ b);\n};\n\nexports.criticalBit8Mask = function(a, b) {\n  return (~msb8(a ^ b) >>> 0) & 0xff;\n};\n\nexports.testCriticalBit8 = function(x, mask) {\n  return (1 + (x | mask)) >> 8;\n};\n\nexports.criticalBit32Mask = function(a, b) {\n  return (~msb32(a ^ b) >>> 0) & 0xffffffff;\n};\n\n/**\n * Takes a 32 bits integer and returns its population count (number of 1 of\n * the binary representation).\n *\n * @param  {number} x - Target number.\n * @return {number}\n */\nexports.popcount = function(x) {\n  x -= x >> 1 & 0x55555555;\n  x = (x & 0x33333333) + (x >> 2 & 0x33333333);\n  x = x + (x >> 4) & 0x0f0f0f0f;\n  x += x >> 8;\n  x += x >> 16;\n  return x & 0x7f;\n};\n\n/**\n * Slightly faster popcount function based on a precomputed table of 8bits\n * words.\n *\n * @param  {number} x - Target number.\n * @return {number}\n */\nvar TABLE8 = new Uint8Array(Math.pow(2, 8));\n\nfor (var i = 0, l = TABLE8.length; i < l; i++)\n  TABLE8[i] = exports.popcount(i);\n\nexports.table8Popcount = function(x) {\n  return (\n    TABLE8[x & 0xff] +\n    TABLE8[(x >> 8) & 0xff] +\n    TABLE8[(x >> 16) & 0xff] +\n    TABLE8[(x >> 24) & 0xff]\n  );\n};\n","/**\n * Mnemonist Heap Comparators\n * ===========================\n *\n * Default comparators & functions dealing with comparators reversing etc.\n */\nvar DEFAULT_COMPARATOR = function(a, b) {\n  if (a < b)\n    return -1;\n  if (a > b)\n    return 1;\n\n  return 0;\n};\n\nvar DEFAULT_REVERSE_COMPARATOR = function(a, b) {\n  if (a < b)\n    return 1;\n  if (a > b)\n    return -1;\n\n  return 0;\n};\n\n/**\n * Function used to reverse a comparator.\n */\nfunction reverseComparator(comparator) {\n  return function(a, b) {\n    return comparator(b, a);\n  };\n}\n\n/**\n * Function returning a tuple comparator.\n */\nfunction createTupleComparator(size) {\n  if (size === 2) {\n    return function(a, b) {\n      if (a[0] < b[0])\n        return -1;\n\n      if (a[0] > b[0])\n        return 1;\n\n      if (a[1] < b[1])\n        return -1;\n\n      if (a[1] > b[1])\n        return 1;\n\n      return 0;\n    };\n  }\n\n  return function(a, b) {\n    var i = 0;\n\n    while (i < size) {\n      if (a[i] < b[i])\n        return -1;\n\n      if (a[i] > b[i])\n        return 1;\n\n      i++;\n    }\n\n    return 0;\n  };\n}\n\n/**\n * Exporting.\n */\nexports.DEFAULT_COMPARATOR = DEFAULT_COMPARATOR;\nexports.DEFAULT_REVERSE_COMPARATOR = DEFAULT_REVERSE_COMPARATOR;\nexports.reverseComparator = reverseComparator;\nexports.createTupleComparator = createTupleComparator;\n","/**\n * Mnemonist Iterable Function\n * ============================\n *\n * Harmonized iteration helpers over mixed iterable targets.\n */\nvar forEach = require('obliterator/foreach');\n\nvar typed = require('./typed-arrays.js');\n\n/**\n * Function used to determine whether the given object supports array-like\n * random access.\n *\n * @param  {any} target - Target object.\n * @return {boolean}\n */\nfunction isArrayLike(target) {\n  return Array.isArray(target) || typed.isTypedArray(target);\n}\n\n/**\n * Function used to guess the length of the structure over which we are going\n * to iterate.\n *\n * @param  {any} target - Target object.\n * @return {number|undefined}\n */\nfunction guessLength(target) {\n  if (typeof target.length === 'number')\n    return target.length;\n\n  if (typeof target.size === 'number')\n    return target.size;\n\n  return;\n}\n\n/**\n * Function used to convert an iterable to an array.\n *\n * @param  {any}   target - Iteration target.\n * @return {array}\n */\nfunction toArray(target) {\n  var l = guessLength(target);\n\n  var array = typeof l === 'number' ? new Array(l) : [];\n\n  var i = 0;\n\n  // TODO: we could optimize when given target is array like\n  forEach(target, function(value) {\n    array[i++] = value;\n  });\n\n  return array;\n}\n\n/**\n * Same as above but returns a supplementary indices array.\n *\n * @param  {any}   target - Iteration target.\n * @return {array}\n */\nfunction toArrayWithIndices(target) {\n  var l = guessLength(target);\n\n  var IndexArray = typeof l === 'number' ?\n    typed.getPointerArray(l) :\n    Array;\n\n  var array = typeof l === 'number' ? new Array(l) : [];\n  var indices = typeof l === 'number' ? new IndexArray(l) : [];\n\n  var i = 0;\n\n  // TODO: we could optimize when given target is array like\n  forEach(target, function(value) {\n    array[i] = value;\n    indices[i] = i++;\n  });\n\n  return [array, indices];\n}\n\n/**\n * Exporting.\n */\nexports.isArrayLike = isArrayLike;\nexports.guessLength = guessLength;\nexports.toArray = toArray;\nexports.toArrayWithIndices = toArrayWithIndices;\n","/* eslint no-constant-condition: 0 */\n/**\n * Mnemonist Merge Helpers\n * ========================\n *\n * Various merge algorithms used to handle sorted lists. Note that the given\n * functions are optimized and won't accept mixed arguments.\n *\n * Note: maybe this piece of code belong to sortilege, along with binary-search.\n */\nvar typed = require('./typed-arrays.js'),\n    isArrayLike = require('./iterables.js').isArrayLike,\n    binarySearch = require('./binary-search.js'),\n    FibonacciHeap = require('../fibonacci-heap.js');\n\n// TODO: update to use exponential search\n// TODO: when not knowing final length => should use plain arrays rather than\n// same type as input\n\n/**\n * Merge two sorted array-like structures into one.\n *\n * @param  {array} a - First array.\n * @param  {array} b - Second array.\n * @return {array}\n */\nfunction mergeArrays(a, b) {\n\n  // One of the arrays is empty\n  if (a.length === 0)\n    return b.slice();\n  if (b.length === 0)\n    return a.slice();\n\n  // Finding min array\n  var tmp;\n\n  if (a[0] > b[0]) {\n    tmp = a;\n    a = b;\n    b = tmp;\n  }\n\n  // If array have non overlapping ranges, we can just concatenate them\n  var aEnd = a[a.length - 1],\n      bStart = b[0];\n\n  if (aEnd <= bStart) {\n    if (typed.isTypedArray(a))\n      return typed.concat(a, b);\n    return a.concat(b);\n  }\n\n  // Initializing target\n  var array = new a.constructor(a.length + b.length);\n\n  // Iterating until we overlap\n  var i, l, v;\n\n  for (i = 0, l = a.length; i < l; i++) {\n    v = a[i];\n\n    if (v <= bStart)\n      array[i] = v;\n    else\n      break;\n  }\n\n  // Handling overlap\n  var aPointer = i,\n      aLength = a.length,\n      bPointer = 0,\n      bLength = b.length,\n      aHead,\n      bHead;\n\n  while (aPointer < aLength && bPointer < bLength) {\n    aHead = a[aPointer];\n    bHead = b[bPointer];\n\n    if (aHead <= bHead) {\n      array[i++] = aHead;\n      aPointer++;\n    }\n    else {\n      array[i++] = bHead;\n      bPointer++;\n    }\n  }\n\n  // Filling\n  while (aPointer < aLength)\n    array[i++] = a[aPointer++];\n  while (bPointer < bLength)\n    array[i++] = b[bPointer++];\n\n  return array;\n}\n\n/**\n * Perform the union of two already unique sorted array-like structures into one.\n *\n * @param  {array} a - First array.\n * @param  {array} b - Second array.\n * @return {array}\n */\nfunction unionUniqueArrays(a, b) {\n\n  // One of the arrays is empty\n  if (a.length === 0)\n    return b.slice();\n  if (b.length === 0)\n    return a.slice();\n\n  // Finding min array\n  var tmp;\n\n  if (a[0] > b[0]) {\n    tmp = a;\n    a = b;\n    b = tmp;\n  }\n\n  // If array have non overlapping ranges, we can just concatenate them\n  var aEnd = a[a.length - 1],\n      bStart = b[0];\n\n  if (aEnd < bStart) {\n    if (typed.isTypedArray(a))\n      return typed.concat(a, b);\n    return a.concat(b);\n  }\n\n  // Initializing target\n  var array = new a.constructor();\n\n  // Iterating until we overlap\n  var i, l, v;\n\n  for (i = 0, l = a.length; i < l; i++) {\n    v = a[i];\n\n    if (v < bStart)\n      array.push(v);\n    else\n      break;\n  }\n\n  // Handling overlap\n  var aPointer = i,\n      aLength = a.length,\n      bPointer = 0,\n      bLength = b.length,\n      aHead,\n      bHead;\n\n  while (aPointer < aLength && bPointer < bLength) {\n    aHead = a[aPointer];\n    bHead = b[bPointer];\n\n    if (aHead <= bHead) {\n\n      if (array.length === 0 || array[array.length - 1] !== aHead)\n        array.push(aHead);\n\n      aPointer++;\n    }\n    else {\n      if (array.length === 0 || array[array.length - 1] !== bHead)\n        array.push(bHead);\n\n      bPointer++;\n    }\n  }\n\n  // Filling\n  // TODO: it's possible to optimize a bit here, since the condition is only\n  // relevant the first time\n  while (aPointer < aLength) {\n    aHead = a[aPointer++];\n\n    if (array.length === 0 || array[array.length - 1] !== aHead)\n      array.push(aHead);\n  }\n  while (bPointer < bLength) {\n    bHead = b[bPointer++];\n\n    if (array.length === 0 || array[array.length - 1] !== bHead)\n      array.push(bHead);\n  }\n\n  return array;\n}\n\n/**\n * Perform the intersection of two already unique sorted array-like structures into one.\n *\n * @param  {array} a - First array.\n * @param  {array} b - Second array.\n * @return {array}\n */\nexports.intersectionUniqueArrays = function(a, b) {\n\n  // One of the arrays is empty\n  if (a.length === 0 || b.length === 0)\n    return new a.constructor(0);\n\n  // Finding min array\n  var tmp;\n\n  if (a[0] > b[0]) {\n    tmp = a;\n    a = b;\n    b = tmp;\n  }\n\n  // If array have non overlapping ranges, there is no intersection\n  var aEnd = a[a.length - 1],\n      bStart = b[0];\n\n  if (aEnd < bStart)\n    return new a.constructor(0);\n\n  // Initializing target\n  var array = new a.constructor();\n\n  // Handling overlap\n  var aPointer = binarySearch.lowerBound(a, bStart),\n      aLength = a.length,\n      bPointer = 0,\n      bLength = binarySearch.upperBound(b, aEnd),\n      aHead,\n      bHead;\n\n  while (aPointer < aLength && bPointer < bLength) {\n    aHead = a[aPointer];\n    bHead = b[bPointer];\n\n    if (aHead < bHead) {\n      aPointer = binarySearch.lowerBound(a, bHead, aPointer + 1);\n    }\n    else if (aHead > bHead) {\n      bPointer = binarySearch.lowerBound(b, aHead, bPointer + 1);\n    }\n    else {\n      array.push(aHead);\n      aPointer++;\n      bPointer++;\n    }\n  }\n\n  return array;\n};\n\n/**\n * Merge k sorted array-like structures into one.\n *\n * @param  {array<array>} arrays - Arrays to merge.\n * @return {array}\n */\nfunction kWayMergeArrays(arrays) {\n  var length = 0,\n      max = -Infinity,\n      al,\n      i,\n      l;\n\n  var filtered = [];\n\n  for (i = 0, l = arrays.length; i < l; i++) {\n    al = arrays[i].length;\n\n    if (al === 0)\n      continue;\n\n    filtered.push(arrays[i]);\n\n    length += al;\n\n    if (al > max)\n      max = al;\n  }\n\n  if (filtered.length === 0)\n    return new arrays[0].constructor(0);\n\n  if (filtered.length === 1)\n    return filtered[0].slice();\n\n  if (filtered.length === 2)\n    return mergeArrays(filtered[0], filtered[1]);\n\n  arrays = filtered;\n\n  var array = new arrays[0].constructor(length);\n\n  var PointerArray = typed.getPointerArray(max);\n\n  var pointers = new PointerArray(arrays.length);\n\n  // TODO: benchmark vs. a binomial heap\n  var heap = new FibonacciHeap(function(a, b) {\n    a = arrays[a][pointers[a]];\n    b = arrays[b][pointers[b]];\n\n    if (a < b)\n      return -1;\n\n    if (a > b)\n      return 1;\n\n    return 0;\n  });\n\n  for (i = 0; i < l; i++)\n    heap.push(i);\n\n  i = 0;\n\n  var p,\n      v;\n\n  while (heap.size) {\n    p = heap.pop();\n    v = arrays[p][pointers[p]++];\n    array[i++] = v;\n\n    if (pointers[p] < arrays[p].length)\n      heap.push(p);\n  }\n\n  return array;\n}\n\n/**\n * Perform the union of k sorted unique array-like structures into one.\n *\n * @param  {array<array>} arrays - Arrays to merge.\n * @return {array}\n */\nfunction kWayUnionUniqueArrays(arrays) {\n  var max = -Infinity,\n      al,\n      i,\n      l;\n\n  var filtered = [];\n\n  for (i = 0, l = arrays.length; i < l; i++) {\n    al = arrays[i].length;\n\n    if (al === 0)\n      continue;\n\n    filtered.push(arrays[i]);\n\n    if (al > max)\n      max = al;\n  }\n\n  if (filtered.length === 0)\n    return new arrays[0].constructor(0);\n\n  if (filtered.length === 1)\n    return filtered[0].slice();\n\n  if (filtered.length === 2)\n    return unionUniqueArrays(filtered[0], filtered[1]);\n\n  arrays = filtered;\n\n  var array = new arrays[0].constructor();\n\n  var PointerArray = typed.getPointerArray(max);\n\n  var pointers = new PointerArray(arrays.length);\n\n  // TODO: benchmark vs. a binomial heap\n  var heap = new FibonacciHeap(function(a, b) {\n    a = arrays[a][pointers[a]];\n    b = arrays[b][pointers[b]];\n\n    if (a < b)\n      return -1;\n\n    if (a > b)\n      return 1;\n\n    return 0;\n  });\n\n  for (i = 0; i < l; i++)\n    heap.push(i);\n\n  var p,\n      v;\n\n  while (heap.size) {\n    p = heap.pop();\n    v = arrays[p][pointers[p]++];\n\n    if (array.length === 0 || array[array.length - 1] !== v)\n      array.push(v);\n\n    if (pointers[p] < arrays[p].length)\n      heap.push(p);\n  }\n\n  return array;\n}\n\n/**\n * Perform the intersection of k sorted array-like structures into one.\n *\n * @param  {array<array>} arrays - Arrays to merge.\n * @return {array}\n */\nexports.kWayIntersectionUniqueArrays = function(arrays) {\n  var max = -Infinity,\n      maxStart = -Infinity,\n      minEnd = Infinity,\n      first,\n      last,\n      al,\n      i,\n      l;\n\n  for (i = 0, l = arrays.length; i < l; i++) {\n    al = arrays[i].length;\n\n    // If one of the arrays is empty, so is the intersection\n    if (al === 0)\n      return [];\n\n    if (al > max)\n      max = al;\n\n    first = arrays[i][0];\n    last = arrays[i][al - 1];\n\n    if (first > maxStart)\n      maxStart = first;\n\n    if (last < minEnd)\n      minEnd = last;\n  }\n\n  // Full overlap is impossible\n  if (maxStart > minEnd)\n    return [];\n\n  // Only one value\n  if (maxStart === minEnd)\n    return [maxStart];\n\n  // NOTE: trying to outsmart I(D,I(C,I(A,B))) is pointless unfortunately...\n  // NOTE: I tried to be very clever about bounds but it does not seem\n  // to improve the performance of the algorithm.\n  var a, b,\n      array = arrays[0],\n      aPointer,\n      bPointer,\n      aLimit,\n      bLimit,\n      aHead,\n      bHead,\n      start = maxStart;\n\n  for (i = 1; i < l; i++) {\n    a = array;\n    b = arrays[i];\n\n    // Change that to `[]` and observe some perf drops on V8...\n    array = new Array();\n\n    aPointer = 0;\n    bPointer = binarySearch.lowerBound(b, start);\n\n    aLimit = a.length;\n    bLimit = b.length;\n\n    while (aPointer < aLimit && bPointer < bLimit) {\n      aHead = a[aPointer];\n      bHead = b[bPointer];\n\n      if (aHead < bHead) {\n        aPointer = binarySearch.lowerBound(a, bHead, aPointer + 1);\n      }\n      else if (aHead > bHead) {\n        bPointer = binarySearch.lowerBound(b, aHead, bPointer + 1);\n      }\n      else {\n        array.push(aHead);\n        aPointer++;\n        bPointer++;\n      }\n    }\n\n    if (array.length === 0)\n      return array;\n\n    start = array[0];\n  }\n\n  return array;\n};\n\n/**\n * Variadic merging all of the given arrays.\n *\n * @param  {...array}\n * @return {array}\n */\nexports.merge = function() {\n  if (arguments.length === 2) {\n    if (isArrayLike(arguments[0]))\n      return mergeArrays(arguments[0], arguments[1]);\n  }\n  else {\n    if (isArrayLike(arguments[0]))\n      return kWayMergeArrays(arguments);\n  }\n\n  return null;\n};\n\n/**\n * Variadic function performing the union of all the given unique arrays.\n *\n * @param  {...array}\n * @return {array}\n */\nexports.unionUnique = function() {\n  if (arguments.length === 2) {\n    if (isArrayLike(arguments[0]))\n      return unionUniqueArrays(arguments[0], arguments[1]);\n  }\n  else {\n    if (isArrayLike(arguments[0]))\n      return kWayUnionUniqueArrays(arguments);\n  }\n\n  return null;\n};\n\n/**\n * Variadic function performing the intersection of all the given unique arrays.\n *\n * @param  {...array}\n * @return {array}\n */\nexports.intersectionUnique = function() {\n  if (arguments.length === 2) {\n    if (isArrayLike(arguments[0]))\n      return exports.intersectionUniqueArrays(arguments[0], arguments[1]);\n  }\n  else {\n    if (isArrayLike(arguments[0]))\n      return exports.kWayIntersectionUniqueArrays(arguments);\n  }\n\n  return null;\n};\n","/* eslint no-fallthrough: 0 */\n/**\n * Mnemonist MurmurHash 3\n * =======================\n *\n * Straightforward implementation of the third version of MurmurHash.\n *\n * Note: this piece of code belong to haschisch.\n */\n\n/**\n * Various helpers.\n */\nfunction mul32(a, b) {\n  return (a & 0xffff) * b + (((a >>> 16) * b & 0xffff) << 16) & 0xffffffff;\n}\n\nfunction sum32(a, b) {\n  return (a & 0xffff) + (b >>> 16) + (((a >>> 16) + b & 0xffff) << 16) & 0xffffffff;\n}\n\nfunction rotl32(a, b) {\n  return (a << b) | (a >>> (32 - b));\n}\n\n/**\n * MumurHash3 function.\n *\n * @param  {number}    seed - Seed.\n * @param  {ByteArray} data - Data.\n */\nmodule.exports = function murmurhash3(seed, data) {\n  var c1 = 0xcc9e2d51,\n      c2 = 0x1b873593,\n      r1 = 15,\n      r2 = 13,\n      m = 5,\n      n = 0x6b64e654;\n\n  var hash = seed,\n      k1,\n      i,\n      l;\n\n  for (i = 0, l = data.length - 4; i <= l; i += 4) {\n    k1 = (\n      data[i] |\n      (data[i + 1] << 8) |\n      (data[i + 2] << 16) |\n      (data[i + 3] << 24)\n    );\n\n    k1 = mul32(k1, c1);\n    k1 = rotl32(k1, r1);\n    k1 = mul32(k1, c2);\n\n    hash ^= k1;\n    hash = rotl32(hash, r2);\n    hash = mul32(hash, m);\n    hash = sum32(hash, n);\n  }\n\n  k1 = 0;\n\n  switch (data.length & 3) {\n    case 3:\n      k1 ^= data[i + 2] << 16;\n    case 2:\n      k1 ^= data[i + 1] << 8;\n    case 1:\n      k1 ^= data[i];\n      k1 = mul32(k1, c1);\n      k1 = rotl32(k1, r1);\n      k1 = mul32(k1, c2);\n      hash ^= k1;\n    default:\n  }\n\n  hash ^= data.length;\n  hash ^= hash >>> 16;\n  hash = mul32(hash, 0x85ebca6b);\n  hash ^= hash >>> 13;\n  hash = mul32(hash, 0xc2b2ae35);\n  hash ^= hash >>> 16;\n\n  return hash >>> 0;\n};\n","/**\n * Mnemonist Typed Array Helpers\n * ==============================\n *\n * Miscellaneous helpers related to typed arrays.\n */\n\n/**\n * When using an unsigned integer array to store pointers, one might want to\n * choose the optimal word size in regards to the actual numbers of pointers\n * to store.\n *\n * This helpers does just that.\n *\n * @param  {number} size - Expected size of the array to map.\n * @return {TypedArray}\n */\nvar MAX_8BIT_INTEGER = Math.pow(2, 8) - 1,\n    MAX_16BIT_INTEGER = Math.pow(2, 16) - 1,\n    MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;\n\nvar MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1,\n    MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1,\n    MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;\n\nexports.getPointerArray = function(size) {\n  var maxIndex = size - 1;\n\n  if (maxIndex <= MAX_8BIT_INTEGER)\n    return Uint8Array;\n\n  if (maxIndex <= MAX_16BIT_INTEGER)\n    return Uint16Array;\n\n  if (maxIndex <= MAX_32BIT_INTEGER)\n    return Uint32Array;\n\n  throw new Error('mnemonist: Pointer Array of size > 4294967295 is not supported.');\n};\n\nexports.getSignedPointerArray = function(size) {\n  var maxIndex = size - 1;\n\n  if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)\n    return Int8Array;\n\n  if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)\n    return Int16Array;\n\n  if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)\n    return Int32Array;\n\n  return Float64Array;\n};\n\n/**\n * Function returning the minimal type able to represent the given number.\n *\n * @param  {number} value - Value to test.\n * @return {TypedArrayClass}\n */\nexports.getNumberType = function(value) {\n\n  // <= 32 bits itnteger?\n  if (value === (value | 0)) {\n\n    // Negative\n    if (Math.sign(value) === -1) {\n      if (value <= 127 && value >= -128)\n        return Int8Array;\n\n      if (value <= 32767 && value >= -32768)\n        return Int16Array;\n\n      return Int32Array;\n    }\n    else {\n\n      if (value <= 255)\n        return Uint8Array;\n\n      if (value <= 65535)\n        return Uint16Array;\n\n      return Uint32Array;\n    }\n  }\n\n  // 53 bits integer & floats\n  // NOTE: it's kinda hard to tell whether we could use 32bits or not...\n  return Float64Array;\n};\n\n/**\n * Function returning the minimal type able to represent the given array\n * of JavaScript numbers.\n *\n * @param  {array}    array  - Array to represent.\n * @param  {function} getter - Optional getter.\n * @return {TypedArrayClass}\n */\nvar TYPE_PRIORITY = {\n  Uint8Array: 1,\n  Int8Array: 2,\n  Uint16Array: 3,\n  Int16Array: 4,\n  Uint32Array: 5,\n  Int32Array: 6,\n  Float32Array: 7,\n  Float64Array: 8\n};\n\n// TODO: make this a one-shot for one value\nexports.getMinimalRepresentation = function(array, getter) {\n  var maxType = null,\n      maxPriority = 0,\n      p,\n      t,\n      v,\n      i,\n      l;\n\n  for (i = 0, l = array.length; i < l; i++) {\n    v = getter ? getter(array[i]) : array[i];\n    t = exports.getNumberType(v);\n    p = TYPE_PRIORITY[t.name];\n\n    if (p > maxPriority) {\n      maxPriority = p;\n      maxType = t;\n    }\n  }\n\n  return maxType;\n};\n\n/**\n * Function returning whether the given value is a typed array.\n *\n * @param  {any} value - Value to test.\n * @return {boolean}\n */\nexports.isTypedArray = function(value) {\n  return typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView(value);\n};\n\n/**\n * Function used to concat byte arrays.\n *\n * @param  {...ByteArray}\n * @return {ByteArray}\n */\nexports.concat = function() {\n  var length = 0,\n      i,\n      o,\n      l;\n\n  for (i = 0, l = arguments.length; i < l; i++)\n    length += arguments[i].length;\n\n  var array = new (arguments[0].constructor)(length);\n\n  for (i = 0, o = 0; i < l; i++) {\n    array.set(arguments[i], o);\n    o += arguments[i].length;\n  }\n\n  return array;\n};\n\n/**\n * Function used to initialize a byte array of indices.\n *\n * @param  {number}    length - Length of target.\n * @return {ByteArray}\n */\nexports.indices = function(length) {\n  var PointerArray = exports.getPointerArray(length);\n\n  var array = new PointerArray(length);\n\n  for (var i = 0; i < length; i++)\n    array[i] = i;\n\n  return array;\n};\n","/**\n * Mnemonist Vector\n * =================\n *\n * Abstract implementation of a growing array that can be used with JavaScript\n * typed arrays and other array-like structures.\n *\n * Note: should try and use ArrayBuffer.transfer when it will be available.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach'),\n    iterables = require('./utils/iterables.js'),\n    typed = require('./utils/typed-arrays.js');\n\n/**\n * Defaults.\n */\nvar DEFAULT_GROWING_POLICY = function(currentCapacity) {\n  return Math.max(1, Math.ceil(currentCapacity * 1.5));\n};\n\nvar pointerArrayFactory = function(capacity) {\n  var PointerArray = typed.getPointerArray(capacity);\n\n  return new PointerArray(capacity);\n};\n\n/**\n * Vector.\n *\n * @constructor\n * @param {function}      ArrayClass             - An array constructor.\n * @param {number|object} initialCapacityOrOptions - Self-explanatory:\n * @param {number}        initialCapacity          - Initial capacity.\n * @param {number}        initialLength            - Initial length.\n * @param {function}      policy                   - Allocation policy.\n */\nfunction Vector(ArrayClass, initialCapacityOrOptions) {\n  if (arguments.length < 1)\n    throw new Error('mnemonist/vector: expecting at least a byte array constructor.');\n\n  var initialCapacity = initialCapacityOrOptions || 0,\n      policy = DEFAULT_GROWING_POLICY,\n      initialLength = 0,\n      factory = false;\n\n  if (typeof initialCapacityOrOptions === 'object') {\n    initialCapacity = initialCapacityOrOptions.initialCapacity || 0;\n    initialLength = initialCapacityOrOptions.initialLength || 0;\n    policy = initialCapacityOrOptions.policy || policy;\n    factory = initialCapacityOrOptions.factory === true;\n  }\n\n  this.factory = factory ? ArrayClass : null;\n  this.ArrayClass = ArrayClass;\n  this.length = initialLength;\n  this.capacity = Math.max(initialLength, initialCapacity);\n  this.policy = policy;\n  this.array = new ArrayClass(this.capacity);\n}\n\n/**\n * Method used to set a value.\n *\n * @param  {number} index - Index to edit.\n * @param  {any}    value - Value.\n * @return {Vector}\n */\nVector.prototype.set = function(index, value) {\n\n  // Out of bounds?\n  if (this.length < index)\n    throw new Error('Vector(' + this.ArrayClass.name + ').set: index out of bounds.');\n\n  // Updating value\n  this.array[index] = value;\n\n  return this;\n};\n\n/**\n * Method used to get a value.\n *\n * @param  {number} index - Index to retrieve.\n * @return {any}\n */\nVector.prototype.get = function(index) {\n  if (this.length < index)\n    return undefined;\n\n  return this.array[index];\n};\n\n/**\n * Method used to apply the growing policy.\n *\n * @param  {number} [override] - Override capacity.\n * @return {number}\n */\nVector.prototype.applyPolicy = function(override) {\n  var newCapacity = this.policy(override || this.capacity);\n\n  if (typeof newCapacity !== 'number' || newCapacity < 0)\n    throw new Error('mnemonist/vector.applyPolicy: policy returned an invalid value (expecting a positive integer).');\n\n  if (newCapacity <= this.capacity)\n    throw new Error('mnemonist/vector.applyPolicy: policy returned a less or equal capacity to allocate.');\n\n  // TODO: we should probably check that the returned number is an integer\n  return newCapacity;\n};\n\n/**\n * Method used to reallocate the underlying array.\n *\n * @param  {number}       capacity - Target capacity.\n * @return {Vector}\n */\nVector.prototype.reallocate = function(capacity) {\n  if (capacity === this.capacity)\n    return this;\n\n  var oldArray = this.array;\n\n  if (capacity < this.length)\n    this.length = capacity;\n\n  if (capacity > this.capacity) {\n    if (this.factory === null)\n      this.array = new this.ArrayClass(capacity);\n    else\n      this.array = this.factory(capacity);\n\n    if (typed.isTypedArray(this.array)) {\n      this.array.set(oldArray, 0);\n    }\n    else {\n      for (var i = 0, l = this.length; i < l; i++)\n        this.array[i] = oldArray[i];\n    }\n  }\n  else {\n    this.array = oldArray.slice(0, capacity);\n  }\n\n  this.capacity = capacity;\n\n  return this;\n};\n\n/**\n * Method used to grow the array.\n *\n * @param  {number}       [capacity] - Optional capacity to match.\n * @return {Vector}\n */\nVector.prototype.grow = function(capacity) {\n  var newCapacity;\n\n  if (typeof capacity === 'number') {\n\n    if (this.capacity >= capacity)\n      return this;\n\n    // We need to match the given capacity\n    newCapacity = this.capacity;\n\n    while (newCapacity < capacity)\n      newCapacity = this.applyPolicy(newCapacity);\n\n    this.reallocate(newCapacity);\n\n    return this;\n  }\n\n  // We need to run the policy once\n  newCapacity = this.applyPolicy();\n  this.reallocate(newCapacity);\n\n  return this;\n};\n\n/**\n * Method used to resize the array. Won't deallocate.\n *\n * @param  {number}       length - Target length.\n * @return {Vector}\n */\nVector.prototype.resize = function(length) {\n  if (length === this.length)\n    return this;\n\n  if (length < this.length) {\n    this.length = length;\n    return this;\n  }\n\n  this.length = length;\n  this.reallocate(length);\n\n  return this;\n};\n\n/**\n * Method used to push a value into the array.\n *\n * @param  {any}    value - Value to push.\n * @return {number}       - Length of the array.\n */\nVector.prototype.push = function(value) {\n  if (this.capacity === this.length)\n    this.grow();\n\n  this.array[this.length++] = value;\n\n  return this.length;\n};\n\n/**\n * Method used to pop the last value of the array.\n *\n * @return {number} - The popped value.\n */\nVector.prototype.pop = function() {\n  if (this.length === 0)\n    return;\n\n  return this.array[--this.length];\n};\n\n/**\n * Method used to create an iterator over a vector's values.\n *\n * @return {Iterator}\n */\nVector.prototype.values = function() {\n  var items = this.array,\n      l = this.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a vector's entries.\n *\n * @return {Iterator}\n */\nVector.prototype.entries = function() {\n  var items = this.array,\n      l = this.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n\n    return {\n      value: [i++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  Vector.prototype[Symbol.iterator] = Vector.prototype.values;\n\n/**\n * Convenience known methods.\n */\nVector.prototype.inspect = function() {\n  var proxy = this.array.slice(0, this.length);\n\n  proxy.type = this.array.constructor.name;\n  proxy.items = this.length;\n  proxy.capacity = this.capacity;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: Vector,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  Vector.prototype[Symbol.for('nodejs.util.inspect.custom')] = Vector.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a vector.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} ArrayClass - Byte array class.\n * @param  {number}   capacity   - Desired capacity.\n * @return {Vector}\n */\nVector.from = function(iterable, ArrayClass, capacity) {\n\n  if (arguments.length < 3) {\n\n    // Attempting to guess the needed capacity\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/vector.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n\n  var vector = new Vector(ArrayClass, capacity);\n\n  forEach(iterable, function(value) {\n    vector.push(value);\n  });\n\n  return vector;\n};\n\n/**\n * Exporting.\n */\nfunction subClass(ArrayClass) {\n  var SubClass = function(initialCapacityOrOptions) {\n    Vector.call(this, ArrayClass, initialCapacityOrOptions);\n  };\n\n  for (var k in Vector.prototype) {\n    if (Vector.prototype.hasOwnProperty(k))\n      SubClass.prototype[k] = Vector.prototype[k];\n  }\n\n  SubClass.from = function(iterable, capacity) {\n    return Vector.from(iterable, ArrayClass, capacity);\n  };\n\n  if (typeof Symbol !== 'undefined')\n    SubClass.prototype[Symbol.iterator] = SubClass.prototype.values;\n\n  return SubClass;\n}\n\nVector.Int8Vector = subClass(Int8Array);\nVector.Uint8Vector = subClass(Uint8Array);\nVector.Uint8ClampedVector = subClass(Uint8ClampedArray);\nVector.Int16Vector = subClass(Int16Array);\nVector.Uint16Vector = subClass(Uint16Array);\nVector.Int32Vector = subClass(Int32Array);\nVector.Uint32Vector = subClass(Uint32Array);\nVector.Float32Vector = subClass(Float32Array);\nVector.Float64Vector = subClass(Float64Array);\nVector.PointerVector = subClass(pointerArrayFactory);\n\nmodule.exports = Vector;\n","/**\n * Mnemonist Vantage Point Tree\n * =============================\n *\n * JavaScript implementation of the Vantage Point Tree storing the binary\n * tree as a flat byte array.\n *\n * Note that a VPTree has worst cases and is likely not to be perfectly\n * balanced because of median ambiguity. It is therefore not suitable\n * for hairballs and tiny datasets.\n *\n * [Reference]:\n * https://en.wikipedia.org/wiki/Vantage-point_tree\n */\nvar iterables = require('./utils/iterables.js'),\n    typed = require('./utils/typed-arrays.js'),\n    inplaceQuickSortIndices = require('./sort/quick.js').inplaceQuickSortIndices,\n    lowerBoundIndices = require('./utils/binary-search.js').lowerBoundIndices,\n    Heap = require('./heap.js');\n\nvar getPointerArray = typed.getPointerArray;\n\n// TODO: implement vantage point selection techniques (by swapping with last)\n// TODO: is this required to implement early termination for k <= size?\n\n/**\n * Heap comparator used by the #.nearestNeighbors method.\n */\nfunction comparator(a, b) {\n  if (a.distance < b.distance)\n    return 1;\n\n  if (a.distance > b.distance)\n    return -1;\n\n  return 0;\n}\n\n/**\n * Function used to create the binary tree.\n *\n * @param  {function}     distance - Distance function to use.\n * @param  {array}        items    - Items to index (will be mutated).\n * @param  {array}        indices  - Indexes of the items.\n * @return {Float64Array}          - The flat binary tree.\n */\nfunction createBinaryTree(distance, items, indices) {\n  var N = indices.length;\n\n  var PointerArray = getPointerArray(N);\n\n  var C = 0,\n      nodes = new PointerArray(N),\n      lefts = new PointerArray(N),\n      rights = new PointerArray(N),\n      mus = new Float64Array(N),\n      stack = [0, 0, N],\n      distances = new Float64Array(N),\n      nodeIndex,\n      vantagePoint,\n      medianIndex,\n      lo,\n      hi,\n      mid,\n      mu,\n      i,\n      l;\n\n  while (stack.length) {\n    hi = stack.pop();\n    lo = stack.pop();\n    nodeIndex = stack.pop();\n\n    // Getting our vantage point\n    vantagePoint = indices[hi - 1];\n    hi--;\n\n    l = hi - lo;\n\n    // Storing vantage point\n    nodes[nodeIndex] = vantagePoint;\n\n    // We are in a leaf\n    if (l === 0)\n      continue;\n\n    // We only have two elements, the second one has to go right\n    if (l === 1) {\n\n      // We put remaining item to the right\n      mu = distance(items[vantagePoint], items[indices[lo]]);\n\n      mus[nodeIndex] = mu;\n\n      // Right\n      C++;\n      rights[nodeIndex] = C;\n      nodes[C] = indices[lo];\n\n      continue;\n    }\n\n    // Computing distance from vantage point to other points\n    for (i = lo; i < hi; i++)\n      distances[indices[i]] = distance(items[vantagePoint], items[indices[i]]);\n\n    inplaceQuickSortIndices(distances, indices, lo, hi);\n\n    // Finding median of distances\n    medianIndex = lo + (l / 2) - 1;\n\n    // Need to interpolate?\n    if (medianIndex === (medianIndex | 0)) {\n      mu = (\n        distances[indices[medianIndex]] +\n        distances[indices[medianIndex + 1]]\n      ) / 2;\n    }\n    else {\n      mu = distances[indices[Math.ceil(medianIndex)]];\n    }\n\n    // Storing mu\n    mus[nodeIndex] = mu;\n\n    mid = lowerBoundIndices(distances, indices, mu, lo, hi);\n\n    // console.log('Vantage point', items[vantagePoint], vantagePoint);\n    // console.log('mu =', mu);\n    // console.log('lo =', lo);\n    // console.log('hi =', hi);\n    // console.log('mid =', mid);\n\n    // console.log('need to split', Array.from(indices).slice(lo, hi).map(i => {\n    //   return [distances[i], distance(items[vantagePoint], items[i]), items[i]];\n    // }));\n\n    // Right\n    if (hi - mid > 0) {\n      C++;\n      rights[nodeIndex] = C;\n      stack.push(C, mid, hi);\n      // console.log('Went right with ', Array.from(indices).slice(mid, hi).map(i => {\n      //   return [distances[i], distance(items[vantagePoint], items[i]), items[i]];\n      // }));\n    }\n\n    // Left\n    if (mid - lo > 0) {\n      C++;\n      lefts[nodeIndex] = C;\n      stack.push(C, lo, mid);\n      // console.log('Went left with', Array.from(indices).slice(lo, mid).map(i => {\n      //   return [distances[i], distance(items[vantagePoint], items[i]), items[i]];\n      // }));\n    }\n\n    // console.log();\n  }\n\n  return {\n    nodes: nodes,\n    lefts: lefts,\n    rights: rights,\n    mus: mus\n  };\n}\n\n/**\n * VPTree.\n *\n * @constructor\n * @param {function} distance - Distance function to use.\n * @param {Iterable} items    - Items to store.\n */\nfunction VPTree(distance, items) {\n  if (typeof distance !== 'function')\n    throw new Error('mnemonist/VPTree.constructor: given `distance` must be a function.');\n\n  if (!items)\n    throw new Error('mnemonist/VPTree.constructor: you must provide items to the tree. A VPTree cannot be updated after its creation.');\n\n  // Properties\n  this.distance = distance;\n  this.heap = new Heap(comparator);\n  this.D = 0;\n\n  var arrays = iterables.toArrayWithIndices(items);\n  this.items = arrays[0];\n  var indices = arrays[1];\n\n  // Creating the binary tree\n  this.size = indices.length;\n\n  var result = createBinaryTree(distance, this.items, indices);\n\n  this.nodes = result.nodes;\n  this.lefts = result.lefts;\n  this.rights = result.rights;\n  this.mus = result.mus;\n}\n\n/**\n * Function used to retrieve the k nearest neighbors of the query.\n *\n * @param  {number} k     - Number of neighbors to retrieve.\n * @param  {any}    query - The query.\n * @return {array}\n */\nVPTree.prototype.nearestNeighbors = function(k, query) {\n  var neighbors = this.heap,\n      stack = [0],\n      tau = Infinity,\n      nodeIndex,\n      itemIndex,\n      vantagePoint,\n      leftIndex,\n      rightIndex,\n      mu,\n      d;\n\n  this.D = 0;\n\n  while (stack.length) {\n    nodeIndex = stack.pop();\n    itemIndex = this.nodes[nodeIndex];\n    vantagePoint = this.items[itemIndex];\n\n    // Distance between query & the current vantage point\n    d = this.distance(vantagePoint, query);\n    this.D++;\n\n    if (d < tau) {\n      neighbors.push({distance: d, item: vantagePoint});\n\n      // Trimming\n      if (neighbors.size > k)\n        neighbors.pop();\n\n      // Adjusting tau (only if we already have k items, else it stays Infinity)\n      if (neighbors.size >= k)\n       tau = neighbors.peek().distance;\n    }\n\n    leftIndex = this.lefts[nodeIndex];\n    rightIndex = this.rights[nodeIndex];\n\n    // We are a leaf\n    if (!leftIndex && !rightIndex)\n      continue;\n\n    mu = this.mus[nodeIndex];\n\n    if (d < mu) {\n      if (leftIndex && d < mu + tau)\n        stack.push(leftIndex);\n      if (rightIndex && d >= mu - tau) // Might not be necessary to test d\n        stack.push(rightIndex);\n    }\n    else {\n      if (rightIndex && d >= mu - tau)\n        stack.push(rightIndex);\n      if (leftIndex && d < mu + tau) // Might not be necessary to test d\n        stack.push(leftIndex);\n    }\n  }\n\n  var array = new Array(neighbors.size);\n\n  for (var i = neighbors.size - 1; i >= 0; i--)\n    array[i] = neighbors.pop();\n\n  return array;\n};\n\n/**\n * Function used to retrieve every neighbors of query in the given radius.\n *\n * @param  {number} radius - Radius.\n * @param  {any}    query  - The query.\n * @return {array}\n */\nVPTree.prototype.neighbors = function(radius, query) {\n  var neighbors = [],\n      stack = [0],\n      nodeIndex,\n      itemIndex,\n      vantagePoint,\n      leftIndex,\n      rightIndex,\n      mu,\n      d;\n\n  this.D = 0;\n\n  while (stack.length) {\n    nodeIndex = stack.pop();\n    itemIndex = this.nodes[nodeIndex];\n    vantagePoint = this.items[itemIndex];\n\n    // Distance between query & the current vantage point\n    d = this.distance(vantagePoint, query);\n    this.D++;\n\n    if (d <= radius)\n      neighbors.push({distance: d, item: vantagePoint});\n\n    leftIndex = this.lefts[nodeIndex];\n    rightIndex = this.rights[nodeIndex];\n\n    // We are a leaf\n    if (!leftIndex && !rightIndex)\n      continue;\n\n    mu = this.mus[nodeIndex];\n\n    if (d < mu) {\n      if (leftIndex && d < mu + radius)\n        stack.push(leftIndex);\n      if (rightIndex && d >= mu - radius) // Might not be necessary to test d\n        stack.push(rightIndex);\n    }\n    else {\n      if (rightIndex && d >= mu - radius)\n        stack.push(rightIndex);\n      if (leftIndex && d < mu + radius) // Might not be necessary to test d\n        stack.push(leftIndex);\n    }\n  }\n\n  return neighbors;\n};\n\n/**\n * Convenience known methods.\n */\nVPTree.prototype.inspect = function() {\n  var array = this.items.slice();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: VPTree,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  VPTree.prototype[Symbol.for('nodejs.util.inspect.custom')] = VPTree.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a tree.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @param  {function} distance - Distance function to use.\n * @return {VPTree}\n */\nVPTree.from = function(iterable, distance) {\n  return new VPTree(distance, iterable);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = VPTree;\n","/**\n * Obliterator ForEach Function\n * =============================\n *\n * Helper function used to easily iterate over mixed values.\n */\nvar support = require('./support.js');\n\nvar ARRAY_BUFFER_SUPPORT = support.ARRAY_BUFFER_SUPPORT;\nvar SYMBOL_SUPPORT = support.SYMBOL_SUPPORT;\n\n/**\n * Function able to iterate over almost any iterable JS value.\n *\n * @param  {any}      iterable - Iterable value.\n * @param  {function} callback - Callback function.\n */\nmodule.exports = function forEach(iterable, callback) {\n  var iterator, k, i, l, s;\n\n  if (!iterable) throw new Error('obliterator/forEach: invalid iterable.');\n\n  if (typeof callback !== 'function')\n    throw new Error('obliterator/forEach: expecting a callback.');\n\n  // The target is an array or a string or function arguments\n  if (\n    Array.isArray(iterable) ||\n    (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable)) ||\n    typeof iterable === 'string' ||\n    iterable.toString() === '[object Arguments]'\n  ) {\n    for (i = 0, l = iterable.length; i < l; i++) callback(iterable[i], i);\n    return;\n  }\n\n  // The target has a #.forEach method\n  if (typeof iterable.forEach === 'function') {\n    iterable.forEach(callback);\n    return;\n  }\n\n  // The target is iterable\n  if (\n    SYMBOL_SUPPORT &&\n    Symbol.iterator in iterable &&\n    typeof iterable.next !== 'function'\n  ) {\n    iterable = iterable[Symbol.iterator]();\n  }\n\n  // The target is an iterator\n  if (typeof iterable.next === 'function') {\n    iterator = iterable;\n    i = 0;\n\n    while (((s = iterator.next()), s.done !== true)) {\n      callback(s.value, i);\n      i++;\n    }\n\n    return;\n  }\n\n  // The target is a plain object\n  for (k in iterable) {\n    if (iterable.hasOwnProperty(k)) {\n      callback(iterable[k], k);\n    }\n  }\n\n  return;\n};\n","/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n  if (typeof next !== 'function')\n    throw new Error('obliterator/iterator: expecting a function!');\n\n  this.next = next;\n}\n\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\nif (typeof Symbol !== 'undefined')\n  Iterator.prototype[Symbol.iterator] = function () {\n    return this;\n  };\n\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\nIterator.of = function () {\n  var args = arguments,\n    l = args.length,\n    i = 0;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: args[i++]};\n  });\n};\n\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\nIterator.empty = function () {\n  var iterator = new Iterator(function () {\n    return {done: true};\n  });\n\n  return iterator;\n};\n\n/**\n * Returning an iterator over the given indexed sequence.\n *\n * @param  {string|Array} sequence - Target sequence.\n * @return {Iterator}\n */\nIterator.fromSequence = function (sequence) {\n  var i = 0,\n    l = sequence.length;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: sequence[i++]};\n  });\n};\n\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\nIterator.is = function (value) {\n  if (value instanceof Iterator) return true;\n\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.next === 'function'\n  );\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Iterator;\n","exports.ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== 'undefined';\nexports.SYMBOL_SUPPORT = typeof Symbol !== 'undefined';\n","export default function _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}","export default function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}","import assertClassBrand from \"./assertClassBrand.js\";\nexport default function _classPrivateFieldGet2(s, a) {\n  return s.get(assertClassBrand(s, a));\n}","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateFieldInitSpec(obj, privateMap, value) {\n  checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}","import assertClassBrand from \"./assertClassBrand.js\";\nexport default function _classPrivateFieldSet2(s, a, r) {\n  return s.set(assertClassBrand(s, a), r), r;\n}","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateMethodInitSpec(obj, privateSet) {\n  checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}"],"names":["forEach","InverseMap","original","this","size","items","Map","inverse","BiMap","clear","set","key","value","has","currentValue","get","delete","currentKey","del","prototype","name","apply","arguments","Symbol","iterator","entries","inspect","dummy","left","right","Object","defineProperty","enumerable","for","from","iterable","bimap","module","exports","Iterator","bitwise","BitSet","length","array","Uint32Array","Math","ceil","index","newBytes","byteIndex","pos","oldBytes","reset","flip","test","Boolean","rank","i","r","j","table8Popcount","maskedByte","select","byte","b","p","c","l","callback","scope","bit","call","values","inner","next","done","proxy","Uint8Array","toJSON","Array","DEFAULT_GROWING_POLICY","capacity","max","BitVector","initialLengthOrOptions","initialLength","policy","initialCapacity","Error","applyPolicy","override","newCapacity","reallocate","virtualCapacity","oldArray","storageLength","slice","grow","resize","push","pop","BKTree","distance","add","item","root","children","d","node","search","n","query","child","found","stack","tree","murmurhash3","LN2_SQUARED","LN2","stringToByteArray","string","Uint16Array","charCodeAt","hashArray","seed","BloomFilter","capacityOrOptions","options","errorRate","log","hashFunctions","data","position","filter","iterables","FixedDeque","CircularBuffer","ArrayClass","paste","keys","getOwnPropertySymbols","start","unshift","guessLength","buffer","isArrayLike","DefaultMap","factory","peek","deleted","autoIncrement","DefaultWeakMap","WeakMap","comparators","DEFAULT_COMPARATOR","reverseComparator","FibonacciHeap","comparator","mergeWithRoot","heap","consumeLinkedList","head","nodes","flag","removeFromRoot","link","y","x","parent","degree","MaxFibonacciHeap","min","createNode","undefined","z","t","A","consolidate","top","MinFibonacciHeap","shift","peekFirst","peekLast","toArray","offset","type","deque","Heap","siftUp","compare","rightIndex","endIndex","startIndex","childIndex","siftDown","consume","lastItem","FixedReverseHeap","replace","FixedStack","toString","join","identity","FuzzyMap","descriptor","isArray","writeHashFunction","readHashFunction","useSet","map","MultiMap","FuzzyMultiMap","Container","dimension","HashedArrayTree","initialCapacityOrOptions","blockSize","initialBlocks","offsetMask","blockMask","log2","blocks","block","parentIndex","popped","pushpop","tmp","heapify","MaxHeap","nsmallest","v","result","reverseCompare","Infinity","constructor","sort","nlargest","MinHeap","SuffixArray","StaticDisjointSet","StaticIntervalTree","InvertedIndex","KDTree","LinkedList","LRUCache","LRUCacheWithDelete","LRUMap","LRUMapWithDelete","MultiSet","PassjoinIndex","Queue","Stack","GeneralizedSuffixArray","Set","SparseQueueSet","SparseMap","SparseSet","SymSpell","Trie","TrieMap","Vector","VPTree","helpers","documentTokenizer","queryTokenizer","mapping","doc","tokens","token","container","results","intersectionUniqueArrays","docs","documents","typed","createTupleComparator","inplaceQuickSortIndices","squaredDistanceAxes","dimensions","axes","pivot","step","dist","buildTree","ids","labels","direction","median","lo","hi","PointerArray","getPointerArray","pivots","lefts","rights","build","visited","nearestNeighbor","bestDistance","best","recurse","dx","KNN_HEAP_COMPARATOR_3","KNN_HEAP_COMPARATOR_2","kNearestNeighbors","k","point","split","linearKNearestNeighbors","reshaped","axis","row","f","Float64Array","reshapeIntoAxes","fromAxes","indices","tail","first","last","list","Keys","Values","deletedSize","pointer","splayOnTop","V","backward","K","forward","setpop","oldValue","oldKey","evicted","previous","remove","missing","dead","cache","isFinite","floor","oldHead","sizeBefore","wasDeleted","indexOf","splice","multiplicity","count","forEachAssociation","countainer","inContainer","containers","associations","MULTISET_ITEM_COMPARATOR","a","currentCount","newCount","edit","am","bm","frequency","forEachMultiplicity","multiplicities","isSubset","B","mA","isSuperset","countSubstringsL","s","pow","abs","partition","m","largeSegments","smallSegments","tuples","segments","o","S","multiMatchAwareInterval","delta","pi","li","start1","end1","start2","end2","end3","multiMatchAwareSubstrings","substring","interval","currentSubstring","substrings","levenshtein","strings","invertedIndices","stringIndex","matches","Ll","candidates","candidate","P","n1","n2","n3","M","countKeys","segmentPos","enqueue","dequeue","queue","of","intersection","I","smallestSize","smallestSet","union","U","difference","D","symmetricDifference","subtract","intersect","disjunct","toRemove","intersectionSize","unionSize","jaccard","overlap","LOS","HIS","swap","ByteArray","dense","sparse","vals","member","ParentsTypedArray","RanksTypedArray","parents","ranks","find","xRoot","yRoot","xRank","yRank","connected","compile","buildBST","intervals","endGetter","sortedIndices","augmentations","low","high","mid","midMinusOne","midPlusOne","current","end","leftEnd","rightEnd","augmentation","augmentationPointer","getters","startGetter","IndicesArray","height","intervalsContainingPoint","bstIndex","intervalIndex","maxInterval","intervalsOverlappingInterval","intervalStart","intervalEnd","currentInterval","bits","buckets","lookup","al","bl","convert","target","paddingOffset","uniqueTokens","create","alphabet","sortedUniqueTokens","hasArbitrarySequence","text","firstLength","longestCommonSubsequence","lcp","lcs","VERBOSITY","VERBOSITY_EXPLANATIONS","createDictionaryItem","suggestions","createSuggestionItem","term","edits","word","deletes","deletedItem","damerauLevenshtein","source","H","INF","sd","letter","st","DB","i1","j1","maxDistance","verbosity","dictionary","maxLength","words","number","suggestion","int","addLowestDistance","input","candidateSet","suggestionSet","suggestItem","ii","jj","substr","behavior","SENTINEL","String","fromCharCode","Token","mode","prefix","update","updateFunction","toPrune","tokenToPrune","isString","nodeStack","prefixStack","concat","empty","currentNode","hasValue","prefixes","currentPrefix","trie","methodName","searchWithComparator","comparison","lowerBound","lowerBoundWithComparator","lowerBoundIndices","upperBound","upperBoundWithComparator","msb32","msb8","criticalBit8","criticalBit8Mask","testCriticalBit8","mask","criticalBit32Mask","popcount","TABLE8","DEFAULT_REVERSE_COMPARATOR","isTypedArray","toArrayWithIndices","IndexArray","binarySearch","mergeArrays","aEnd","bStart","aHead","bHead","aPointer","aLength","bPointer","bLength","unionUniqueArrays","kWayIntersectionUniqueArrays","arrays","maxStart","minEnd","aLimit","bLimit","merge","filtered","pointers","kWayMergeArrays","unionUnique","kWayUnionUniqueArrays","intersectionUnique","mul32","rotl32","k1","c1","c2","hash","MAX_8BIT_INTEGER","MAX_16BIT_INTEGER","MAX_32BIT_INTEGER","MAX_SIGNED_8BIT_INTEGER","MAX_SIGNED_16BIT_INTEGER","MAX_SIGNED_32BIT_INTEGER","maxIndex","getSignedPointerArray","Int8Array","Int16Array","Int32Array","getNumberType","sign","TYPE_PRIORITY","Float32Array","getMinimalRepresentation","getter","maxType","maxPriority","ArrayBuffer","isView","currentCapacity","subClass","SubClass","hasOwnProperty","vector","Int8Vector","Uint8Vector","Uint8ClampedVector","Uint8ClampedArray","Int16Vector","Uint16Vector","Int32Vector","Uint32Vector","Float32Vector","Float64Vector","PointerVector","nodeIndex","vantagePoint","medianIndex","mu","N","C","mus","distances","createBinaryTree","nearestNeighbors","itemIndex","leftIndex","neighbors","tau","radius","support","ARRAY_BUFFER_SUPPORT","SYMBOL_SUPPORT","args","fromSequence","sequence","is","_assertClassBrand","e","TypeError","_checkPrivateRedeclaration","obj","privateCollection","_classPrivateFieldGet2","_classPrivateFieldInitSpec","privateMap","_classPrivateFieldSet2","_classPrivateMethodInitSpec","privateSet"],"sourceRoot":""}