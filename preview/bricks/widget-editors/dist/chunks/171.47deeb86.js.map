{"version":3,"file":"chunks/171.47deeb86.js","mappings":"0PAEA,IAAIA,GAAc,EAClB,MAAMC,EAAwB,IAAIC,IAC3B,SAASC,EAAeC,EAAIC,GAwBjC,GAvBKL,IACHA,GAAc,EACd,EAAAM,KAICC,IAAmF,WAEnFC,KAAK,CACJC,YAAa,KACbC,OAAO,EACPC,cAAe,CAAC,KAAM,MACtBC,0BAA0B,EAC1BC,cAAe,CACbC,aAAa,GAEfC,MAAO,CACLC,aAAa,GAEfC,kBAAmB,KACnBC,UAAW,CAAC,KAGXd,GAAOC,IAAWJ,EAAsBkB,IAAIf,GAAjD,CAGAH,EAAsBmB,IAAIhB,GAC1B,IAAK,MAAOiB,EAAMH,KAAcI,OAAOC,QAAQlB,GAC7C,EAAAC,KAAKkB,kBAAkBH,EAAMjB,EAAIc,EAHnC,CAKF,C,cCjCO,SAASO,EAASC,GACvB,IAAKA,EACH,OAEF,MAAMC,EAAW,EAAArB,KAAKqB,UAAY,QAElC,IAAI,IAAAC,gBAAeF,EAAMC,GACvB,OAAOD,EAAKC,GAGd,MAAME,EAAkBF,EAASG,MAAM,KAAK,GAC5C,GAAID,IAAoBF,EAGtB,OAAO,IAAAC,gBAAeF,EAAMG,GAAmBH,EAAKG,QAAmBE,EAKzE,MAAMC,EAAS,GAAGH,KAClB,IAAK,MAAMI,KAAOX,OAAOY,KAAKR,GAC5B,GAAIO,EAAIE,WAAWH,GACjB,OAAON,EAAKO,EAGlB,CC1BO,MAAM3B,EAA6E,S","sources":["webpack:///../../node_modules/@next-core/i18n/dist/esm/init.js","webpack:///../../node_modules/@next-core/i18n/dist/esm/text.js","webpack:///../../node_modules/@next-core/i18n/dist/esm/index.js"],"sourcesContent":["import { i18n } from \"@next-core/i18n\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nlet initialized = false;\nconst initializedNamespaces = new Set();\nexport function initializeI18n(NS, locales) {\n  if (!initialized) {\n    initialized = true;\n    i18n\n    // learn more: https://github.com/i18next/i18next-xhr-backend\n    // .use(Backend)\n    // learn more: https://github.com/i18next/i18next-browser-languageDetector\n    .use(process.env.NODE_ENV === \"test\" ? LanguageDetector : /* istanbul ignore next */LanguageDetector.default)\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n      fallbackLng: \"zh\",\n      debug: process.env.NODE_ENV === \"development\",\n      supportedLngs: [\"zh\", \"en\"],\n      nonExplicitSupportedLngs: true,\n      interpolation: {\n        escapeValue: false // not needed for react as it escapes by default\n      },\n      react: {\n        useSuspense: false\n      },\n      compatibilityJSON: \"v3\",\n      resources: {}\n    });\n  }\n  if (!NS || !locales || initializedNamespaces.has(NS)) {\n    return;\n  }\n  initializedNamespaces.add(NS);\n  for (const [lang, resources] of Object.entries(locales)) {\n    i18n.addResourceBundle(lang, NS, resources);\n  }\n}\n//# sourceMappingURL=init.js.map","import { i18n } from \"@next-core/i18n\";\nimport { hasOwnProperty } from \"@next-core/utils/general\";\nexport function i18nText(data) {\n  if (!data) {\n    return;\n  }\n  const language = i18n.language ?? \"zh-CN\";\n  // First, make a perfect match.\n  if (hasOwnProperty(data, language)) {\n    return data[language];\n  }\n  // https://en.wikipedia.org/wiki/IETF_language_tag\n  const primaryLanguage = language.split(\"-\")[0];\n  if (primaryLanguage !== language) {\n    // Then, match the primary language (which omits other subtags).\n    // E.g., match `zh` if the current language is `zh-CN`.\n    return hasOwnProperty(data, primaryLanguage) ? data[primaryLanguage] : undefined;\n  }\n  // At last, match the first key which starts with the primary language,\n  // if the current language contains primary subtag only.\n  // E.g., match `zh-CN` if the current language is `zh`.\n  const prefix = `${primaryLanguage}-`;\n  for (const key of Object.keys(data)) {\n    if (key.startsWith(prefix)) {\n      return data[key];\n    }\n  }\n}\n//# sourceMappingURL=text.js.map","import i18next from \"i18next\";\nexport const i18n = process.env.NODE_ENV === \"test\" ? i18next : /* istanbul ignore next */i18next.default;\nexport * from \"./init.js\";\nexport * from \"./text.js\";\n//# sourceMappingURL=index.js.map"],"names":["initialized","initializedNamespaces","Set","initializeI18n","NS","locales","i18n","use","init","fallbackLng","debug","supportedLngs","nonExplicitSupportedLngs","interpolation","escapeValue","react","useSuspense","compatibilityJSON","resources","has","add","lang","Object","entries","addResourceBundle","i18nText","data","language","hasOwnProperty","primaryLanguage","split","undefined","prefix","key","keys","startsWith"],"sourceRoot":""}