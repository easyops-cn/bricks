{"version":3,"file":"chunks/capture-snapshot.524fa157.js","mappings":"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","sources":["webpack:///./src/data-providers/capture-snapshot.ts","webpack:///./src/data-providers/snapshot.ts"],"sourcesContent":["// istanbul ignore file: nothing logical except calling html2canvas.\nimport { createProviderClass } from \"@next-core/utils/general\";\nimport {\n  capture,\n  downloadImage,\n  getCanvasBlob,\n  uploadFile,\n  buildImageUrl,\n} from \"./snapshot.js\";\nexport type SnapshotOptions = {\n  /** 文件名称 */\n  name: string;\n  /** 文件类型 */\n  fileType: \"image\" | \"pdf\";\n  /** 选择器 */\n  selector?: string;\n  /** 对象存储桶名字, fileType只能为 `image` */\n  bucketName?: string;\n  /** 画布背景颜色, 默认透明 */\n  backgroundColor?: string;\n};\n/**\n * 截图，保存或上传\n *\n * @param options 选项\n */\nexport async function captureSnapshot(\n  options: SnapshotOptions\n): Promise<void | string> {\n  const { name, fileType, bucketName, selector, backgroundColor } = options;\n  switch (fileType) {\n    case \"image\":\n      {\n        const canvas = await capture(selector, backgroundColor);\n        if (bucketName) {\n          const blob = await getCanvasBlob(canvas);\n          const files = new File([blob], `${name}.png`, { type: blob.type });\n          const result = await uploadFile(files, bucketName);\n          return buildImageUrl(bucketName, result.data.objectName);\n        } else {\n          await downloadImage(canvas, name);\n        }\n      }\n      break;\n    case \"pdf\": {\n      const { jsPDF } = await import(\"jspdf\");\n      const canvas = await capture(selector, backgroundColor);\n      const imageData = canvas.toDataURL(\"image/jpeg\", 1.0);\n      const orientation =\n        canvas.width > canvas.height ? \"landscape\" : \"portrait\";\n      const pdf = new jsPDF(orientation, \"pt\", [canvas.width, canvas.height]);\n      pdf.addImage(imageData, \"JPEG\", 0, 0, canvas.width, canvas.height);\n      await pdf.save(`${name}.pdf`, { returnPromise: true });\n      break;\n    }\n    default:\n      break;\n  }\n}\n\ncustomElements.define(\n  \"advanced.capture-snapshot\",\n  createProviderClass(captureSnapshot)\n);\n","// istanbul ignore file: nothing logical except calling html2canvas.\nimport { http } from \"@next-core/http\";\nimport html2canvas from \"html2canvas\";\nimport { getBasePath } from \"@next-core/runtime\";\n\nexport type UploadStatus = \"uploading\" | \"done\" | \"error\";\n\nexport function capture(\n  selector?: string,\n  backgroundColor?: string\n): Promise<HTMLCanvasElement> {\n  const target: HTMLElement | null = selector\n    ? document.querySelector(`${selector}`)\n    : document.body;\n  if (!target) {\n    throw new Error(`target not found: ${selector}`);\n  }\n  return new Promise(function (resolve, reject) {\n    html2canvas(target, {\n      backgroundColor: backgroundColor || null,\n      useCORS: true,\n      allowTaint: true,\n      scale: window.devicePixelRatio < 3 ? window.devicePixelRatio : 2,\n    })\n      .then(function (canvas: HTMLCanvasElement) {\n        resolve(canvas);\n      })\n      .catch(reject);\n  });\n}\n\nexport function downloadImage(\n  canvas: HTMLCanvasElement,\n  name = \"image\"\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    try {\n      const url = canvas.toDataURL(\"image/png\");\n      const image = new Image();\n      image.onload = function () {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const ctx = canvas.getContext(\"2d\");\n        ctx?.drawImage(image, 0, 0, image.width, image.height);\n\n        const url = canvas.toDataURL(\"image/png\");\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = name;\n        const event = new MouseEvent(\"click\");\n        a.dispatchEvent(event);\n      };\n      image.src = url;\n      resolve(\"succeed\");\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (e) {\n      reject(\"failed\");\n    }\n  });\n}\n\nexport function getCanvasBlob(canvas: HTMLCanvasElement): Promise<Blob> {\n  return new Promise(function (resolve, reject) {\n    canvas.toBlob(function (blob: Blob | null) {\n      if (blob) {\n        resolve(blob);\n      } else {\n        reject();\n      }\n    });\n  });\n}\n\nexport function uploadFile(\n  file: File,\n  bucketName: string\n): Promise<{ data: { objectName: string } }> {\n  const formData = new FormData();\n  formData.append(\"file\", file, file.name);\n\n  const url = `${getBasePath()}api/gateway/object_store.object_store.PutObject/api/v1/objectStore/bucket/${bucketName}/object`;\n\n  return http.request(url, {\n    method: \"PUT\",\n    body: formData,\n  });\n}\nexport function buildImageUrl(bucketName: string, objectName: string) {\n  return `${getBasePath()}api/gateway/logic.object_store_service/api/v1/objectStore/bucket/${bucketName}/object/${objectName}`;\n}\n"],"names":["async","captureSnapshot","options","name","fileType","bucketName","selector","backgroundColor","canvas","capture","blob","getCanvasBlob","files","File","type","result","uploadFile","buildImageUrl","data","objectName","downloadImage","jsPDF","imageData","toDataURL","pdf","width","height","addImage","save","returnPromise","customElements","define","createProviderClass","target","document","querySelector","body","Error","Promise","resolve","reject","html2canvas","useCORS","allowTaint","scale","window","devicePixelRatio","then","catch","arguments","length","undefined","url","image","Image","onload","createElement","ctx","getContext","drawImage","a","href","download","event","MouseEvent","dispatchEvent","src","e","toBlob","file","formData","FormData","append","getBasePath","http","request","method"],"sourceRoot":""}