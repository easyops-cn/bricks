"use strict";(self.webpackChunkbrick_docs=self.webpackChunkbrick_docs||[]).push([[1024],{27625:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(67294),r=t(4871),i=t(32403);function s(e){let{params:n}=e;return 0===n.length?a.createElement("p",null,"None"):a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"#"),a.createElement("th",null,"Name"),a.createElement("th",null,"Description"),a.createElement("th",null,"Type"))),a.createElement("tbody",null,n.map(((e,n)=>a.createElement("tr",{key:n},a.createElement("td",null,n+1),a.createElement("td",null,a.createElement("code",null,e.isRestElement&&"...",e.name)),a.createElement("td",null,e.description),a.createElement("td",null,a.createElement(i.Z,null,a.createElement(r.ZP,{annotation:e.annotation}))))))))}},53967:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>m,default:()=>k,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var a=t(87462),r=(t(67294),t(3905)),i=t(59263),s=t(4871),c=t(32403),l=t(27625);t(75944);const o={description:"<basic.change-language>"},m=void 0,p={unversionedId:"bricks/basic/change-language",id:"bricks/basic/change-language",title:"change-language",description:"<basic.change-language>",source:"@site/docs/bricks/basic/change-language.mdx",sourceDirName:"bricks/basic",slug:"/bricks/basic/change-language",permalink:"/bricks/basic/change-language",draft:!1,tags:[],version:"current",frontMatter:{description:"<basic.change-language>"},sidebar:"docsSidebar",previous:{title:"basic",permalink:"/bricks/category/basic"},next:{title:"copy-to-clipboard",permalink:"/bricks/basic/copy-to-clipboard"}},d={},u=[{value:"Examples",id:"examples",level:2},{value:"Definition",id:"definition",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3}],g={toc:u},b="wrapper";function k(e){let{components:n,...t}=e;return(0,r.kt)(b,(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{name:"basic.change-language",isProvider:!0,mdxType:"BrickTagName"}),(0,r.kt)("p",null,"\u66f4\u6539\u7ad9\u70b9\u8bed\u8a00\u3002"),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"preview gap",preview:!0,gap:!0},'brick: div\nproperties:\n  style:\n    display: grid\n    gap: 1em\nchildren:\n  - brick: eo-button\n    properties:\n      textContent: \u4e2d\u6587\n    events:\n      click:\n        useProvider: basic.change-language\n        args:\n          - zh\n        callback:\n          success:\n            action: message.success\n            args:\n              - \'<% I18N_TEXT({ zh: "\u4f60\u597d", "en": "Hello" }) %>\'\n  - brick: eo-button\n    properties:\n      textContent: English\n    events:\n      click:\n        useProvider: basic.change-language\n        args:\n          - en\n        callback:\n          success:\n            action: message.success\n            args:\n              - \'<% I18N_TEXT({ zh: "\u4f60\u597d", "en": "Hello" }) %>\'\n# -- YAML DELIMITER (1nbbm8) --\n# <div style="display: grid; gap: 1em">\n#   <eo-button id="brick-1">\u4e2d\u6587</eo-button>\n#   <eo-button id="brick-2">English</eo-button>\n# </div>\n# \n# <script>\n#   const brick_1 = document.getElementById("brick-1");\n#   brick_1.addEventListener("click", (e) => {\n#     const provider = document.createElement("basic.change-language");\n#     const promise = Promise.resolve(provider.resolve("zh"));\n#     promise.then((r) => {\n#       const message = document.createElement("basic.show-notification");\n#       message.resolve({\n#         type: "success",\n#         /* WARN: incompatible expressions in HTML, please try YAML: */\n#         message: \'<% I18N_TEXT({ zh: "\u4f60\u597d", "en": "Hello" }) %>\',\n#       });\n#     });\n#   });\n# \n#   const brick_2 = document.getElementById("brick-2");\n#   brick_2.addEventListener("click", (e) => {\n#     const provider = document.createElement("basic.change-language");\n#     const promise = Promise.resolve(provider.resolve("en"));\n#     promise.then((r) => {\n#       const message = document.createElement("basic.show-notification");\n#       message.resolve({\n#         type: "success",\n#         /* WARN: incompatible expressions in HTML, please try YAML: */\n#         message: \'<% I18N_TEXT({ zh: "\u4f60\u597d", "en": "Hello" }) %>\',\n#       });\n#     });\n#   });\n# <\/script>\n# \n')),(0,r.kt)("h2",{id:"definition"},"Definition"),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)(s.vy.Provider,{value:void 0},(0,r.kt)(l.Z,{params:[{name:"lang",description:"\u8bed\u8a00",annotation:{type:"keyword",value:"string"}}],mdxType:"ProviderDocParams"})),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)(c.Z,{mdxType:"MaybeEmptyCode"},(0,r.kt)(s.vy.Provider,{value:void 0},(0,r.kt)(s.ZP,{annotation:{type:"reference",typeName:{type:"identifier",name:"Promise"},typeParameters:{type:"typeParameterInstantiation",params:[{type:"keyword",value:"void"}]}},mdxType:"GeneralType"})))))}k.isMDXComponent=!0}}]);