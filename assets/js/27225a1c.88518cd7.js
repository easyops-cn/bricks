"use strict";(globalThis.webpackChunkbrick_docs=globalThis.webpackChunkbrick_docs||[]).push([[1248],{4697:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>y,default:()=>T,frontMatter:()=>s,metadata:()=>m,toc:()=>u});var a=t(5893),i=t(1151),r=t(4752),o=t(7886),d=(t(7268),t(5673)),p=t(1243),l=(t(9898),t(9265)),c=t(2535);const s={description:"<eo-draw-canvas>"},y=void 0,m={id:"bricks/diagram/eo-draw-canvas",title:"eo-draw-canvas",description:"<eo-draw-canvas>",source:"@site/docs/bricks/diagram/eo-draw-canvas.mdx",sourceDirName:"bricks/diagram",slug:"/bricks/diagram/eo-draw-canvas",permalink:"/bricks/diagram/eo-draw-canvas",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{description:"<eo-draw-canvas>"},sidebar:"docsSidebar",previous:{title:"eo-display-canvas",permalink:"/bricks/diagram/eo-display-canvas"},next:{title:"experimental-node",permalink:"/bricks/diagram/experimental-node"}},g={},u=[{value:"Examples",id:"examples",level:2},{value:"Basic",id:"basic",level:3},{value:"Line settings",id:"line-settings",level:3},{value:"Force layout",id:"force-layout",level:3},{value:"Dagre layout",id:"dagre-layout",level:3},{value:"Properties",id:"properties",level:2},{value:"Events",id:"events",level:2},{value:"Methods",id:"methods",level:2},{value:"Type references",id:"type-references",level:2}];function f(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return c.vy||v("TypeReferencesContext",!1),c.vy.Provider||v("TypeReferencesContext.Provider",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.Z,{name:"eo-draw-canvas",alias:null,insider:!1,deprecated:!1}),"\n",(0,a.jsx)(n.p,{children:"\u7528\u4e8e\u624b\u5de5\u7ed8\u56fe\u7684\u753b\u5e03\u3002"}),"\n",(0,a.jsx)(n.p,{children:"\u6ce8\u610f\uff1a\u5c06\u914d\u5957\u53e6\u5916\u4e00\u4e2a\u7528\u4e8e\u5c55\u793a\u7684\u753b\u5e03\u6784\u4ef6\u3002"}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.h3,{id:"basic",children:"Basic"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'preview minHeight="600px"',children:'- brick: div\n  properties:\n    style:\n      display: flex\n      height: 600px\n      gap: 1em\n  context:\n    - name: initialCells\n      value: |\n        <%\n          [\n            {\n              type: "decorator",\n              id: "area-1",\n              decorator: "area",\n              view: {\n                x: 10,\n                y: 20,\n                width: 400,\n                height: 300,\n              },\n            },\n            {\n              type: "decorator",\n              id: "container-1",\n              decorator: "container",\n              view: {\n               x: 50,\n                y: 400,\n                width: 280,\n                height: 120,\n                direction: "top",\n                text: " \u4e0a\u5c42\u670d\u52a1"\n              },\n            },\n            {\n              type: "edge",\n              source: "X",\n              target: "Y",\n            },\n            {\n              type: "edge",\n              source: "X",\n              target: "Z",\n              data: {\n                virtual: true,\n              }\n            },\n          ].concat(\n            ["X", "Y", "Z", "W"].map((id) => ({\n              type: "node",\n              id,\n              containerId: id==="W"?"container-1":undefined,\n              data: {\n                name: `Node ${id}`,\n              },\n              view: {\n                x: Math.round(\n                  id === "X"\n                    ? 200 + Math.random() * 200\n                    : id === "Y"\n                    ? Math.random() * 300\n                    : 300 + Math.random() * 300\n                ),\n                y: (id === "X" ? 0 : 300) + Math.round((Math.random() * 200)),\n                width: 60,\n                height: 60,\n              }\n            }))\n          ).concat([\n            {\n              type: "decorator",\n              id: "text-1",\n              decorator: "text",\n              view: {\n                x: 100,\n                y: 120,\n                width: 100,\n                height: 20,\n                text: "Hello!"\n              },\n            },\n          ])\n        %>\n    - name: dragging\n    - name: activeTarget\n    - name: targetCell\n    - name: scale\n      value: 1\n  children:\n    - brick: div\n      properties:\n        style:\n          width: 180px\n          display: flex\n          flexDirection: column\n          gap: 1em\n          border-right: "1px solid var(--palette-gray-6)"\n          overflow: scroll\n      children:\n        - brick: eo-button\n          properties:\n            textContent: Add random nodes\n          events:\n            click:\n              target: eo-draw-canvas\n              method: addNodes\n              args:\n                - |\n                  <%\n                    ((...seeds) => seeds.map((seed) => ({\n                      id: seed,\n                      data: {\n                        name: String(seed),\n                      },\n                    })))(\n                      Math.round(Math.random() * 1e6),\n                      Math.round(Math.random() * 1e6),\n                      Math.round(Math.random() * 1e6),\n                    )\n                  %>\n              callback:\n                success:\n                  action: console.log\n                  args:\n                    - Added nodes\n                    - <% EVENT.detail %>\n        - brick: eo-button\n          properties:\n            textContent: "Add edge: Y => Z"\n          events:\n            click:\n              target: eo-draw-canvas\n              method: addEdge\n              args:\n                - source: Y\n                  target: Z\n                  data:\n                    virtual: true\n        - brick: :forEach\n          dataSource:\n            - X\n            - Y\n          children:\n            - brick: eo-button\n              properties:\n                textContent: <% `Add nodes below ${ITEM}` %>\n              events:\n                click:\n                  target: eo-draw-canvas\n                  method: updateCells\n                  args:\n                    - |\n                      <%\n                        CTX.initialCells.concat([\n                          {\n                            type: "edge",\n                            source: ITEM,\n                            target: "U",\n                          },\n                          {\n                            type: "edge",\n                            source: ITEM,\n                            target: "V",\n                          },\n                          {\n                            type: "node",\n                            id: "U",\n                            data: {\n                              name: "U"\n                            }\n                          },\n                          {\n                            type: "node",\n                            id: "V",\n                            data: {\n                              name: "V"\n                            }\n                          },\n                        ])\n                      %>\n                    - reason: add-related-nodes\n                      parent: <% ITEM %>\n                  callback:\n                    success:\n                      action: console.log\n        - brick: hr\n          properties:\n            style:\n              width: 100%\n        - brick: h3\n          properties:\n            textContent: Drag nodes below\n        - brick: :forEach\n          dataSource: |\n            <%\n              ["A", "B", "C"].map((id) => ({\n                type: "node",\n                id,\n                data: {\n                  name: `Node ${id}`,\n                },\n              }))\n            %>\n          children:\n            - brick: diagram.experimental-node\n              properties:\n                textContent: <% ITEM.data.name %>\n                usage: library\n              events:\n                drag.move:\n                  action: context.replace\n                  args:\n                    - dragging\n                    - |\n                      <% {position: EVENT.detail, ...ITEM} %>\n                drag.end:\n                  - action: context.replace\n                    args:\n                      - dragging\n                      - null\n                  - target: eo-draw-canvas\n                    method: dropNode\n                    args:\n                      - position: <% EVENT.detail %>\n                        id: <% ITEM.id %>\n                        data: <% ITEM.data %>\n                    callback:\n                      success:\n                        if: <% EVENT.detail %>\n                        then:\n                          action: message.success\n                          args:\n                            - <% JSON.stringify(EVENT.detail) %>\n                        else:\n                          action: message.warn\n                          args:\n                            - Unexpected drop position\n        - brick: hr\n          properties:\n            style:\n              width: 100%\n        - brick: h3\n          properties:\n            textContent: Drag decorators below\n        - brick: :forEach\n          dataSource:\n            - area\n            - text\n            - container.top\n            - container.right\n            - container.bottom\n            - container.left\n          children:\n            - brick: diagram.experimental-node\n              properties:\n                textContent: <% _.upperFirst(ITEM) %>\n                usage: library\n              events:\n                drag.move:\n                  action: context.replace\n                  args:\n                    - dragging\n                    - |\n                      <% {position: EVENT.detail, type: "decorator", decorator: ITEM.split(".")[0]} %>\n                drag.end:\n                  - action: context.replace\n                    args:\n                      - dragging\n                      - null\n                  - target: eo-draw-canvas\n                    method: dropDecorator\n                    args:\n                      - position: <% EVENT.detail %>\n                        decorator: <% ITEM.split(".")[0] %>\n                        text: <% ITEM %>\n                        direction: <% ITEM.split(".").pop() %>\n                    callback:\n                      success:\n                        if: <% EVENT.detail %>\n                        then:\n                          # action: message.success\n                          # args:\n                          #   - <% JSON.stringify(EVENT.detail) %>\n                        else:\n                          action: message.warn\n                          args:\n                            - Unexpected drop position\n    - brick: div\n      properties:\n        style:\n          flex: 1\n          minWidth: 0\n      children:\n        - brick: eo-draw-canvas\n          properties:\n            style:\n              width: 100%\n              height: 100%\n            activeTarget: <%= CTX.activeTarget %>\n            fadeUnrelatedCells: true\n            allowEdgeToArea: true\n            dragBehavior: lasso\n            layoutOptions:\n              snap:\n                # grid: true\n                object: true\n            # Initial nodes only\n            defaultNodeSize: [60, 60]\n            defaultNodeBricks:\n              - useBrick:\n                  brick: diagram.experimental-node\n                  properties:\n                    textContent: <% `Node ${DATA.node.id}` %>\n                    status: |\n                      <%=\n                        (CTX.activeTarget?.type === "multi"\n                          ? CTX.activeTarget.targets\n                          : CTX.activeTarget\n                          ? [CTX.activeTarget]\n                          : []\n                        ).some((target) => (\n                          target.type === "node" && target.id === DATA.node.id\n                        ))\n                          ? "highlighted"\n                          : "default"\n                      %>\n            defaultEdgeLines:\n              - if: <% DATA.edge.data?.virtual %>\n                dashed: true\n              - if: <% !DATA.edge.data?.virtual %>\n                dotted: true\n                showStartArrow: true\n                markers:\n                  - placement: end\n                    type: circle\n                  - placement: start\n                    type: arrow\n            cells: <% CTX.initialCells %>\n            lineConnector: true\n            lineSettings:\n              type: polyline\n          events:\n            activeTarget.change:\n              action: context.replace\n              args:\n                - activeTarget\n                - <% EVENT.detail %>\n            cells.move:\n              action: message.info\n              args:\n                - <% `You just moved ${EVENT.detail.length} cells` %>\n            cell.resize:\n              action: message.info\n              args:\n                - <% `You just resized ${EVENT.detail.type} ${EVENT.detail.id} to (${Math.round(EVENT.detail.width)}, ${Math.round(EVENT.detail.height)})` %>\n            cells.delete:\n              action: message.warn\n              args:\n                - |\n                  <% `You wanna delete ${EVENT.detail.length} cells?` %>\n            cell.contextmenu:\n              - target: eo-context-menu\n                method: open\n                args:\n                  - position:\n                      - <% EVENT.detail.clientX %>\n                      - <% EVENT.detail.clientY %>\n              - action: context.replace\n                args:\n                  - targetCell\n                  - <% EVENT.detail.cell %>\n            edge.add:\n              action: message.info\n              args:\n                - |\n                  <% `Added an nice edge: ${JSON.stringify(EVENT.detail)}` %>\n            edge.view.change:\n              action: message.info\n              args:\n                - |\n                  <% `Edge view changed: ${JSON.stringify(EVENT.detail)}` %>\n            decorator.text.change:\n              action: message.info\n              args:\n                - <% JSON.stringify(EVENT.detail) %>\n            node.container.change:\n              action: message.info\n              args:\n                - <% JSON.stringify(EVENT.detail) %>\n            scale.change:\n              action: context.replace\n              args:\n                - scale\n                - <% EVENT.detail %>\n- brick: diagram.experimental-node\n  properties:\n    usage: dragging\n    textContent: |\n      <%= CTX.dragging?.type === "decorator" ? (CTX.dragging.decorator === "text" ? "Text" : null) : CTX.dragging?.data.name %>\n    decorator: |\n      <%= CTX.dragging?.type === "decorator" ? CTX.dragging.decorator : null %>\n    style: |\n      <%=\n        {\n          left: `${CTX.dragging?.position[0]}px`,\n          top: `${CTX.dragging?.position[1]}px`,\n          transform: `scale(${CTX.scale})`,\n          transformOrigin: "0 0",\n          padding: CTX.dragging?.decorator === "text" ? "0.5em" : "0"\n        }\n      %>\n    hidden: <%= !CTX.dragging %>\n- brick: eo-context-menu\n  properties:\n    actions: |\n      <%=\n        (["node"].includes(CTX.targetCell?.type )||CTX.targetCell?.decorator=="area") ? [\n          {\n            text: "\u6dfb\u52a0\u8fb9",\n            event: "add-edge",\n          }\n        ] : [\n          {\n            text: `Test ${CTX.targetCell?.type}`,\n            event: `test-${CTX.targetCell?.type}`,\n          }\n        ]\n      %>\n  events:\n    add-edge:\n      target: eo-draw-canvas\n      method: manuallyConnectNodes\n      args:\n        - <% CTX.targetCell.id %>\n      callback:\n        success:\n          - target: eo-draw-canvas\n            method: addEdge\n            args:\n              - source: <% EVENT.detail.source.id %>\n                target: <% EVENT.detail.target.id %>\n# -- YAML HEADING DELIMITER start (1nbbm8) --\ndiagram/eo-draw-canvas/basic\n# -- YAML HEADING DELIMITER end (1nbbm8) --\n# -- YAML DELIMITER (1nbbm8) --\n# <div style="display: flex; height: 600px; gap: 1em">\n#   <div\n#     style="\n#       width: 180px;\n#       display: flex;\n#       flex-direction: column;\n#       gap: 1em;\n#       border-right: 1px solid var(--palette-gray-6);\n#       overflow: scroll;\n#     "\n#   >\n#     <eo-button id="brick-1">Add random nodes</eo-button>\n#     <eo-button id="brick-2">Add edge: Y =&gt; Z</eo-button>\n#     \x3c!-- WARN: ":forEach" is not supported in HTML mode, please try YAML. --\x3e\n#     <hr style="width: 100%" />\n#     <h3>Drag nodes below</h3>\n#     \x3c!-- WARN: ":forEach" is not supported in HTML mode, please try YAML. --\x3e\n#     <hr style="width: 100%" />\n#     <h3>Drag decorators below</h3>\n#     \x3c!-- WARN: ":forEach" is not supported in HTML mode, please try YAML. --\x3e\n#   </div>\n#   <div style="flex: 1; min-width: 0">\n#     <eo-draw-canvas\n#       style="width: 100%; height: 100%"\n#       fade-unrelated-cells\n#       allow-edge-to-area\n#       drag-behavior="lasso"\n#       id="brick-6"\n#     ></eo-draw-canvas>\n#   </div>\n# </div>\n# <diagram.experimental-node\n#   usage="dragging"\n#   decorator=\'&lt;%= CTX.dragging?.type === "decorator" ? CTX.dragging.decorator : null %&gt;\n# \'\n#   hidden="&lt;%= !CTX.dragging %&gt;"\n# >\n#   &lt;%= CTX.dragging?.type === "decorator" ? (CTX.dragging.decorator === "text"\n#   ? "Text" : null) : CTX.dragging?.data.name %&gt;\n# </diagram.experimental-node>\n# <eo-context-menu id="brick-7"></eo-context-menu>\n# \n# <script>\n#   const brick_1 = document.getElementById("brick-1");\n#   brick_1.addEventListener("click", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.addNodes(\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       "<%\\n  ((...seeds) => seeds.map((seed) => ({\\n    id: seed,\\n    data: {\\n      name: String(seed),\\n    },\\n  })))(\\n    Math.round(Math.random() * 1e6),\\n    Math.round(Math.random() * 1e6),\\n    Math.round(Math.random() * 1e6),\\n  )\\n%>\\n"\n#     );\n#   });\n# \n#   const brick_2 = document.getElementById("brick-2");\n#   brick_2.addEventListener("click", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.addEdge({ source: "Y", target: "Z", data: { virtual: true } });\n#   });\n# \n#   const brick_3 = document.getElementById("brick-3");\n#   brick_3.addEventListener("click", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.updateCells(\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       \'<%\\n  CTX.initialCells.concat([\\n    {\\n      type: "edge",\\n      source: ITEM,\\n      target: "U",\\n    },\\n    {\\n      type: "edge",\\n      source: ITEM,\\n      target: "V",\\n    },\\n    {\\n      type: "node",\\n      id: "U",\\n      data: {\\n        name: "U"\\n      }\\n    },\\n    {\\n      type: "node",\\n      id: "V",\\n      data: {\\n        name: "V"\\n      }\\n    },\\n  ])\\n%>\\n\',\n#       { reason: "add-related-nodes", parent: "<% ITEM %>" }\n#     );\n#   });\n# \n#   const brick_4 = document.getElementById("brick-4");\n#   brick_4.addEventListener("drag.move", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_4.addEventListener("drag.end", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_4.addEventListener("drag.end", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.dropNode({\n#       position: "<% EVENT.detail %>",\n#       id: "<% ITEM.id %>",\n#       data: "<% ITEM.data %>",\n#     });\n#   });\n# \n#   const brick_5 = document.getElementById("brick-5");\n#   brick_5.addEventListener("drag.move", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_5.addEventListener("drag.end", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_5.addEventListener("drag.end", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.dropDecorator({\n#       position: "<% EVENT.detail %>",\n#       decorator: \'<% ITEM.split(".")[0] %>\',\n#       text: "<% ITEM %>",\n#       direction: \'<% ITEM.split(".").pop() %>\',\n#     });\n#   });\n# \n#   const brick_6 = document.getElementById("brick-6");\n#   brick_6.activeTarget = "<%= CTX.activeTarget %>";\n#   brick_6.layoutOptions = {\n#     snap: {\n#       object: true,\n#     },\n#   };\n#   brick_6.defaultNodeSize = [60, 60];\n#   brick_6.defaultNodeBricks = [\n#     {\n#       useBrick: {\n#         brick: "diagram.experimental-node",\n#         properties: {\n#           textContent: "<% `Node ${DATA.node.id}` %>",\n#           status:\n#             \'<%=\\n  (CTX.activeTarget?.type === "multi"\\n    ? CTX.activeTarget.targets\\n    : CTX.activeTarget\\n    ? [CTX.activeTarget]\\n    : []\\n  ).some((target) => (\\n    target.type === "node" && target.id === DATA.node.id\\n  ))\\n    ? "highlighted"\\n    : "default"\\n%>\\n\',\n#         },\n#       },\n#     },\n#   ];\n#   brick_6.defaultEdgeLines = [\n#     {\n#       if: "<% DATA.edge.data?.virtual %>",\n#       dashed: true,\n#     },\n#     {\n#       if: "<% !DATA.edge.data?.virtual %>",\n#       dotted: true,\n#       showStartArrow: true,\n#       markers: [\n#         {\n#           placement: "end",\n#           type: "circle",\n#         },\n#         {\n#           placement: "start",\n#           type: "arrow",\n#         },\n#       ],\n#     },\n#   ];\n#   brick_6.cells = "<% CTX.initialCells %>";\n#   brick_6.lineConnector = true;\n#   brick_6.lineSettings = {\n#     type: "polyline",\n#   };\n#   brick_6.addEventListener("activeTarget.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_6.addEventListener("cells.move", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "info",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message: "<% `You just moved ${EVENT.detail.length} cells` %>",\n#     });\n#   });\n#   brick_6.addEventListener("cell.resize", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "info",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message:\n#         "<% `You just resized ${EVENT.detail.type} ${EVENT.detail.id} to (${Math.round(EVENT.detail.width)}, ${Math.round(EVENT.detail.height)})` %>",\n#     });\n#   });\n#   brick_6.addEventListener("cells.delete", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "warn",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message: "<% `You wanna delete ${EVENT.detail.length} cells?` %>\\n",\n#     });\n#   });\n#   brick_6.addEventListener("cell.contextmenu", (e) => {\n#     const brick = document.querySelector("eo-context-menu");\n#     brick.open({\n#       position: ["<% EVENT.detail.clientX %>", "<% EVENT.detail.clientY %>"],\n#     });\n#   });\n#   brick_6.addEventListener("cell.contextmenu", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_6.addEventListener("edge.add", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "info",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message: "<% `Added an nice edge: ${JSON.stringify(EVENT.detail)}` %>\\n",\n#     });\n#   });\n#   brick_6.addEventListener("edge.view.change", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "info",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message: "<% `Edge view changed: ${JSON.stringify(EVENT.detail)}` %>\\n",\n#     });\n#   });\n#   brick_6.addEventListener("decorator.text.change", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "info",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message: "<% JSON.stringify(EVENT.detail) %>",\n#     });\n#   });\n#   brick_6.addEventListener("node.container.change", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "info",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message: "<% JSON.stringify(EVENT.detail) %>",\n#     });\n#   });\n#   brick_6.addEventListener("scale.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n# \n#   const brick_7 = document.getElementById("brick-7");\n#   brick_7.actions =\n#     \'<%=\\n  (["node"].includes(CTX.targetCell?.type )||CTX.targetCell?.decorator=="area") ? [\\n    {\\n      text: "\u6dfb\u52a0\u8fb9",\\n      event: "add-edge",\\n    }\\n  ] : [\\n    {\\n      text: `Test ${CTX.targetCell?.type}`,\\n      event: `test-${CTX.targetCell?.type}`,\\n    }\\n  ]\\n%>\\n\';\n#   brick_7.addEventListener("add-edge", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.manuallyConnectNodes(\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       "<% CTX.targetCell.id %>"\n#     );\n#   });\n# <\/script>\n# \n'})}),"\n",(0,a.jsx)(n.h3,{id:"line-settings",children:"Line settings"}),"\n",(0,a.jsxs)(n.p,{children:["\u8bbe\u7f6e\u5c5e\u6027 ",(0,a.jsx)(n.code,{children:"lineSettings"})," \u6765\u8c03\u6574\u65b0\u7684\u8fde\u7ebf\u7684\u6837\u5f0f\uff0c\u4f8b\u5982\u4f7f\u7528\u6298\u7ebf\u6216\u76f4\u7ebf\u3002\u6ce8\u610f\uff0c\u8be5\u8bbe\u7f6e\u4e0d\u5f71\u54cd\u5df2\u6709\u7684 edge \u7684\u8fde\u7ebf\u6837\u5f0f\u3002"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'preview minHeight="600px"',children:'- brick: div\n  properties:\n    style:\n      display: flex\n      flexDirection: column\n      height: 600px\n      gap: 1em\n  context:\n    - name: initialCells\n      value: |\n        <%\n          [\n            {\n              type: "edge",\n              source: "X",\n              target: "Y",\n            },\n            {\n              type: "node",\n              id: "X",\n              data: {\n                name: "Node X",\n              },\n              view: {\n                x: 100,\n                y: 100,\n                width: 60,\n                height: 60,\n              }\n            },\n            {\n              type: "node",\n              id: "Y",\n              data: {\n                name: "Node Y",\n              },\n              view: {\n                x: 0,\n                y: 300,\n                width: 60,\n                height: 60,\n              }\n            },\n            {\n              type: "node",\n              id: "Z",\n              data: {\n                name: "Node Z",\n              },\n              view: {\n                x: 300,\n                y: 200,\n                width: 60,\n                height: 60,\n              }\n            },\n          ]\n        %>\n    - name: dragging\n    - name: activeTarget\n    - name: targetCell\n    - name: scale\n      value: 1\n    - name: lineType\n      value: polyline\n  children:\n    - brick: div\n      children:\n        - brick: eo-radio\n          properties:\n            type: button\n            value: polyline\n            options:\n              - polyline\n              - straight\n          events:\n            change:\n              action: context.replace\n              args:\n                - lineType\n                - <% EVENT.detail.value %>\n    - brick: div\n      properties:\n        style:\n          flex: 1\n          minHeight: 0\n      children:\n        - brick: eo-draw-canvas\n          properties:\n            style:\n              width: 100%\n              height: 100%\n            activeTarget: <%= CTX.activeTarget %>\n            fadeUnrelatedCells: true\n            dragBehavior: lasso\n            layoutOptions:\n              snap:\n                object: true\n            defaultNodeSize: [60, 60]\n            defaultNodeBricks:\n              - useBrick:\n                  brick: diagram.experimental-node\n                  properties:\n                    textContent: <% `Node ${DATA.node.id}` %>\n                    status: |\n                      <%=\n                        (CTX.activeTarget?.type === "multi"\n                          ? CTX.activeTarget.targets\n                          : CTX.activeTarget\n                          ? [CTX.activeTarget]\n                          : []\n                        ).some((target) => (\n                          target.type === "node" && target.id === DATA.node.id\n                        ))\n                          ? "highlighted"\n                          : "default"\n                      %>\n            cells: <% CTX.initialCells %>\n            lineConnector: true\n            lineSettings: |\n              <%= { type: CTX.lineType } %>\n          events:\n            activeTarget.change:\n              action: context.replace\n              args:\n                - activeTarget\n                - <% EVENT.detail %>\n            cell.contextmenu:\n              - target: eo-context-menu\n                method: open\n                args:\n                  - position:\n                      - <% EVENT.detail.clientX %>\n                      - <% EVENT.detail.clientY %>\n              - action: context.replace\n                args:\n                  - targetCell\n                  - <% EVENT.detail.cell %>\n            edge.add:\n              action: message.info\n              args:\n                - |\n                  <% `Added an nice edge: ${JSON.stringify(EVENT.detail)}` %>\n            edge.view.change:\n              action: message.info\n              args:\n                - |\n                  <% `Edge view changed: ${JSON.stringify(EVENT.detail)}` %>\n            scale.change:\n              action: context.replace\n              args:\n                - scale\n                - <% EVENT.detail %>\n- brick: diagram.experimental-node\n  properties:\n    usage: dragging\n    textContent: |\n      <%= CTX.dragging?.type === "decorator" ? (CTX.dragging.decorator === "text" ? "Text" : null) : CTX.dragging?.data.name %>\n    decorator: |\n      <%= CTX.dragging?.type === "decorator" ? CTX.dragging.decorator : null %>\n    style: |\n      <%=\n        {\n          left: `${CTX.dragging?.position[0]}px`,\n          top: `${CTX.dragging?.position[1]}px`,\n          transform: `scale(${CTX.scale})`,\n          transformOrigin: "0 0",\n          padding: CTX.dragging?.decorator === "text" ? "0.5em" : "0"\n        }\n      %>\n    hidden: <%= !CTX.dragging %>\n- brick: eo-context-menu\n  properties:\n    actions: |\n      <%=\n        (["node"].includes(CTX.targetCell?.type )||CTX.targetCell?.decorator=="area") ? [\n          {\n            text: "\u6dfb\u52a0\u8fb9",\n            event: "add-edge",\n          }\n        ] : [\n          {\n            text: `Test ${CTX.targetCell?.type}`,\n            event: `test-${CTX.targetCell?.type}`,\n          }\n        ]\n      %>\n  events:\n    add-edge:\n      target: eo-draw-canvas\n      method: manuallyConnectNodes\n      args:\n        - <% CTX.targetCell.id %>\n      callback:\n        success:\n          - target: eo-draw-canvas\n            method: addEdge\n            args:\n              - source: <% EVENT.detail.source.id %>\n                target: <% EVENT.detail.target.id %>\n# -- YAML HEADING DELIMITER start (1nbbm8) --\ndiagram/eo-draw-canvas/line settings\n# -- YAML HEADING DELIMITER end (1nbbm8) --\n# -- YAML DELIMITER (1nbbm8) --\n# <div style="display: flex; flex-direction: column; height: 600px; gap: 1em">\n#   <div>\n#     <eo-radio type="button" id="brick-1"></eo-radio>\n#   </div>\n#   <div style="flex: 1; min-height: 0">\n#     <eo-draw-canvas\n#       style="width: 100%; height: 100%"\n#       fade-unrelated-cells\n#       drag-behavior="lasso"\n#       id="brick-2"\n#     ></eo-draw-canvas>\n#   </div>\n# </div>\n# <diagram.experimental-node\n#   usage="dragging"\n#   decorator=\'&lt;%= CTX.dragging?.type === "decorator" ? CTX.dragging.decorator : null %&gt;\n# \'\n#   hidden="&lt;%= !CTX.dragging %&gt;"\n# >\n#   &lt;%= CTX.dragging?.type === "decorator" ? (CTX.dragging.decorator === "text"\n#   ? "Text" : null) : CTX.dragging?.data.name %&gt;\n# </diagram.experimental-node>\n# <eo-context-menu id="brick-3"></eo-context-menu>\n# \n# <script>\n#   const brick_1 = document.getElementById("brick-1");\n#   brick_1.value = "polyline";\n#   brick_1.options = ["polyline", "straight"];\n#   brick_1.addEventListener("change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n# \n#   const brick_2 = document.getElementById("brick-2");\n#   brick_2.activeTarget = "<%= CTX.activeTarget %>";\n#   brick_2.layoutOptions = {\n#     snap: {\n#       object: true,\n#     },\n#   };\n#   brick_2.defaultNodeSize = [60, 60];\n#   brick_2.defaultNodeBricks = [\n#     {\n#       useBrick: {\n#         brick: "diagram.experimental-node",\n#         properties: {\n#           textContent: "<% `Node ${DATA.node.id}` %>",\n#           status:\n#             \'<%=\\n  (CTX.activeTarget?.type === "multi"\\n    ? CTX.activeTarget.targets\\n    : CTX.activeTarget\\n    ? [CTX.activeTarget]\\n    : []\\n  ).some((target) => (\\n    target.type === "node" && target.id === DATA.node.id\\n  ))\\n    ? "highlighted"\\n    : "default"\\n%>\\n\',\n#         },\n#       },\n#     },\n#   ];\n#   brick_2.cells = "<% CTX.initialCells %>";\n#   brick_2.lineConnector = true;\n#   brick_2.lineSettings = "<%= { type: CTX.lineType } %>\\n";\n#   brick_2.addEventListener("activeTarget.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_2.addEventListener("cell.contextmenu", (e) => {\n#     const brick = document.querySelector("eo-context-menu");\n#     brick.open({\n#       position: ["<% EVENT.detail.clientX %>", "<% EVENT.detail.clientY %>"],\n#     });\n#   });\n#   brick_2.addEventListener("cell.contextmenu", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_2.addEventListener("edge.add", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "info",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message: "<% `Added an nice edge: ${JSON.stringify(EVENT.detail)}` %>\\n",\n#     });\n#   });\n#   brick_2.addEventListener("edge.view.change", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "info",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message: "<% `Edge view changed: ${JSON.stringify(EVENT.detail)}` %>\\n",\n#     });\n#   });\n#   brick_2.addEventListener("scale.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n# \n#   const brick_3 = document.getElementById("brick-3");\n#   brick_3.actions =\n#     \'<%=\\n  (["node"].includes(CTX.targetCell?.type )||CTX.targetCell?.decorator=="area") ? [\\n    {\\n      text: "\u6dfb\u52a0\u8fb9",\\n      event: "add-edge",\\n    }\\n  ] : [\\n    {\\n      text: `Test ${CTX.targetCell?.type}`,\\n      event: `test-${CTX.targetCell?.type}`,\\n    }\\n  ]\\n%>\\n\';\n#   brick_3.addEventListener("add-edge", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.manuallyConnectNodes(\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       "<% CTX.targetCell.id %>"\n#     );\n#   });\n# <\/script>\n# \n'})}),"\n",(0,a.jsx)(n.h3,{id:"force-layout",children:"Force layout"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'preview minHeight="600px"',children:'- brick: div\n  properties:\n    style:\n      display: flex\n      height: 600px\n      gap: 1em\n  context:\n    - name: initialCells\n      value: |\n        <%\n          [\n            {\n              type: "decorator",\n              id: "area-1",\n              decorator: "area",\n              view: {\n                x: 10,\n                y: 20,\n                width: 400,\n                height: 300,\n              },\n            },\n             {\n              type: "decorator",\n              id: "container-1",\n              decorator: "container",\n              view: {\n               x: 50,\n                y: 400,\n                width: 280,\n                height: 120,\n                direction: "top",\n                text: " \u4e0a\u5c42\u670d\u52a1"\n              },\n            },\n            {\n              type: "edge",\n              source: "X",\n              target: "Y",\n            },\n            {\n              type: "edge",\n              source: "X",\n              target: "Z",\n              data: {\n                virtual: true,\n              }\n            },\n          ].concat(\n            ["X", "Y", "Z", "W"].map((id) => ({\n              type: "node",\n              id,\n              containerId: ["X","Y","Z"].includes(id)?"container-1":undefined,\n              data: {\n                name: `Node ${id}`,\n              },\n              view: {\n                width: 60,\n                height: 60,\n              }\n            }))\n          ).concat([\n            {\n              type: "decorator",\n              id: "text-1",\n              decorator: "text",\n              view: {\n                x: 100,\n                y: 120,\n                width: 100,\n                height: 20,\n                text: "Hello!"\n              },\n            },\n          ])\n        %>\n    - name: dragging\n    - name: activeTarget\n    - name: targetCell\n    - name: scale\n      value: 1\n  children:\n    - brick: div\n      properties:\n        style:\n          width: 180px\n          display: flex\n          flexDirection: column\n          gap: 1em\n      children:\n        - brick: eo-button\n          properties:\n            textContent: Add random nodes\n          events:\n            click:\n              target: eo-draw-canvas\n              method: addNodes\n              args:\n                - |\n                  <%\n                    ((...seeds) => seeds.map((seed) => ({\n                      id: seed,\n                      data: {\n                        name: String(seed),\n                      },\n                    })))(\n                      Math.round(Math.random() * 1e6),\n                      Math.round(Math.random() * 1e6),\n                      Math.round(Math.random() * 1e6),\n                    )\n                  %>\n              callback:\n                success:\n                  action: console.log\n                  args:\n                    - Added nodes\n                    - <% EVENT.detail %>\n        - brick: eo-button\n          properties:\n            textContent: "Add edge: Y => Z"\n          events:\n            click:\n              target: eo-draw-canvas\n              method: addEdge\n              args:\n                - source: Y\n                  target: Z\n                  data:\n                    virtual: true\n        - brick: :forEach\n          dataSource:\n            - X\n            - Y\n          children:\n            - brick: eo-button\n              properties:\n                textContent: <% `Add nodes below ${ITEM}` %>\n              events:\n                click:\n                  target: eo-draw-canvas\n                  method: updateCells\n                  args:\n                    - |\n                      <%\n                        CTX.initialCells.concat([\n                          {\n                            type: "edge",\n                            source: ITEM,\n                            target: "U",\n                          },\n                          {\n                            type: "edge",\n                            source: ITEM,\n                            target: "V",\n                          },\n                          {\n                            type: "node",\n                            id: "U",\n                            data: {\n                              name: "U"\n                            }\n                          },\n                          {\n                            type: "node",\n                            id: "V",\n                            data: {\n                              name: "V"\n                            }\n                          },\n                        ])\n                      %>\n                    - reason: add-related-nodes\n                      parent: <% ITEM %>\n                  callback:\n                    success:\n                      action: console.log\n        - brick: hr\n          properties:\n            style:\n              width: 100%\n        - brick: h3\n          properties:\n            textContent: Drag nodes below\n        - brick: :forEach\n          dataSource: |\n            <%\n              ["A", "B", "C"].map((id) => ({\n                type: "node",\n                id,\n                data: {\n                  name: `Node ${id}`,\n                },\n              }))\n            %>\n          children:\n            - brick: diagram.experimental-node\n              properties:\n                textContent: <% ITEM.data.name %>\n                usage: library\n              events:\n                drag.move:\n                  action: context.replace\n                  args:\n                    - dragging\n                    - |\n                      <% {position: EVENT.detail, ...ITEM} %>\n                drag.end:\n                  - action: context.replace\n                    args:\n                      - dragging\n                      - null\n                  - target: eo-draw-canvas\n                    method: dropNode\n                    args:\n                      - position: <% EVENT.detail %>\n                        id: <% ITEM.id %>\n                        data: <% ITEM.data %>\n                    callback:\n                      success:\n                        if: <% EVENT.detail %>\n                        then:\n                          action: message.success\n                          args:\n                            - <% JSON.stringify(EVENT.detail) %>\n                        else:\n                          action: message.warn\n                          args:\n                            - Unexpected drop position\n        - brick: hr\n          properties:\n            style:\n              width: 100%\n        - brick: h3\n          properties:\n            textContent: Drag decorators below\n        - brick: :forEach\n          dataSource:\n            - area\n            - text\n          children:\n            - brick: diagram.experimental-node\n              properties:\n                textContent: <% _.upperFirst(ITEM) %>\n                usage: library\n              events:\n                drag.move:\n                  action: context.replace\n                  args:\n                    - dragging\n                    - |\n                      <% {position: EVENT.detail, type: "decorator", decorator: ITEM} %>\n                drag.end:\n                  - action: context.replace\n                    args:\n                      - dragging\n                      - null\n                  - target: eo-draw-canvas\n                    method: dropDecorator\n                    args:\n                      - position: <% EVENT.detail %>\n                        decorator: <% ITEM %>\n                        text: \'<% ITEM === "text" ? "Text" : undefined %>\'\n                    callback:\n                      success:\n                        if: <% EVENT.detail %>\n                        then:\n                          # action: message.success\n                          # args:\n                          #   - <% JSON.stringify(EVENT.detail) %>\n                        else:\n                          action: message.warn\n                          args:\n                            - Unexpected drop position\n    - brick: div\n      properties:\n        style:\n          flex: 1\n          minWidth: 0\n      children:\n        - brick: eo-draw-canvas\n          properties:\n            style:\n              width: 100%\n              height: 100%\n            activeTarget: <%= CTX.activeTarget %>\n            fadeUnrelatedCells: true\n            layout: force\n            # Initial nodes only\n            defaultNodeSize: [60, 60]\n            defaultNodeBricks:\n              - useBrick:\n                  brick: diagram.experimental-node\n                  properties:\n                    textContent: <% `Node ${DATA.node.id}` %>\n                    status: |\n                      <%=\n                        CTX.activeTarget?.type === "node" && CTX.activeTarget.id === DATA.node.id\n                          ? "highlighted"\n                          // : CTX.unrelated.some(n =>\n                          //     n.type === "node" && n.id === DATA.node.id\n                          //   )\n                          // ? "faded"\n                          : "default"\n                      %>\n            defaultEdgeLines:\n              - if: <% DATA.edge.data?.virtual %>\n                dashed: true\n            cells: <% CTX.initialCells %>\n          events:\n            activeTarget.change:\n              action: context.replace\n              args:\n                - activeTarget\n                - <% EVENT.detail %>\n            cell.move:\n              action: message.info\n              args:\n                - <% `You just moved ${EVENT.detail.type} ${EVENT.detail.id} to (${Math.round(EVENT.detail.x)}, ${Math.round(EVENT.detail.y)})` %>\n            cell.resize:\n              action: message.info\n              args:\n                - <% `You just resized ${EVENT.detail.type} ${EVENT.detail.id} to (${Math.round(EVENT.detail.width)}, ${Math.round(EVENT.detail.height)})` %>\n            cell.delete:\n              action: message.warn\n              args:\n                - |\n                  <% `You wanna delete ${EVENT.detail.type} ${EVENT.detail.type === "edge" ? `(${EVENT.detail.source} => ${EVENT.detail.target})` : EVENT.detail.id}?` %>\n            cell.contextmenu:\n              - target: eo-context-menu\n                method: open\n                args:\n                  - position:\n                      - <% EVENT.detail.clientX %>\n                      - <% EVENT.detail.clientY %>\n              - action: context.replace\n                args:\n                  - targetCell\n                  - <% EVENT.detail.cell %>\n            decorator.text.change:\n              action: message.info\n              args:\n                - <% JSON.stringify(EVENT.detail) %>\n            scale.change:\n              action: context.replace\n              args:\n                - scale\n                - <% EVENT.detail %>\n- brick: diagram.experimental-node\n  properties:\n    usage: dragging\n    textContent: |\n      <%= CTX.dragging?.type === "decorator" ? (CTX.dragging.decorator === "text" ? "Text" : null) : CTX.dragging?.data.name %>\n    decorator: |\n      <%= CTX.dragging?.type === "decorator" ? CTX.dragging.decorator : null %>\n    style: |\n      <%=\n        {\n          left: `${CTX.dragging?.position[0]}px`,\n          top: `${CTX.dragging?.position[1]}px`,\n          transform: `scale(${CTX.scale})`,\n          transformOrigin: "0 0",\n          padding: CTX.dragging?.decorator === "text" ? "0.5em" : "0"\n        }\n      %>\n    hidden: <%= !CTX.dragging %>\n- brick: eo-context-menu\n  properties:\n    actions: |\n      <%=\n        CTX.targetCell?.type === "node" ? [\n          {\n            text: "\u6dfb\u52a0\u8fb9",\n            event: "add-edge",\n          }\n        ] : [\n          {\n            text: `Test ${CTX.targetCell?.type}`,\n            event: `test-${CTX.targetCell?.type}`,\n          }\n        ]\n      %>\n  events:\n    add-edge:\n      target: eo-draw-canvas\n      method: manuallyConnectNodes\n      args:\n        - <% CTX.targetCell.id %>\n      callback:\n        success:\n          target: eo-draw-canvas\n          method: addEdge\n          args:\n            - source: <% EVENT.detail.source.id %>\n              target: <% EVENT.detail.target.id %>\n# -- YAML HEADING DELIMITER start (1nbbm8) --\ndiagram/eo-draw-canvas/force layout\n# -- YAML HEADING DELIMITER end (1nbbm8) --\n# -- YAML DELIMITER (1nbbm8) --\n# <div style="display: flex; height: 600px; gap: 1em">\n#   <div style="width: 180px; display: flex; flex-direction: column; gap: 1em">\n#     <eo-button id="brick-1">Add random nodes</eo-button>\n#     <eo-button id="brick-2">Add edge: Y =&gt; Z</eo-button>\n#     \x3c!-- WARN: ":forEach" is not supported in HTML mode, please try YAML. --\x3e\n#     <hr style="width: 100%" />\n#     <h3>Drag nodes below</h3>\n#     \x3c!-- WARN: ":forEach" is not supported in HTML mode, please try YAML. --\x3e\n#     <hr style="width: 100%" />\n#     <h3>Drag decorators below</h3>\n#     \x3c!-- WARN: ":forEach" is not supported in HTML mode, please try YAML. --\x3e\n#   </div>\n#   <div style="flex: 1; min-width: 0">\n#     <eo-draw-canvas\n#       style="width: 100%; height: 100%"\n#       fade-unrelated-cells\n#       layout="force"\n#       id="brick-6"\n#     ></eo-draw-canvas>\n#   </div>\n# </div>\n# <diagram.experimental-node\n#   usage="dragging"\n#   decorator=\'&lt;%= CTX.dragging?.type === "decorator" ? CTX.dragging.decorator : null %&gt;\n# \'\n#   hidden="&lt;%= !CTX.dragging %&gt;"\n# >\n#   &lt;%= CTX.dragging?.type === "decorator" ? (CTX.dragging.decorator === "text"\n#   ? "Text" : null) : CTX.dragging?.data.name %&gt;\n# </diagram.experimental-node>\n# <eo-context-menu id="brick-7"></eo-context-menu>\n# \n# <script>\n#   const brick_1 = document.getElementById("brick-1");\n#   brick_1.addEventListener("click", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.addNodes(\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       "<%\\n  ((...seeds) => seeds.map((seed) => ({\\n    id: seed,\\n    data: {\\n      name: String(seed),\\n    },\\n  })))(\\n    Math.round(Math.random() * 1e6),\\n    Math.round(Math.random() * 1e6),\\n    Math.round(Math.random() * 1e6),\\n  )\\n%>\\n"\n#     );\n#   });\n# \n#   const brick_2 = document.getElementById("brick-2");\n#   brick_2.addEventListener("click", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.addEdge({ source: "Y", target: "Z", data: { virtual: true } });\n#   });\n# \n#   const brick_3 = document.getElementById("brick-3");\n#   brick_3.addEventListener("click", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.updateCells(\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       \'<%\\n  CTX.initialCells.concat([\\n    {\\n      type: "edge",\\n      source: ITEM,\\n      target: "U",\\n    },\\n    {\\n      type: "edge",\\n      source: ITEM,\\n      target: "V",\\n    },\\n    {\\n      type: "node",\\n      id: "U",\\n      data: {\\n        name: "U"\\n      }\\n    },\\n    {\\n      type: "node",\\n      id: "V",\\n      data: {\\n        name: "V"\\n      }\\n    },\\n  ])\\n%>\\n\',\n#       { reason: "add-related-nodes", parent: "<% ITEM %>" }\n#     );\n#   });\n# \n#   const brick_4 = document.getElementById("brick-4");\n#   brick_4.addEventListener("drag.move", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_4.addEventListener("drag.end", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_4.addEventListener("drag.end", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.dropNode({\n#       position: "<% EVENT.detail %>",\n#       id: "<% ITEM.id %>",\n#       data: "<% ITEM.data %>",\n#     });\n#   });\n# \n#   const brick_5 = document.getElementById("brick-5");\n#   brick_5.addEventListener("drag.move", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_5.addEventListener("drag.end", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_5.addEventListener("drag.end", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.dropDecorator({\n#       position: "<% EVENT.detail %>",\n#       decorator: "<% ITEM %>",\n#       text: \'<% ITEM === "text" ? "Text" : undefined %>\',\n#     });\n#   });\n# \n#   const brick_6 = document.getElementById("brick-6");\n#   brick_6.activeTarget = "<%= CTX.activeTarget %>";\n#   brick_6.defaultNodeSize = [60, 60];\n#   brick_6.defaultNodeBricks = [\n#     {\n#       useBrick: {\n#         brick: "diagram.experimental-node",\n#         properties: {\n#           textContent: "<% `Node ${DATA.node.id}` %>",\n#           status:\n#             \'<%=\\n  CTX.activeTarget?.type === "node" && CTX.activeTarget.id === DATA.node.id\\n    ? "highlighted"\\n    // : CTX.unrelated.some(n =>\\n    //     n.type === "node" && n.id === DATA.node.id\\n    //   )\\n    // ? "faded"\\n    : "default"\\n%>\\n\',\n#         },\n#       },\n#     },\n#   ];\n#   brick_6.defaultEdgeLines = [\n#     {\n#       if: "<% DATA.edge.data?.virtual %>",\n#       dashed: true,\n#     },\n#   ];\n#   brick_6.cells = "<% CTX.initialCells %>";\n#   brick_6.addEventListener("activeTarget.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_6.addEventListener("cell.move", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "info",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message:\n#         "<% `You just moved ${EVENT.detail.type} ${EVENT.detail.id} to (${Math.round(EVENT.detail.x)}, ${Math.round(EVENT.detail.y)})` %>",\n#     });\n#   });\n#   brick_6.addEventListener("cell.resize", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "info",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message:\n#         "<% `You just resized ${EVENT.detail.type} ${EVENT.detail.id} to (${Math.round(EVENT.detail.width)}, ${Math.round(EVENT.detail.height)})` %>",\n#     });\n#   });\n#   brick_6.addEventListener("cell.delete", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "warn",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message:\n#         \'<% `You wanna delete ${EVENT.detail.type} ${EVENT.detail.type === "edge" ? `(${EVENT.detail.source} => ${EVENT.detail.target})` : EVENT.detail.id}?` %>\\n\',\n#     });\n#   });\n#   brick_6.addEventListener("cell.contextmenu", (e) => {\n#     const brick = document.querySelector("eo-context-menu");\n#     brick.open({\n#       position: ["<% EVENT.detail.clientX %>", "<% EVENT.detail.clientY %>"],\n#     });\n#   });\n#   brick_6.addEventListener("cell.contextmenu", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_6.addEventListener("decorator.text.change", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "info",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message: "<% JSON.stringify(EVENT.detail) %>",\n#     });\n#   });\n#   brick_6.addEventListener("scale.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n# \n#   const brick_7 = document.getElementById("brick-7");\n#   brick_7.actions =\n#     \'<%=\\n  CTX.targetCell?.type === "node" ? [\\n    {\\n      text: "\u6dfb\u52a0\u8fb9",\\n      event: "add-edge",\\n    }\\n  ] : [\\n    {\\n      text: `Test ${CTX.targetCell?.type}`,\\n      event: `test-${CTX.targetCell?.type}`,\\n    }\\n  ]\\n%>\\n\';\n#   brick_7.addEventListener("add-edge", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.manuallyConnectNodes(\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       "<% CTX.targetCell.id %>"\n#     );\n#   });\n# <\/script>\n# \n'})}),"\n",(0,a.jsx)(n.h3,{id:"dagre-layout",children:"Dagre layout"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'preview minHeight="600px"',children:'- brick: div\n  properties:\n    style:\n      display: flex\n      height: 600px\n      gap: 1em\n  context:\n    - name: initialCells\n      value: |\n        <%\n          [\n            {\n              type: "decorator",\n              id: "area-1",\n              decorator: "area",\n              view: {\n                x: 10,\n                y: 20,\n                width: 400,\n                height: 300,\n              },\n            },\n            {\n              type: "decorator",\n              id: "container-1",\n              decorator: "container",\n              view: {\n               x: 50,\n                y: 400,\n                width: 280,\n                height: 120,\n                direction: "top",\n                text: " \u4e0a\u5c42\u670d\u52a1"\n              },\n            },\n            {\n              type: "edge",\n              source: "X",\n              target: "Y",\n            },\n            {\n              type: "edge",\n              source: "X",\n              target: "Z",\n              data: {\n                virtual: true,\n              }\n            },\n          ].concat(\n            ["X", "Y", "Z", "W"].map((id) => ({\n              type: "node",\n              id,\n              containerId: ["W","Z"].includes(id)?"container-1":undefined,\n              data: {\n                name: `Node ${id}`,\n              },\n              view: {\n                width: 60,\n                height: 60,\n              }\n            }))\n          ).concat([\n            {\n              type: "decorator",\n              id: "text-1",\n              decorator: "text",\n              view: {\n                x: 100,\n                y: 120,\n                width: 100,\n                height: 20,\n                text: "Hello!"\n              },\n            },\n          ])\n        %>\n    - name: dragging\n    - name: activeTarget\n    - name: targetCell\n    - name: scale\n      value: 1\n  children:\n    - brick: div\n      properties:\n        style:\n          width: 180px\n          display: flex\n          flexDirection: column\n          gap: 1em\n      children:\n        - brick: eo-button\n          properties:\n            textContent: Add random nodes\n          events:\n            click:\n              target: eo-draw-canvas\n              method: addNodes\n              args:\n                - |\n                  <%\n                    ((...seeds) => seeds.map((seed) => ({\n                      id: seed,\n                      data: {\n                        name: String(seed),\n                      },\n                    })))(\n                      Math.round(Math.random() * 1e6),\n                      Math.round(Math.random() * 1e6),\n                      Math.round(Math.random() * 1e6),\n                    )\n                  %>\n              callback:\n                success:\n                  action: console.log\n                  args:\n                    - Added nodes\n                    - <% EVENT.detail %>\n        - brick: eo-button\n          properties:\n            textContent: "Add edge: Y => Z"\n          events:\n            click:\n              target: eo-draw-canvas\n              method: addEdge\n              args:\n                - source: Y\n                  target: Z\n                  data:\n                    virtual: true\n        - brick: :forEach\n          dataSource:\n            - X\n            - Y\n          children:\n            - brick: eo-button\n              properties:\n                textContent: <% `Add nodes below ${ITEM}` %>\n              events:\n                click:\n                  target: eo-draw-canvas\n                  method: updateCells\n                  args:\n                    - |\n                      <%\n                        CTX.initialCells.concat([\n                          {\n                            type: "edge",\n                            source: ITEM,\n                            target: "U",\n                          },\n                          {\n                            type: "edge",\n                            source: ITEM,\n                            target: "V",\n                          },\n                          {\n                            type: "node",\n                            id: "U",\n                            data: {\n                              name: "U"\n                            }\n                          },\n                          {\n                            type: "node",\n                            id: "V",\n                            data: {\n                              name: "V"\n                            }\n                          },\n                        ])\n                      %>\n                    - reason: add-related-nodes\n                      parent: <% ITEM %>\n                  callback:\n                    success:\n                      action: console.log\n        - brick: hr\n          properties:\n            style:\n              width: 100%\n        - brick: h3\n          properties:\n            textContent: Drag nodes below\n        - brick: :forEach\n          dataSource: |\n            <%\n              ["A", "B", "C"].map((id) => ({\n                type: "node",\n                id,\n                data: {\n                  name: `Node ${id}`,\n                },\n              }))\n            %>\n          children:\n            - brick: diagram.experimental-node\n              properties:\n                textContent: <% ITEM.data.name %>\n                usage: library\n              events:\n                drag.move:\n                  action: context.replace\n                  args:\n                    - dragging\n                    - |\n                      <% {position: EVENT.detail, ...ITEM} %>\n                drag.end:\n                  - action: context.replace\n                    args:\n                      - dragging\n                      - null\n                  - target: eo-draw-canvas\n                    method: dropNode\n                    args:\n                      - position: <% EVENT.detail %>\n                        id: <% ITEM.id %>\n                        data: <% ITEM.data %>\n                    callback:\n                      success:\n                        if: <% EVENT.detail %>\n                        then:\n                          action: message.success\n                          args:\n                            - <% JSON.stringify(EVENT.detail) %>\n                        else:\n                          action: message.warn\n                          args:\n                            - Unexpected drop position\n        - brick: hr\n          properties:\n            style:\n              width: 100%\n        - brick: h3\n          properties:\n            textContent: Drag decorators below\n        - brick: :forEach\n          dataSource:\n            - area\n            - text\n          children:\n            - brick: diagram.experimental-node\n              properties:\n                textContent: <% _.upperFirst(ITEM) %>\n                usage: library\n              events:\n                drag.move:\n                  action: context.replace\n                  args:\n                    - dragging\n                    - |\n                      <% {position: EVENT.detail, type: "decorator", decorator: ITEM} %>\n                drag.end:\n                  - action: context.replace\n                    args:\n                      - dragging\n                      - null\n                  - target: eo-draw-canvas\n                    method: dropDecorator\n                    args:\n                      - position: <% EVENT.detail %>\n                        decorator: <% ITEM %>\n                        text: \'<% ITEM === "text" ? "Text" : undefined %>\'\n                    callback:\n                      success:\n                        if: <% EVENT.detail %>\n                        then:\n                          # action: message.success\n                          # args:\n                          #   - <% JSON.stringify(EVENT.detail) %>\n                        else:\n                          action: message.warn\n                          args:\n                            - Unexpected drop position\n    - brick: div\n      properties:\n        style:\n          flex: 1\n          minWidth: 0\n      children:\n        - brick: eo-draw-canvas\n          properties:\n            style:\n              width: 100%\n              height: 100%\n            activeTarget: <%= CTX.activeTarget %>\n            fadeUnrelatedCells: true\n            layout: dagre\n            # Initial nodes only\n            defaultNodeSize: [60, 60]\n            defaultNodeBricks:\n              - useBrick:\n                  brick: diagram.experimental-node\n                  properties:\n                    textContent: <% `Node ${DATA.node.id}` %>\n                    status: |\n                      <%=\n                        CTX.activeTarget?.type === "node" && CTX.activeTarget.id === DATA.node.id\n                          ? "highlighted"\n                          // : CTX.unrelated.some(n =>\n                          //     n.type === "node" && n.id === DATA.node.id\n                          //   )\n                          // ? "faded"\n                          : "default"\n                      %>\n            defaultEdgeLines:\n              - if: <% DATA.edge.data?.virtual %>\n                dashed: true\n            cells: <% CTX.initialCells %>\n          events:\n            activeTarget.change:\n              action: context.replace\n              args:\n                - activeTarget\n                - <% EVENT.detail %>\n            cell.move:\n              action: message.info\n              args:\n                - <% `You just moved ${EVENT.detail.type} ${EVENT.detail.id} to (${Math.round(EVENT.detail.x)}, ${Math.round(EVENT.detail.y)})` %>\n            cell.resize:\n              action: message.info\n              args:\n                - <% `You just resized ${EVENT.detail.type} ${EVENT.detail.id} to (${Math.round(EVENT.detail.width)}, ${Math.round(EVENT.detail.height)})` %>\n            cell.delete:\n              action: message.warn\n              args:\n                - |\n                  <% `You wanna delete ${EVENT.detail.type} ${EVENT.detail.type === "edge" ? `(${EVENT.detail.source} => ${EVENT.detail.target})` : EVENT.detail.id}?` %>\n            cell.contextmenu:\n              - target: eo-context-menu\n                method: open\n                args:\n                  - position:\n                      - <% EVENT.detail.clientX %>\n                      - <% EVENT.detail.clientY %>\n              - action: context.replace\n                args:\n                  - targetCell\n                  - <% EVENT.detail.cell %>\n            decorator.text.change:\n              action: message.info\n              args:\n                - <% JSON.stringify(EVENT.detail) %>\n            scale.change:\n              action: context.replace\n              args:\n                - scale\n                - <% EVENT.detail %>\n- brick: diagram.experimental-node\n  properties:\n    usage: dragging\n    textContent: |\n      <%= CTX.dragging?.type === "decorator" ? (CTX.dragging.decorator === "text" ? "Text" : null) : CTX.dragging?.data.name %>\n    decorator: |\n      <%= CTX.dragging?.type === "decorator" ? CTX.dragging.decorator : null %>\n    style: |\n      <%=\n        {\n          left: `${CTX.dragging?.position[0]}px`,\n          top: `${CTX.dragging?.position[1]}px`,\n          transform: `scale(${CTX.scale})`,\n          transformOrigin: "0 0",\n          padding: CTX.dragging?.decorator === "text" ? "0.5em" : "0"\n        }\n      %>\n    hidden: <%= !CTX.dragging %>\n- brick: eo-context-menu\n  properties:\n    actions: |\n      <%=\n        CTX.targetCell?.type === "node" ? [\n          {\n            text: "\u6dfb\u52a0\u8fb9",\n            event: "add-edge",\n          }\n        ] : [\n          {\n            text: `Test ${CTX.targetCell?.type}`,\n            event: `test-${CTX.targetCell?.type}`,\n          }\n        ]\n      %>\n  events:\n    add-edge:\n      target: eo-draw-canvas\n      method: manuallyConnectNodes\n      args:\n        - <% CTX.targetCell.id %>\n      callback:\n        success:\n          target: eo-draw-canvas\n          method: addEdge\n          args:\n            - source: <% EVENT.detail.source.id %>\n              target: <% EVENT.detail.target.id %>\n# -- YAML HEADING DELIMITER start (1nbbm8) --\ndiagram/eo-draw-canvas/dagre layout\n# -- YAML HEADING DELIMITER end (1nbbm8) --\n# -- YAML DELIMITER (1nbbm8) --\n# <div style="display: flex; height: 600px; gap: 1em">\n#   <div style="width: 180px; display: flex; flex-direction: column; gap: 1em">\n#     <eo-button id="brick-1">Add random nodes</eo-button>\n#     <eo-button id="brick-2">Add edge: Y =&gt; Z</eo-button>\n#     \x3c!-- WARN: ":forEach" is not supported in HTML mode, please try YAML. --\x3e\n#     <hr style="width: 100%" />\n#     <h3>Drag nodes below</h3>\n#     \x3c!-- WARN: ":forEach" is not supported in HTML mode, please try YAML. --\x3e\n#     <hr style="width: 100%" />\n#     <h3>Drag decorators below</h3>\n#     \x3c!-- WARN: ":forEach" is not supported in HTML mode, please try YAML. --\x3e\n#   </div>\n#   <div style="flex: 1; min-width: 0">\n#     <eo-draw-canvas\n#       style="width: 100%; height: 100%"\n#       fade-unrelated-cells\n#       layout="dagre"\n#       id="brick-6"\n#     ></eo-draw-canvas>\n#   </div>\n# </div>\n# <diagram.experimental-node\n#   usage="dragging"\n#   decorator=\'&lt;%= CTX.dragging?.type === "decorator" ? CTX.dragging.decorator : null %&gt;\n# \'\n#   hidden="&lt;%= !CTX.dragging %&gt;"\n# >\n#   &lt;%= CTX.dragging?.type === "decorator" ? (CTX.dragging.decorator === "text"\n#   ? "Text" : null) : CTX.dragging?.data.name %&gt;\n# </diagram.experimental-node>\n# <eo-context-menu id="brick-7"></eo-context-menu>\n# \n# <script>\n#   const brick_1 = document.getElementById("brick-1");\n#   brick_1.addEventListener("click", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.addNodes(\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       "<%\\n  ((...seeds) => seeds.map((seed) => ({\\n    id: seed,\\n    data: {\\n      name: String(seed),\\n    },\\n  })))(\\n    Math.round(Math.random() * 1e6),\\n    Math.round(Math.random() * 1e6),\\n    Math.round(Math.random() * 1e6),\\n  )\\n%>\\n"\n#     );\n#   });\n# \n#   const brick_2 = document.getElementById("brick-2");\n#   brick_2.addEventListener("click", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.addEdge({ source: "Y", target: "Z", data: { virtual: true } });\n#   });\n# \n#   const brick_3 = document.getElementById("brick-3");\n#   brick_3.addEventListener("click", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.updateCells(\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       \'<%\\n  CTX.initialCells.concat([\\n    {\\n      type: "edge",\\n      source: ITEM,\\n      target: "U",\\n    },\\n    {\\n      type: "edge",\\n      source: ITEM,\\n      target: "V",\\n    },\\n    {\\n      type: "node",\\n      id: "U",\\n      data: {\\n        name: "U"\\n      }\\n    },\\n    {\\n      type: "node",\\n      id: "V",\\n      data: {\\n        name: "V"\\n      }\\n    },\\n  ])\\n%>\\n\',\n#       { reason: "add-related-nodes", parent: "<% ITEM %>" }\n#     );\n#   });\n# \n#   const brick_4 = document.getElementById("brick-4");\n#   brick_4.addEventListener("drag.move", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_4.addEventListener("drag.end", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_4.addEventListener("drag.end", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.dropNode({\n#       position: "<% EVENT.detail %>",\n#       id: "<% ITEM.id %>",\n#       data: "<% ITEM.data %>",\n#     });\n#   });\n# \n#   const brick_5 = document.getElementById("brick-5");\n#   brick_5.addEventListener("drag.move", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_5.addEventListener("drag.end", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_5.addEventListener("drag.end", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.dropDecorator({\n#       position: "<% EVENT.detail %>",\n#       decorator: "<% ITEM %>",\n#       text: \'<% ITEM === "text" ? "Text" : undefined %>\',\n#     });\n#   });\n# \n#   const brick_6 = document.getElementById("brick-6");\n#   brick_6.activeTarget = "<%= CTX.activeTarget %>";\n#   brick_6.defaultNodeSize = [60, 60];\n#   brick_6.defaultNodeBricks = [\n#     {\n#       useBrick: {\n#         brick: "diagram.experimental-node",\n#         properties: {\n#           textContent: "<% `Node ${DATA.node.id}` %>",\n#           status:\n#             \'<%=\\n  CTX.activeTarget?.type === "node" && CTX.activeTarget.id === DATA.node.id\\n    ? "highlighted"\\n    // : CTX.unrelated.some(n =>\\n    //     n.type === "node" && n.id === DATA.node.id\\n    //   )\\n    // ? "faded"\\n    : "default"\\n%>\\n\',\n#         },\n#       },\n#     },\n#   ];\n#   brick_6.defaultEdgeLines = [\n#     {\n#       if: "<% DATA.edge.data?.virtual %>",\n#       dashed: true,\n#     },\n#   ];\n#   brick_6.cells = "<% CTX.initialCells %>";\n#   brick_6.addEventListener("activeTarget.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_6.addEventListener("cell.move", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "info",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message:\n#         "<% `You just moved ${EVENT.detail.type} ${EVENT.detail.id} to (${Math.round(EVENT.detail.x)}, ${Math.round(EVENT.detail.y)})` %>",\n#     });\n#   });\n#   brick_6.addEventListener("cell.resize", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "info",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message:\n#         "<% `You just resized ${EVENT.detail.type} ${EVENT.detail.id} to (${Math.round(EVENT.detail.width)}, ${Math.round(EVENT.detail.height)})` %>",\n#     });\n#   });\n#   brick_6.addEventListener("cell.delete", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "warn",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message:\n#         \'<% `You wanna delete ${EVENT.detail.type} ${EVENT.detail.type === "edge" ? `(${EVENT.detail.source} => ${EVENT.detail.target})` : EVENT.detail.id}?` %>\\n\',\n#     });\n#   });\n#   brick_6.addEventListener("cell.contextmenu", (e) => {\n#     const brick = document.querySelector("eo-context-menu");\n#     brick.open({\n#       position: ["<% EVENT.detail.clientX %>", "<% EVENT.detail.clientY %>"],\n#     });\n#   });\n#   brick_6.addEventListener("cell.contextmenu", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_6.addEventListener("decorator.text.change", (e) => {\n#     const message = document.createElement("basic.show-notification");\n#     message.resolve({\n#       type: "info",\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       message: "<% JSON.stringify(EVENT.detail) %>",\n#     });\n#   });\n#   brick_6.addEventListener("scale.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n# \n#   const brick_7 = document.getElementById("brick-7");\n#   brick_7.actions =\n#     \'<%=\\n  CTX.targetCell?.type === "node" ? [\\n    {\\n      text: "\u6dfb\u52a0\u8fb9",\\n      event: "add-edge",\\n    }\\n  ] : [\\n    {\\n      text: `Test ${CTX.targetCell?.type}`,\\n      event: `test-${CTX.targetCell?.type}`,\\n    }\\n  ]\\n%>\\n\';\n#   brick_7.addEventListener("add-edge", (e) => {\n#     const brick = document.querySelector("eo-draw-canvas");\n#     brick.manuallyConnectNodes(\n#       /* WARN: incompatible expressions in HTML, please try YAML: */\n#       "<% CTX.targetCell.id %>"\n#     );\n#   });\n# <\/script>\n# \n'})}),"\n",(0,a.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(c.vy.Provider,{value:["InitialCell","InitialNodeCell","NodeCell","NodeBrickCell","BaseBrickCell","BaseCell","BaseNodeCell","NodeId","NodeView","InitialNodeView","EdgeCell","BaseEdgeCell","EdgeView","LineSettings","LineType","DecoratorCell","DecoratorType","DecoratorView","Direction","LayoutType","LayoutOptions","LayoutOptionsManual","LayoutSnapOptions","SnapOptions","SnapToGridOptions","SnapToObjectOptions","LayoutOptionsDagre","BaseLayoutOptions","AlignOrigin","LayoutOptionsForce","ForceCollideOptions","SizeTuple","NodeBrickConf","EdgeLineConf","BaseEdgeLineConf","LineAnimate","ActiveTarget","ActiveTargetOfSingular","ActiveTargetOfNode","ActiveTargetOfEdge","ActiveTargetOfDecorator","ActiveTargetOfMulti","DragBehavior","CtrlDragBehavior","RangeTuple","LineConnecterConf","MoveCellPayload","LineTuple","ResizeCellPayload","Cell","CellContextMenuDetail","ConnectNodesDetail","EdgeViewChangePayload","DecoratorTextChangeDetail","DropNodeInfo","AddNodeInfo","DropDecoratorInfo","AddEdgeInfo","UpdateCellsContext"],children:(0,a.jsx)(o.Z,{properties:[{name:"cells",description:"\u4ec5\u5f53\u521d\u59cb\u5316\u65f6\u4f7f\u7528\uff0c\u6e32\u67d3\u540e\u91cd\u65b0\u8bbe\u7f6e `cells` \u5c06\u65e0\u6548\u3002",attribute:!1,type:"InitialCell[]",annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"InitialCell"}}}},{name:"layout",type:"LayoutType",annotation:{type:"reference",typeName:{type:"identifier",name:"LayoutType"}}},{name:"layoutOptions",attribute:!1,type:"LayoutOptions",annotation:{type:"reference",typeName:{type:"identifier",name:"LayoutOptions"}}},{name:"defaultNodeSize",description:"",default:"[100,20]",attribute:!1,type:"SizeTuple",annotation:{type:"reference",typeName:{type:"identifier",name:"SizeTuple"}}},{name:"defaultNodeBricks",attribute:!1,type:"NodeBrickConf[]",annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"NodeBrickConf"}}}},{name:"degradedThreshold",description:"\u5f53\u8282\u70b9\u6570\u91cf\u8fbe\u5230\u6216\u8d85\u8fc7 `degradedThreshold` \u65f6\uff0c\u8282\u70b9\u5c06\u88ab\u964d\u7ea7\u5c55\u793a\u3002",default:"500",type:"number",annotation:{type:"keyword",value:"number"}},{name:"degradedNodeLabel",description:"\u8bbe\u7f6e\u8282\u70b9\u5c06\u964d\u7ea7\u5c55\u793a\u65f6\u663e\u793a\u7684\u540d\u79f0\u3002",default:'"<% DATA.node.id %>"',attribute:!1,type:"string",annotation:{type:"keyword",value:"string"}},{name:"defaultEdgeLines",description:"\u4f7f\u7528\u6761\u4ef6\u5224\u65ad\u8bbe\u7f6e\u9ed8\u8ba4\u7684\u8fb9\u5bf9\u5e94\u7684\u8fde\u7ebf\u3002\u5728 `if` \u8868\u8fbe\u5f0f\u4e2d `DATA` \u4e3a `{ edge }`\uff0c\u4f8b\u5982\uff1a\n\n```yaml\ndefaultEdgeLines:\n  - if: <% DATA.edge.data?.virtual %>\n    dashed: true\n```",attribute:!1,type:"EdgeLineConf[]",annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"EdgeLineConf"}}}},{name:"activeTarget",attribute:!1,type:"ActiveTarget | null",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"ActiveTarget"}},{type:"keyword",value:"null"}]}},{name:"fadeUnrelatedCells",description:"\u5f53 `activeTarget` \u4e0d\u4e3a `null` \u65f6\uff0c\u9690\u85cf\u5176\u4ed6\u8ddf\u8be5 `activeTarget` \u65e0\u5173\u7684\u5143\u7d20\u3002",type:"boolean",annotation:{type:"keyword",value:"boolean"}},{name:"zoomable",type:"boolean",default:"true",annotation:{type:"keyword",value:"boolean"}},{name:"scrollable",type:"boolean",default:"true",annotation:{type:"keyword",value:"boolean"}},{name:"pannable",type:"boolean",default:"true",annotation:{type:"keyword",value:"boolean"}},{name:"allowEdgeToArea",type:"boolean",default:"false",annotation:{type:"keyword",value:"boolean"}},{name:"dragBehavior",description:"\u6309\u4f4f\u9f20\u6807\u62d6\u52a8\u65f6\u7684\u884c\u4e3a\uff1a\n - `none`\uff1a\u65e0\n - `lasso`\uff1a\u7ed8\u5236\u9009\u533a\n - `grab`\uff1a\u62d6\u52a8\u753b\u5e03",default:'"none"',type:"DragBehavior",annotation:{type:"reference",typeName:{type:"identifier",name:"DragBehavior"}}},{name:"ctrlDragBehavior",description:"\u6309\u4f4f ctrl \u952e\u5e76\u6309\u4f4f\u9f20\u6807\u62d6\u52a8\u65f6\u7684\u884c\u4e3a\uff1a\n - `none`\uff1a\u65e0\n - `grab`\uff1a\u62d6\u52a8\u753b\u5e03",default:'"none"',type:"CtrlDragBehavior",annotation:{type:"reference",typeName:{type:"identifier",name:"CtrlDragBehavior"}}},{name:"scaleRange",attribute:!1,type:"RangeTuple",annotation:{type:"reference",typeName:{type:"identifier",name:"RangeTuple"}}},{name:"lineSettings",attribute:!1,type:"LineSettings",annotation:{type:"reference",typeName:{type:"identifier",name:"LineSettings"}}},{name:"lineConnector",attribute:!1,type:"LineConnecterConf | boolean",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"LineConnecterConf"}},{type:"keyword",value:"boolean"}]}}]})}),"\n",(0,a.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,a.jsx)(c.vy.Provider,{value:["InitialCell","InitialNodeCell","NodeCell","NodeBrickCell","BaseBrickCell","BaseCell","BaseNodeCell","NodeId","NodeView","InitialNodeView","EdgeCell","BaseEdgeCell","EdgeView","LineSettings","LineType","DecoratorCell","DecoratorType","DecoratorView","Direction","LayoutType","LayoutOptions","LayoutOptionsManual","LayoutSnapOptions","SnapOptions","SnapToGridOptions","SnapToObjectOptions","LayoutOptionsDagre","BaseLayoutOptions","AlignOrigin","LayoutOptionsForce","ForceCollideOptions","SizeTuple","NodeBrickConf","EdgeLineConf","BaseEdgeLineConf","LineAnimate","ActiveTarget","ActiveTargetOfSingular","ActiveTargetOfNode","ActiveTargetOfEdge","ActiveTargetOfDecorator","ActiveTargetOfMulti","DragBehavior","CtrlDragBehavior","RangeTuple","LineConnecterConf","MoveCellPayload","LineTuple","ResizeCellPayload","Cell","CellContextMenuDetail","ConnectNodesDetail","EdgeViewChangePayload","DecoratorTextChangeDetail","DropNodeInfo","AddNodeInfo","DropDecoratorInfo","AddEdgeInfo","UpdateCellsContext"],children:(0,a.jsx)(d.Z,{events:[{name:"activeTarget.change",detail:{type:"ActiveTarget | null",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"ActiveTarget"}},{type:"keyword",value:"null"}]}}},{name:"node.move",description:"",deprecated:"Use `cell.move` instead.",detail:{type:"MoveCellPayload",annotation:{type:"reference",typeName:{type:"identifier",name:"MoveCellPayload"}}}},{name:"cell.move",detail:{type:"MoveCellPayload",annotation:{type:"reference",typeName:{type:"identifier",name:"MoveCellPayload"}}}},{name:"cells.move",detail:{type:"MoveCellPayload[]",annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"MoveCellPayload"}}}}},{name:"cell.resize",detail:{type:"ResizeCellPayload",annotation:{type:"reference",typeName:{type:"identifier",name:"ResizeCellPayload"}}}},{name:"node.delete",description:"",deprecated:"Use `cell.delete` instead.",detail:{type:"Cell",annotation:{type:"reference",typeName:{type:"identifier",name:"Cell"}}}},{name:"cell.delete",detail:{type:"Cell",annotation:{type:"reference",typeName:{type:"identifier",name:"Cell"}}}},{name:"cells.delete",detail:{type:"Cell[]",annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"Cell"}}}}},{name:"cell.contextmenu",detail:{type:"CellContextMenuDetail",annotation:{type:"reference",typeName:{type:"identifier",name:"CellContextMenuDetail"}}}},{name:"edge.add",description:"\u901a\u8fc7\u753b\u5e03\u7ed8\u56fe\u7684\u65b9\u5f0f\u6dfb\u52a0\u8fb9\uff08\u624b\u52a8\u8c03\u7528 `addEdge` \u65b9\u6cd5\u4e0d\u4f1a\u89e6\u53d1\u8be5\u4e8b\u4ef6\uff09\u3002",detail:{type:"ConnectNodesDetail",annotation:{type:"reference",typeName:{type:"identifier",name:"ConnectNodesDetail"}}}},{name:"edge.view.change",detail:{type:"EdgeViewChangePayload",annotation:{type:"reference",typeName:{type:"identifier",name:"EdgeViewChangePayload"}}}},{name:"decorator.text.change",detail:{type:"DecoratorTextChangeDetail",annotation:{type:"reference",typeName:{type:"identifier",name:"DecoratorTextChangeDetail"}}}},{name:"node.container.change",description:"node\u8282\u70b9\u8ddf\u5bb9\u5668\u7ec4\u5173\u7cfb\u6539\u53d8\u4e8b\u4ef6\uff0c\u6709containerCell\u662f\u65b0\u589e\u5173\u7cfb\uff0c\u5426\u5219\u5220\u9664\u5173\u7cfb",detail:{type:"MoveCellPayload[]",annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"MoveCellPayload"}}}}},{name:"scale.change",description:"\u7f29\u653e\u53d8\u5316\u540e\uff0c\u4ece\u7d20\u6750\u5e93\u62d6\u62fd\u5143\u7d20\u8fdb\u753b\u5e03\u65f6\uff0c\u62d6\u62fd\u56fe\u50cf\u5e94\u8bbe\u7f6e\u5bf9\u5e94\u7684\u7f29\u653e\u6bd4\u4f8b\u3002",detail:{type:"number",annotation:{type:"keyword",value:"number"}}}]})}),"\n",(0,a.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(c.vy.Provider,{value:["InitialCell","InitialNodeCell","NodeCell","NodeBrickCell","BaseBrickCell","BaseCell","BaseNodeCell","NodeId","NodeView","InitialNodeView","EdgeCell","BaseEdgeCell","EdgeView","LineSettings","LineType","DecoratorCell","DecoratorType","DecoratorView","Direction","LayoutType","LayoutOptions","LayoutOptionsManual","LayoutSnapOptions","SnapOptions","SnapToGridOptions","SnapToObjectOptions","LayoutOptionsDagre","BaseLayoutOptions","AlignOrigin","LayoutOptionsForce","ForceCollideOptions","SizeTuple","NodeBrickConf","EdgeLineConf","BaseEdgeLineConf","LineAnimate","ActiveTarget","ActiveTargetOfSingular","ActiveTargetOfNode","ActiveTargetOfEdge","ActiveTargetOfDecorator","ActiveTargetOfMulti","DragBehavior","CtrlDragBehavior","RangeTuple","LineConnecterConf","MoveCellPayload","LineTuple","ResizeCellPayload","Cell","CellContextMenuDetail","ConnectNodesDetail","EdgeViewChangePayload","DecoratorTextChangeDetail","DropNodeInfo","AddNodeInfo","DropDecoratorInfo","AddEdgeInfo","UpdateCellsContext"],children:(0,a.jsx)(p.Z,{methods:[{name:"dropNode",params:[{name:"param_1",type:"DropNodeInfo",annotation:{type:"reference",typeName:{type:"identifier",name:"DropNodeInfo"}}}],returns:{type:"Promise<NodeCell | null>",annotation:{type:"reference",typeName:{type:"identifier",name:"Promise"},typeParameters:{type:"typeParameterInstantiation",params:[{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"NodeCell"}},{type:"keyword",value:"null"}]}]}}}},{name:"dropDecorator",params:[{name:"param_1",type:"DropDecoratorInfo",annotation:{type:"reference",typeName:{type:"identifier",name:"DropDecoratorInfo"}}}],returns:{type:"Promise<DecoratorCell | null>",annotation:{type:"reference",typeName:{type:"identifier",name:"Promise"},typeParameters:{type:"typeParameterInstantiation",params:[{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"DecoratorCell"}},{type:"keyword",value:"null"}]}]}}}},{name:"addNodes",params:[{name:"nodes",type:"AddNodeInfo[]",annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"AddNodeInfo"}}}}],returns:{type:"Promise<NodeCell[]>",annotation:{type:"reference",typeName:{type:"identifier",name:"Promise"},typeParameters:{type:"typeParameterInstantiation",params:[{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"NodeCell"}}}]}}}},{name:"addEdge",params:[{name:"param_1",type:"AddEdgeInfo",annotation:{type:"reference",typeName:{type:"identifier",name:"AddEdgeInfo"}}}],returns:{type:"Promise<EdgeCell>",annotation:{type:"reference",typeName:{type:"identifier",name:"Promise"},typeParameters:{type:"typeParameterInstantiation",params:[{type:"reference",typeName:{type:"identifier",name:"EdgeCell"}}]}}}},{name:"manuallyConnectNodes",params:[{name:"source",type:"NodeId",annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}}}],returns:{type:"Promise<ConnectNodesDetail>",annotation:{type:"reference",typeName:{type:"identifier",name:"Promise"},typeParameters:{type:"typeParameterInstantiation",params:[{type:"reference",typeName:{type:"identifier",name:"ConnectNodesDetail"}}]}}}},{name:"updateCells",params:[{name:"cells",type:"InitialCell[]",annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"InitialCell"}}}},{name:"ctx",type:"UpdateCellsContext",annotation:{type:"reference",typeName:{type:"identifier",name:"UpdateCellsContext"}}}],returns:{type:"Promise<{ updated: Cell[] }>",annotation:{type:"reference",typeName:{type:"identifier",name:"Promise"},typeParameters:{type:"typeParameterInstantiation",params:[{type:"typeLiteral",members:[{type:"propertySignature",key:{type:"identifier",name:"updated"},annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"Cell"}}},computed:!1}]}]}}}}]})}),"\n",(0,a.jsx)(n.h2,{id:"type-references",children:"Type references"}),"\n",(0,a.jsx)(l.Z,{types:[{type:"typeAlias",name:"InitialCell",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"InitialNodeCell"}},{type:"reference",typeName:{type:"identifier",name:"EdgeCell"}},{type:"reference",typeName:{type:"identifier",name:"DecoratorCell"}}]}},{type:"typeAlias",name:"InitialNodeCell",annotation:{type:"intersection",types:[{type:"reference",typeName:{type:"identifier",name:"Omit"},typeParameters:{type:"typeParameterInstantiation",params:[{type:"reference",typeName:{type:"identifier",name:"NodeCell"}},{type:"jsLiteral",value:"view"}]}},{type:"typeLiteral",members:[{type:"propertySignature",key:{type:"identifier",name:"view"},annotation:{type:"reference",typeName:{type:"identifier",name:"InitialNodeView"}},optional:!0,computed:!1}]}]}},{type:"typeAlias",name:"NodeCell",annotation:{type:"reference",typeName:{type:"identifier",name:"NodeBrickCell"}}},{type:"typeAlias",name:"NodeBrickCell",annotation:{type:"intersection",types:[{type:"reference",typeName:{type:"identifier",name:"BaseBrickCell"}},{type:"reference",typeName:{type:"identifier",name:"BaseNodeCell"}}]}},{type:"interface",name:"BaseBrickCell",body:[{type:"propertySignature",key:{type:"identifier",name:"tag"},annotation:{type:"jsLiteral",value:"brick"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"useBrick"},annotation:{type:"reference",typeName:{type:"identifier",name:"UseSingleBrickConf"}},optional:!0,computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"BaseCell"}}]},{type:"interface",name:"BaseCell",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"union",types:[{type:"jsLiteral",value:"node"},{type:"jsLiteral",value:"edge"},{type:"jsLiteral",value:"decorator"}]},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"data"},annotation:{type:"keyword",value:"unknown"},optional:!0,computed:!1}]},{type:"interface",name:"BaseNodeCell",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"jsLiteral",value:"node"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"id"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"containerId"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"view"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeView"}},computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"BaseCell"}}]},{type:"typeAlias",name:"NodeId",annotation:{type:"keyword",value:"string"}},{type:"interface",name:"NodeView",body:[{type:"propertySignature",key:{type:"identifier",name:"width"},annotation:{type:"keyword",value:"number"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"height"},annotation:{type:"keyword",value:"number"},computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"InitialNodeView"}}]},{type:"interface",name:"InitialNodeView",body:[{type:"propertySignature",key:{type:"identifier",name:"x"},annotation:{type:"keyword",value:"number"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"y"},annotation:{type:"keyword",value:"number"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"width"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"height"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1}]},{type:"typeAlias",name:"EdgeCell",annotation:{type:"reference",typeName:{type:"identifier",name:"BaseEdgeCell"}}},{type:"interface",name:"BaseEdgeCell",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"jsLiteral",value:"edge"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"source"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"target"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"view"},annotation:{type:"reference",typeName:{type:"identifier",name:"EdgeView"}},optional:!0,computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"BaseCell"}}]},{type:"interface",name:"EdgeView",body:[{type:"propertySignature",key:{type:"identifier",name:"exitPosition"},annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"NodePosition"}},{type:"keyword",value:"null"}]},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"entryPosition"},annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"NodePosition"}},{type:"keyword",value:"null"}]},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"vertices"},annotation:{type:"union",types:[{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"NodePosition"}}},{type:"keyword",value:"null"}]},optional:!0,computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"LineSettings"}}]},{type:"interface",name:"LineSettings",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"reference",typeName:{type:"identifier",name:"LineType"}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"curveType"},annotation:{type:"reference",typeName:{type:"identifier",name:"CurveType"}},optional:!0,computed:!1}]},{type:"typeAlias",name:"LineType",annotation:{type:"union",types:[{type:"jsLiteral",value:"straight"},{type:"jsLiteral",value:"curve"},{type:"jsLiteral",value:"polyline"}]}},{type:"interface",name:"DecoratorCell",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"jsLiteral",value:"decorator"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"decorator"},annotation:{type:"reference",typeName:{type:"identifier",name:"DecoratorType"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"id"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"view"},annotation:{type:"reference",typeName:{type:"identifier",name:"DecoratorView"}},computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"BaseCell"}}]},{type:"typeAlias",name:"DecoratorType",annotation:{type:"union",types:[{type:"jsLiteral",value:"text"},{type:"jsLiteral",value:"area"},{type:"jsLiteral",value:"container"}]}},{type:"interface",name:"DecoratorView",body:[{type:"propertySignature",key:{type:"identifier",name:"text"},annotation:{type:"keyword",value:"string"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"direction"},annotation:{type:"reference",typeName:{type:"identifier",name:"Direction"}},optional:!0,computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"NodeView"}}]},{type:"typeAlias",name:"Direction",annotation:{type:"union",types:[{type:"jsLiteral",value:"top"},{type:"jsLiteral",value:"right"},{type:"jsLiteral",value:"bottom"},{type:"jsLiteral",value:"left"}]}},{type:"typeAlias",name:"LayoutType",annotation:{type:"union",types:[{type:"jsLiteral",value:"manual"},{type:"jsLiteral",value:"force"},{type:"jsLiteral",value:"dagre"},{type:"keyword",value:"undefined"}]}},{type:"typeAlias",name:"LayoutOptions",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"LayoutOptionsManual"}},{type:"reference",typeName:{type:"identifier",name:"LayoutOptionsDagre"}},{type:"reference",typeName:{type:"identifier",name:"LayoutOptionsForce"}}]}},{type:"interface",name:"LayoutOptionsManual",body:[],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"LayoutSnapOptions"}}]},{type:"interface",name:"LayoutSnapOptions",body:[{type:"propertySignature",key:{type:"identifier",name:"snap"},annotation:{type:"union",types:[{type:"keyword",value:"boolean"},{type:"reference",typeName:{type:"identifier",name:"SnapOptions"}}]},optional:!0,computed:!1,description:"Snap options. Setting to true means enable all snap options"}]},{type:"interface",name:"SnapOptions",body:[{type:"propertySignature",key:{type:"identifier",name:"grid"},annotation:{type:"union",types:[{type:"keyword",value:"boolean"},{type:"reference",typeName:{type:"identifier",name:"SnapToGridOptions"}}]},optional:!0,computed:!1,description:"Snap to grid"},{type:"propertySignature",key:{type:"identifier",name:"object"},annotation:{type:"union",types:[{type:"keyword",value:"boolean"},{type:"reference",typeName:{type:"identifier",name:"SnapToObjectOptions"}}]},optional:!0,computed:!1,description:"Snap to object"}]},{type:"interface",name:"SnapToGridOptions",body:[{type:"propertySignature",key:{type:"identifier",name:"size"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1,description:""}]},{type:"interface",name:"SnapToObjectOptions",body:[{type:"propertySignature",key:{type:"identifier",name:"distance"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1,description:""}]},{type:"interface",name:"LayoutOptionsDagre",body:[{type:"propertySignature",key:{type:"identifier",name:"rankdir"},annotation:{type:"union",types:[{type:"jsLiteral",value:"TB"},{type:"jsLiteral",value:"BT"},{type:"jsLiteral",value:"LR"},{type:"jsLiteral",value:"RL"}]},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"ranksep"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"edgesep"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"nodesep"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"align"},annotation:{type:"union",types:[{type:"jsLiteral",value:"UL"},{type:"jsLiteral",value:"UR"},{type:"jsLiteral",value:"DL"},{type:"jsLiteral",value:"DR"}]},optional:!0,computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"BaseLayoutOptions"}}]},{type:"interface",name:"BaseLayoutOptions",body:[{type:"propertySignature",key:{type:"identifier",name:"nodePadding"},annotation:{type:"reference",typeName:{type:"identifier",name:"PartialRectTuple"}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"alignOrigin"},annotation:{type:"reference",typeName:{type:"identifier",name:"AlignOrigin"}},optional:!0,computed:!1,description:"\u6839\u636e\u8282\u70b9\u4ec0\u4e48\u4f4d\u7f6e\u8fdb\u884c\u5bf9\u9f50\uff0c\u652f\u6301\u5173\u952e\u5b57\u3001\u767e\u5206\u6bd4\u548c\u6bd4\u4f8b\u503c\u3002\n\u7b2c\u4e00\u4e2a\u503c\u4e3a x \u8f74\uff0c\u7b2c\u4e8c\u4e2a\u503c\u4e3a y \u8f74\u3002\n\u4f7f\u7528\u6570\u5b57\u65f6\uff0c\u8868\u793a\u76f8\u5bf9\u4e8e\u8282\u70b9\u7684\u5bbd\u9ad8\u7684\u6bd4\u4f8b\u3002\n\n\u6ce8\u610f\uff0c\u8282\u70b9\u5bbd\u9ad8\u5c06\u5305\u542b nodePadding \u7684\u503c\u3002"}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"LayoutSnapOptions"}}]},{type:"typeAlias",name:"AlignOrigin",annotation:{type:"tuple",elementTypes:[{type:"namedTupleMember",label:"x",optional:!1,elementType:{type:"union",types:[{type:"keyword",value:"string"},{type:"keyword",value:"number"}]}},{type:"namedTupleMember",label:"y",optional:!1,elementType:{type:"union",types:[{type:"keyword",value:"string"},{type:"keyword",value:"number"}]}}]}},{type:"interface",name:"LayoutOptionsForce",body:[{type:"propertySignature",key:{type:"identifier",name:"collide"},annotation:{type:"union",types:[{type:"keyword",value:"boolean"},{type:"reference",typeName:{type:"identifier",name:"ForceCollideOptions"}}]},optional:!0,computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"BaseLayoutOptions"}}]},{type:"interface",name:"ForceCollideOptions",body:[{type:"propertySignature",key:{type:"identifier",name:"radiusDiff"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"strength"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"iterations"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1}]},{type:"typeAlias",name:"SizeTuple",annotation:{type:"tuple",elementTypes:[{type:"namedTupleMember",label:"width",optional:!1,elementType:{type:"keyword",value:"number"}},{type:"namedTupleMember",label:"height",optional:!1,elementType:{type:"keyword",value:"number"}}]}},{type:"interface",name:"NodeBrickConf",body:[{type:"propertySignature",key:{type:"identifier",name:"useBrick"},annotation:{type:"reference",typeName:{type:"identifier",name:"UseSingleBrickConf"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"if"},annotation:{type:"union",types:[{type:"keyword",value:"string"},{type:"keyword",value:"boolean"},{type:"keyword",value:"null"}]},optional:!0,computed:!1}]},{type:"interface",name:"EdgeLineConf",body:[{type:"propertySignature",key:{type:"identifier",name:"if"},annotation:{type:"union",types:[{type:"keyword",value:"string"},{type:"keyword",value:"boolean"},{type:"keyword",value:"null"}]},optional:!0,computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"BaseEdgeLineConf"}}]},{type:"interface",name:"BaseEdgeLineConf",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"reference",typeName:{type:"identifier",name:"LineType"}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"curveType"},annotation:{type:"reference",typeName:{type:"identifier",name:"CurveType"}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"dashed"},annotation:{type:"keyword",value:"boolean"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"dotted"},annotation:{type:"keyword",value:"boolean"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"strokeWidth"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"strokeColor"},annotation:{type:"keyword",value:"string"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"interactStrokeWidth"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"parallelGap"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"markers"},annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"LineMarkerConf"}}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"showStartArrow"},annotation:{type:"keyword",value:"boolean"},optional:!0,computed:!1,description:"\u5df2\u5e9f\u5f03\uff0c\u4f7f\u7528markers\u4ee3\u66ff\uff0c\u914d\u7f6e\u4e86\u5bf9\u5e94\u7684\u7bad\u5934\u6d4b\u5219\u663e\u793a"},{type:"propertySignature",key:{type:"identifier",name:"showEndArrow"},annotation:{type:"keyword",value:"boolean"},optional:!0,computed:!1,description:"\u5df2\u5e9f\u5f03"},{type:"propertySignature",key:{type:"identifier",name:"animate"},annotation:{type:"reference",typeName:{type:"identifier",name:"LineAnimate"}},optional:!0,computed:!1}]},{type:"interface",name:"LineAnimate",body:[{type:"propertySignature",key:{type:"identifier",name:"useAnimate"},annotation:{type:"keyword",value:"boolean"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"duration"},annotation:{type:"keyword",value:"number"},computed:!1}]},{type:"typeAlias",name:"ActiveTarget",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"ActiveTargetOfSingular"}},{type:"reference",typeName:{type:"identifier",name:"ActiveTargetOfMulti"}}]}},{type:"typeAlias",name:"ActiveTargetOfSingular",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"ActiveTargetOfNode"}},{type:"reference",typeName:{type:"identifier",name:"ActiveTargetOfEdge"}},{type:"reference",typeName:{type:"identifier",name:"ActiveTargetOfDecorator"}}]}},{type:"interface",name:"ActiveTargetOfNode",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"jsLiteral",value:"node"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"id"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1}]},{type:"interface",name:"ActiveTargetOfEdge",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"jsLiteral",value:"edge"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"source"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"target"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1}]},{type:"interface",name:"ActiveTargetOfDecorator",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"jsLiteral",value:"decorator"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"id"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1}]},{type:"interface",name:"ActiveTargetOfMulti",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"jsLiteral",value:"multi"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"targets"},annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"ActiveTargetOfSingular"}}},computed:!1}]},{type:"typeAlias",name:"DragBehavior",annotation:{type:"union",types:[{type:"jsLiteral",value:"none"},{type:"jsLiteral",value:"lasso"},{type:"jsLiteral",value:"grab"}]}},{type:"typeAlias",name:"CtrlDragBehavior",annotation:{type:"union",types:[{type:"jsLiteral",value:"none"},{type:"jsLiteral",value:"grab"}]}},{type:"typeAlias",name:"RangeTuple",annotation:{type:"tuple",elementTypes:[{type:"namedTupleMember",label:"min",optional:!1,elementType:{type:"keyword",value:"number"}},{type:"namedTupleMember",label:"max",optional:!1,elementType:{type:"keyword",value:"number"}}]}},{type:"typeAlias",name:"LineConnecterConf",annotation:{type:"intersection",types:[{type:"reference",typeName:{type:"identifier",name:"Pick"},typeParameters:{type:"typeParameterInstantiation",params:[{type:"reference",typeName:{type:"identifier",name:"BaseEdgeLineConf"}},{type:"union",types:[{type:"jsLiteral",value:"strokeWidth"},{type:"jsLiteral",value:"strokeColor"},{type:"jsLiteral",value:"showStartArrow"},{type:"jsLiteral",value:"showEndArrow"}]}]}},{type:"typeLiteral",members:[{type:"propertySignature",key:{type:"identifier",name:"editingStrokeColor"},annotation:{type:"keyword",value:"string"},optional:!0,computed:!1}]}]}},{type:"interface",name:"MoveCellPayload",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"union",types:[{type:"jsLiteral",value:"node"},{type:"jsLiteral",value:"decorator"}]},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"id"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"x"},annotation:{type:"keyword",value:"number"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"y"},annotation:{type:"keyword",value:"number"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"width"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"height"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"decorator"},annotation:{type:"reference",typeName:{type:"identifier",name:"DecoratorType"}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"containerCell"},annotation:{type:"reference",typeName:{type:"identifier",name:"DecoratorCell"}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"guideLines"},annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"LineTuple"}}},optional:!0,computed:!1}]},{type:"typeAlias",name:"LineTuple",annotation:{type:"tuple",elementTypes:[{type:"namedTupleMember",label:"start",optional:!1,elementType:{type:"reference",typeName:{type:"identifier",name:"PositionTuple"}}},{type:"namedTupleMember",label:"end",optional:!1,elementType:{type:"reference",typeName:{type:"identifier",name:"PositionTuple"}}}]}},{type:"interface",name:"ResizeCellPayload",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"union",types:[{type:"jsLiteral",value:"node"},{type:"jsLiteral",value:"decorator"}]},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"id"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"width"},annotation:{type:"keyword",value:"number"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"height"},annotation:{type:"keyword",value:"number"},computed:!1}]},{type:"typeAlias",name:"Cell",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"NodeCell"}},{type:"reference",typeName:{type:"identifier",name:"EdgeCell"}},{type:"reference",typeName:{type:"identifier",name:"DecoratorCell"}}]}},{type:"interface",name:"CellContextMenuDetail",body:[{type:"propertySignature",key:{type:"identifier",name:"cell"},annotation:{type:"reference",typeName:{type:"identifier",name:"Cell"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"clientX"},annotation:{type:"keyword",value:"number"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"clientY"},annotation:{type:"keyword",value:"number"},computed:!1}]},{type:"interface",name:"ConnectNodesDetail",body:[{type:"propertySignature",key:{type:"identifier",name:"source"},annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"NodeCell"}},{type:"reference",typeName:{type:"identifier",name:"DecoratorCell"}}]},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"target"},annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"NodeCell"}},{type:"reference",typeName:{type:"identifier",name:"DecoratorCell"}}]},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"view"},annotation:{type:"reference",typeName:{type:"identifier",name:"EdgeView"}},optional:!0,computed:!1}]},{type:"typeAlias",name:"EdgeViewChangePayload",annotation:{type:"reference",typeName:{type:"identifier",name:"Pick"},typeParameters:{type:"typeParameterInstantiation",params:[{type:"reference",typeName:{type:"identifier",name:"EdgeCell"}},{type:"union",types:[{type:"jsLiteral",value:"source"},{type:"jsLiteral",value:"target"},{type:"jsLiteral",value:"view"}]}]}}},{type:"interface",name:"DecoratorTextChangeDetail",body:[{type:"propertySignature",key:{type:"identifier",name:"id"},annotation:{type:"keyword",value:"string"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"view"},annotation:{type:"reference",typeName:{type:"identifier",name:"DecoratorView"}},computed:!1}]},{type:"interface",name:"DropNodeInfo",body:[{type:"propertySignature",key:{type:"identifier",name:"position"},annotation:{type:"reference",typeName:{type:"identifier",name:"PositionTuple"}},computed:!1,description:"[PointerEvent::clientX, PointerEvent::clientY]"}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"AddNodeInfo"}}]},{type:"interface",name:"AddNodeInfo",body:[{type:"propertySignature",key:{type:"identifier",name:"id"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"useBrick"},annotation:{type:"reference",typeName:{type:"identifier",name:"UseSingleBrickConf"}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"data"},annotation:{type:"keyword",value:"unknown"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"size"},annotation:{type:"reference",typeName:{type:"identifier",name:"SizeTuple"}},optional:!0,computed:!1}]},{type:"interface",name:"DropDecoratorInfo",body:[{type:"propertySignature",key:{type:"identifier",name:"decorator"},annotation:{type:"reference",typeName:{type:"identifier",name:"DecoratorType"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"position"},annotation:{type:"reference",typeName:{type:"identifier",name:"PositionTuple"}},computed:!1,description:"[PointerEvent::clientX, PointerEvent::clientY]"},{type:"propertySignature",key:{type:"identifier",name:"text"},annotation:{type:"keyword",value:"string"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"direction"},annotation:{type:"reference",typeName:{type:"identifier",name:"Direction"}},optional:!0,computed:!1}]},{type:"interface",name:"AddEdgeInfo",body:[{type:"propertySignature",key:{type:"identifier",name:"source"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"target"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"data"},annotation:{type:"keyword",value:"unknown"},optional:!0,computed:!1}]},{type:"interface",name:"UpdateCellsContext",body:[{type:"propertySignature",key:{type:"identifier",name:"reason"},annotation:{type:"jsLiteral",value:"add-related-nodes"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"parent"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1}]}]})]})}function T(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(f,{...e})}):f(e)}function v(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);