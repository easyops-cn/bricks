"use strict";(globalThis.webpackChunkbrick_docs=globalThis.webpackChunkbrick_docs||[]).push([[9730],{3230:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>f,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var i=t(5893),a=t(1151),r=t(4752),o=t(7886),p=(t(7268),t(5673)),d=(t(1243),t(9898),t(9265)),y=t(2535);const l={description:"<eo-display-canvas>"},c=void 0,s={id:"bricks/diagram/eo-display-canvas",title:"eo-display-canvas",description:"<eo-display-canvas>",source:"@site/docs/bricks/diagram/eo-display-canvas.mdx",sourceDirName:"bricks/diagram",slug:"/bricks/diagram/eo-display-canvas",permalink:"/bricks/diagram/eo-display-canvas",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{description:"<eo-display-canvas>"},sidebar:"docsSidebar",previous:{title:"eo-diagram",permalink:"/bricks/diagram/eo-diagram"},next:{title:"eo-draw-canvas",permalink:"/bricks/diagram/eo-draw-canvas"}},m={},u=[{value:"Examples",id:"examples",level:2},{value:"Basic",id:"basic",level:3},{value:"Force layout",id:"force-layout",level:3},{value:"Dagre layout",id:"dagre-layout",level:3},{value:"Degraded diagram",id:"degraded-diagram",level:3},{value:"Properties",id:"properties",level:2},{value:"Events",id:"events",level:2},{value:"Type references",id:"type-references",level:2}];function g(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return y.vy||v("TypeReferencesContext",!1),y.vy.Provider||v("TypeReferencesContext.Provider",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.Z,{name:"eo-display-canvas",alias:null,insider:!1,deprecated:!1}),"\n",(0,i.jsx)(n.p,{children:"\u7528\u4e8e\u5c55\u793a\u67e5\u770b\u7684\u753b\u5e03\u6784\u4ef6\u3002"}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"basic",children:"Basic"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'preview minHeight="600px"',children:'- brick: div\n  properties:\n    style:\n      display: flex\n      height: 600px\n      gap: 1em\n  context:\n    - name: initialCells\n      value: |\n        <%\n          [\n            {\n              type: "decorator",\n              id: "area-1",\n              decorator: "area",\n              view: {\n                x: 10,\n                y: 20,\n                width: 400,\n                height: 300,\n              },\n            },\n            {\n              type: "decorator",\n              id: "container-1",\n              decorator: "container",\n              view: {\n               x: 50,\n                y: 400,\n                width: 280,\n                height: 120,\n                direction: "top",\n                text: " \u4e0a\u5c42\u670d\u52a1"\n              },\n            },\n            {\n              type: "edge",\n              source: "X",\n              target: "Y",\n              data: {\n                virtual: false,\n                showStartArrow: false,\n                strokeColor:"red",\n                strokeWidth: 5,\n              }\n            },\n            {\n              type: "edge",\n              source: "X",\n              target: "W",\n              data: {\n                virtual: false,\n                showStartArrow: true,\n                strokeColor:"pink",\n                animate:{\n                  useAnimate: true,\n                  duration: 4\n                }\n              }\n            },\n            {\n              type: "edge",\n              source: "X",\n              target: "Z",\n              data: {\n                virtual: true,\n                showStartArrow: true,\n                strokeColor:"blue",\n                animate:{\n                  useAnimate: true\n                }\n              }\n            },\n            {\n              type: "edge",\n              source: "W",\n              target: "Z",\n              view: {\n                entryPosition: { x: 0, y: 0.5 },\n                exitPosition: {x: 0.5, y: 0}\n              }\n            }\n          ].concat(\n            ["X", "Y", "Z", "W"].map((id) => ({\n              type: "node",\n              id,\n              containerId: ["X","Y","Z"].includes(id)?"container-1":undefined,\n              data: {\n                name: `Node ${id}`,\n              },\n              view: {\n                x: Math.round(\n                  id === "X"\n                    ? 200 + Math.random() * 200\n                    : id === "Y"\n                    ? Math.random() * 300\n                    : 300 + Math.random() * 300\n                ),\n                y: (id === "X" ? 0 : 300) + Math.round((Math.random() * 200)),\n                width: 60,\n                height: 60,\n              }\n            }))\n          ).concat([\n            {\n              type: "decorator",\n              id: "text-1",\n              decorator: "text",\n              view: {\n                x: 100,\n                y: 120,\n                width: 100,\n                height: 20,\n                text: "Hello!"\n              },\n            },\n          ])\n        %>\n    - name: activeTarget\n    - name: targetCell\n  children:\n    - brick: div\n      properties:\n        style:\n          flex: 1\n          minWidth: 0\n      children:\n        - brick: eo-display-canvas\n          properties:\n            style:\n              width: 100%\n              height: 100%\n            activeTarget: <%= CTX.activeTarget %>\n            fadeUnrelatedCells: true\n            # Initial nodes only\n            defaultNodeSize: [60, 60]\n            defaultNodeBricks:\n              - useBrick:\n                  brick: diagram.experimental-node\n                  properties:\n                    textContent: <% `Node ${DATA.node.id}` %>\n                    status: |\n                      <%=\n                        CTX.activeTarget?.type === "node" && CTX.activeTarget.id === DATA.node.id\n                          ? "highlighted"\n                          // : CTX.unrelated.some(n =>\n                          //     n.type === "node" && n.id === DATA.node.id\n                          //   )\n                          // ? "faded"\n                          : "default"\n                      %>\n            defaultEdgeLines:\n              - if: true\n                dashed: <% DATA.edge?.data?.virtual %>\n                strokeColor: <% DATA.edge?.data?.strokeColor %>\n                showStartArrow: <% DATA.edge?.data?.showStartArrow %>\n                strokeWidth: <% DATA.edge?.data?.strokeWidth %>\n                animate: <% DATA.edge?.data?.animate %>\n                showStartArrow: true\n                markers:\n                  - placement: end\n                    type: circle\n                  - placement: start\n                    type: arrow\n            cells: <% CTX.initialCells %>\n          events:\n            activeTarget.change:\n              action: context.replace\n              args:\n                - activeTarget\n                - <% EVENT.detail %>\n            cell.contextmenu:\n              - target: eo-context-menu\n                method: open\n                args:\n                  - position:\n                      - <% EVENT.detail.clientX %>\n                      - <% EVENT.detail.clientY %>\n              - action: context.replace\n                args:\n                  - targetCell\n                  - <% EVENT.detail.cell %>\n            scale.change:\n              action: context.replace\n              args:\n                - scale\n                - <% EVENT.detail %>\n- brick: eo-context-menu\n  properties:\n    actions: |\n      <%=\n        [\n          {\n            text: `Test ${CTX.targetCell?.type}`,\n            event: `test-${CTX.targetCell?.type}`,\n          }\n        ]\n      %>\n# -- YAML HEADING DELIMITER start (1nbbm8) --\ndiagram/eo-display-canvas/basic\n# -- YAML HEADING DELIMITER end (1nbbm8) --\n# -- YAML DELIMITER (1nbbm8) --\n# <div style="display: flex; height: 600px; gap: 1em">\n#   <div style="flex: 1; min-width: 0">\n#     <eo-display-canvas\n#       style="width: 100%; height: 100%"\n#       fade-unrelated-cells\n#       id="brick-1"\n#     ></eo-display-canvas>\n#   </div>\n# </div>\n# <eo-context-menu id="brick-2"></eo-context-menu>\n# \n# <script>\n#   const brick_1 = document.getElementById("brick-1");\n#   brick_1.activeTarget = "<%= CTX.activeTarget %>";\n#   brick_1.defaultNodeSize = [60, 60];\n#   brick_1.defaultNodeBricks = [\n#     {\n#       useBrick: {\n#         brick: "diagram.experimental-node",\n#         properties: {\n#           textContent: "<% `Node ${DATA.node.id}` %>",\n#           status:\n#             \'<%=\\n  CTX.activeTarget?.type === "node" && CTX.activeTarget.id === DATA.node.id\\n    ? "highlighted"\\n    // : CTX.unrelated.some(n =>\\n    //     n.type === "node" && n.id === DATA.node.id\\n    //   )\\n    // ? "faded"\\n    : "default"\\n%>\\n\',\n#         },\n#       },\n#     },\n#   ];\n#   brick_1.defaultEdgeLines = [\n#     {\n#       if: true,\n#       dashed: "<% DATA.edge?.data?.virtual %>",\n#       strokeColor: "<% DATA.edge?.data?.strokeColor %>",\n#       showStartArrow: true,\n#       strokeWidth: "<% DATA.edge?.data?.strokeWidth %>",\n#       animate: "<% DATA.edge?.data?.animate %>",\n#       markers: [\n#         {\n#           placement: "end",\n#           type: "circle",\n#         },\n#         {\n#           placement: "start",\n#           type: "arrow",\n#         },\n#       ],\n#     },\n#   ];\n#   brick_1.cells = "<% CTX.initialCells %>";\n#   brick_1.addEventListener("activeTarget.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_1.addEventListener("cell.contextmenu", (e) => {\n#     const brick = document.querySelector("eo-context-menu");\n#     brick.open({\n#       position: ["<% EVENT.detail.clientX %>", "<% EVENT.detail.clientY %>"],\n#     });\n#   });\n#   brick_1.addEventListener("cell.contextmenu", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_1.addEventListener("scale.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n# \n#   const brick_2 = document.getElementById("brick-2");\n#   brick_2.actions =\n#     "<%=\\n  [\\n    {\\n      text: `Test ${CTX.targetCell?.type}`,\\n      event: `test-${CTX.targetCell?.type}`,\\n    }\\n  ]\\n%>\\n";\n# <\/script>\n# \n'})}),"\n",(0,i.jsx)(n.h3,{id:"force-layout",children:"Force layout"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'preview minHeight="600px"',children:'- brick: div\n  properties:\n    style:\n      display: flex\n      height: 600px\n      gap: 1em\n  context:\n    - name: initialCells\n      value: |\n        <%\n          [\n            {\n              type: "decorator",\n              id: "area-1",\n              decorator: "area",\n              view: {\n                x: 10,\n                y: 20,\n                width: 400,\n                height: 300,\n              },\n            },\n            {\n              type: "edge",\n              source: "X",\n              target: "Y",\n            },\n            {\n              type: "edge",\n              source: "X",\n              target: "Z",\n              data: {\n                virtual: true,\n              }\n            },\n          ].concat(\n            ["X", "Y", "Z", "W"].map((id) => ({\n              type: "node",\n              id,\n              data: {\n                name: `Node ${id}`,\n              },\n              view: {\n                width: 60,\n                height: 60,\n              }\n            }))\n          ).concat([\n            {\n              type: "decorator",\n              id: "text-1",\n              decorator: "text",\n              view: {\n                x: 100,\n                y: 120,\n                width: 100,\n                height: 20,\n                text: "Hello!"\n              },\n            },\n          ])\n        %>\n    - name: activeTarget\n    - name: targetCell\n  children:\n    - brick: div\n      properties:\n        style:\n          flex: 1\n          minWidth: 0\n      children:\n        - brick: eo-display-canvas\n          properties:\n            style:\n              width: 100%\n              height: 100%\n            activeTarget: <%= CTX.activeTarget %>\n            fadeUnrelatedCells: true\n            layout: force\n            # Initial nodes only\n            defaultNodeSize: [60, 60]\n            defaultNodeBricks:\n              - useBrick:\n                  brick: diagram.experimental-node\n                  properties:\n                    textContent: <% `Node ${DATA.node.id}` %>\n                    status: |\n                      <%=\n                        CTX.activeTarget?.type === "node" && CTX.activeTarget.id === DATA.node.id\n                          ? "highlighted"\n                          // : CTX.unrelated.some(n =>\n                          //     n.type === "node" && n.id === DATA.node.id\n                          //   )\n                          // ? "faded"\n                          : "default"\n                      %>\n            defaultEdgeLines:\n              - if: <% DATA.edge.data?.virtual %>\n                dashed: true\n            cells: <% CTX.initialCells %>\n          events:\n            activeTarget.change:\n              action: context.replace\n              args:\n                - activeTarget\n                - <% EVENT.detail %>\n            cell.contextmenu:\n              - target: eo-context-menu\n                method: open\n                args:\n                  - position:\n                      - <% EVENT.detail.clientX %>\n                      - <% EVENT.detail.clientY %>\n              - action: context.replace\n                args:\n                  - targetCell\n                  - <% EVENT.detail.cell %>\n            scale.change:\n              action: context.replace\n              args:\n                - scale\n                - <% EVENT.detail %>\n- brick: eo-context-menu\n  properties:\n    actions: |\n      <%=\n        [\n          {\n            text: `Test ${CTX.targetCell?.type}`,\n            event: `test-${CTX.targetCell?.type}`,\n          }\n        ]\n      %>\n# -- YAML HEADING DELIMITER start (1nbbm8) --\ndiagram/eo-display-canvas/force layout\n# -- YAML HEADING DELIMITER end (1nbbm8) --\n# -- YAML DELIMITER (1nbbm8) --\n# <div style="display: flex; height: 600px; gap: 1em">\n#   <div style="flex: 1; min-width: 0">\n#     <eo-display-canvas\n#       style="width: 100%; height: 100%"\n#       fade-unrelated-cells\n#       layout="force"\n#       id="brick-1"\n#     ></eo-display-canvas>\n#   </div>\n# </div>\n# <eo-context-menu id="brick-2"></eo-context-menu>\n# \n# <script>\n#   const brick_1 = document.getElementById("brick-1");\n#   brick_1.activeTarget = "<%= CTX.activeTarget %>";\n#   brick_1.defaultNodeSize = [60, 60];\n#   brick_1.defaultNodeBricks = [\n#     {\n#       useBrick: {\n#         brick: "diagram.experimental-node",\n#         properties: {\n#           textContent: "<% `Node ${DATA.node.id}` %>",\n#           status:\n#             \'<%=\\n  CTX.activeTarget?.type === "node" && CTX.activeTarget.id === DATA.node.id\\n    ? "highlighted"\\n    // : CTX.unrelated.some(n =>\\n    //     n.type === "node" && n.id === DATA.node.id\\n    //   )\\n    // ? "faded"\\n    : "default"\\n%>\\n\',\n#         },\n#       },\n#     },\n#   ];\n#   brick_1.defaultEdgeLines = [\n#     {\n#       if: "<% DATA.edge.data?.virtual %>",\n#       dashed: true,\n#     },\n#   ];\n#   brick_1.cells = "<% CTX.initialCells %>";\n#   brick_1.addEventListener("activeTarget.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_1.addEventListener("cell.contextmenu", (e) => {\n#     const brick = document.querySelector("eo-context-menu");\n#     brick.open({\n#       position: ["<% EVENT.detail.clientX %>", "<% EVENT.detail.clientY %>"],\n#     });\n#   });\n#   brick_1.addEventListener("cell.contextmenu", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_1.addEventListener("scale.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n# \n#   const brick_2 = document.getElementById("brick-2");\n#   brick_2.actions =\n#     "<%=\\n  [\\n    {\\n      text: `Test ${CTX.targetCell?.type}`,\\n      event: `test-${CTX.targetCell?.type}`,\\n    }\\n  ]\\n%>\\n";\n# <\/script>\n# \n'})}),"\n",(0,i.jsx)(n.h3,{id:"dagre-layout",children:"Dagre layout"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'preview minHeight="600px"',children:'- brick: div\n  properties:\n    style:\n      display: flex\n      height: 600px\n      gap: 1em\n  context:\n    - name: initialCells\n      value: |\n        <%\n          [\n            {\n              type: "decorator",\n              id: "area-1",\n              decorator: "area",\n              view: {\n                x: 10,\n                y: 20,\n                width: 400,\n                height: 300,\n              },\n            },\n            {\n              type: "edge",\n              source: "X",\n              target: "Y",\n            },\n            {\n              type: "edge",\n              source: "X",\n              target: "Z",\n              data: {\n                virtual: true,\n              }\n            },\n          ].concat(\n            ["X", "Y", "Z", "W"].map((id) => ({\n              type: "node",\n              id,\n              data: {\n                name: `Node ${id}`,\n              },\n              view: {\n                width: 60,\n                height: 60,\n              }\n            }))\n          ).concat([\n            {\n              type: "decorator",\n              id: "text-1",\n              decorator: "text",\n              view: {\n                x: 100,\n                y: 120,\n                width: 100,\n                height: 20,\n                text: "Hello!"\n              },\n            },\n          ])\n        %>\n    - name: activeTarget\n    - name: targetCell\n  children:\n    - brick: div\n      properties:\n        style:\n          flex: 1\n          minWidth: 0\n      children:\n        - brick: eo-display-canvas\n          properties:\n            style:\n              width: 100%\n              height: 100%\n            activeTarget: <%= CTX.activeTarget %>\n            fadeUnrelatedCells: true\n            layout: dagre\n            # Initial nodes only\n            defaultNodeSize: [60, 60]\n            defaultNodeBricks:\n              - useBrick:\n                  brick: diagram.experimental-node\n                  properties:\n                    textContent: <% `Node ${DATA.node.id}` %>\n                    status: |\n                      <%=\n                        CTX.activeTarget?.type === "node" && CTX.activeTarget.id === DATA.node.id\n                          ? "highlighted"\n                          // : CTX.unrelated.some(n =>\n                          //     n.type === "node" && n.id === DATA.node.id\n                          //   )\n                          // ? "faded"\n                          : "default"\n                      %>\n            defaultEdgeLines:\n              - if: <% DATA.edge.data?.virtual %>\n                dashed: true\n            cells: <% CTX.initialCells %>\n          events:\n            activeTarget.change:\n              action: context.replace\n              args:\n                - activeTarget\n                - <% EVENT.detail %>\n            cell.contextmenu:\n              - target: eo-context-menu\n                method: open\n                args:\n                  - position:\n                      - <% EVENT.detail.clientX %>\n                      - <% EVENT.detail.clientY %>\n              - action: context.replace\n                args:\n                  - targetCell\n                  - <% EVENT.detail.cell %>\n            scale.change:\n              action: context.replace\n              args:\n                - scale\n                - <% EVENT.detail %>\n- brick: eo-context-menu\n  properties:\n    actions: |\n      <%=\n        [\n          {\n            text: `Test ${CTX.targetCell?.type}`,\n            event: `test-${CTX.targetCell?.type}`,\n          }\n        ]\n      %>\n# -- YAML HEADING DELIMITER start (1nbbm8) --\ndiagram/eo-display-canvas/dagre layout\n# -- YAML HEADING DELIMITER end (1nbbm8) --\n# -- YAML DELIMITER (1nbbm8) --\n# <div style="display: flex; height: 600px; gap: 1em">\n#   <div style="flex: 1; min-width: 0">\n#     <eo-display-canvas\n#       style="width: 100%; height: 100%"\n#       fade-unrelated-cells\n#       layout="dagre"\n#       id="brick-1"\n#     ></eo-display-canvas>\n#   </div>\n# </div>\n# <eo-context-menu id="brick-2"></eo-context-menu>\n# \n# <script>\n#   const brick_1 = document.getElementById("brick-1");\n#   brick_1.activeTarget = "<%= CTX.activeTarget %>";\n#   brick_1.defaultNodeSize = [60, 60];\n#   brick_1.defaultNodeBricks = [\n#     {\n#       useBrick: {\n#         brick: "diagram.experimental-node",\n#         properties: {\n#           textContent: "<% `Node ${DATA.node.id}` %>",\n#           status:\n#             \'<%=\\n  CTX.activeTarget?.type === "node" && CTX.activeTarget.id === DATA.node.id\\n    ? "highlighted"\\n    // : CTX.unrelated.some(n =>\\n    //     n.type === "node" && n.id === DATA.node.id\\n    //   )\\n    // ? "faded"\\n    : "default"\\n%>\\n\',\n#         },\n#       },\n#     },\n#   ];\n#   brick_1.defaultEdgeLines = [\n#     {\n#       if: "<% DATA.edge.data?.virtual %>",\n#       dashed: true,\n#     },\n#   ];\n#   brick_1.cells = "<% CTX.initialCells %>";\n#   brick_1.addEventListener("activeTarget.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_1.addEventListener("cell.contextmenu", (e) => {\n#     const brick = document.querySelector("eo-context-menu");\n#     brick.open({\n#       position: ["<% EVENT.detail.clientX %>", "<% EVENT.detail.clientY %>"],\n#     });\n#   });\n#   brick_1.addEventListener("cell.contextmenu", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_1.addEventListener("scale.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n# \n#   const brick_2 = document.getElementById("brick-2");\n#   brick_2.actions =\n#     "<%=\\n  [\\n    {\\n      text: `Test ${CTX.targetCell?.type}`,\\n      event: `test-${CTX.targetCell?.type}`,\\n    }\\n  ]\\n%>\\n";\n# <\/script>\n# \n'})}),"\n",(0,i.jsx)(n.h3,{id:"degraded-diagram",children:"Degraded diagram"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'preview minHeight="600px"',children:'- brick: div\n  properties:\n    style:\n      display: flex\n      height: 600px\n      gap: 1em\n  context:\n    - name: initialCells\n      value: |\n        <%\n          ((...seeds) => seeds.map((seed) => ({\n            type: "node",\n            id: seed,\n            data: {\n              name: seed,\n            },\n          })))(\n            ...(\n              new Array(500).fill(null).map((_, i) => String(i))\n            )\n          )\n        %>\n    - name: activeTarget\n    - name: targetCell\n  children:\n    - brick: div\n      properties:\n        style:\n          flex: 1\n          minWidth: 0\n      children:\n        - brick: eo-display-canvas\n          properties:\n            style:\n              width: 100%\n              height: 100%\n            activeTarget: <%= CTX.activeTarget %>\n            fadeUnrelatedCells: true\n            layout: force\n            # Initial nodes only\n            defaultNodeSize: [60, 60]\n            defaultNodeBricks:\n              - useBrick:\n                  brick: diagram.experimental-node\n                  properties:\n                    textContent: <% `Node ${DATA.node.id}` %>\n                    status: |\n                      <%=\n                        CTX.activeTarget?.type === "node" && CTX.activeTarget.id === DATA.node.id\n                          ? "highlighted"\n                          // : CTX.unrelated.some(n =>\n                          //     n.type === "node" && n.id === DATA.node.id\n                          //   )\n                          // ? "faded"\n                          : "default"\n                      %>\n            defaultEdgeLines:\n              - if: true\n                dashed: <% DATA.edge?.data?.virtual %>\n                strokeColor: <% DATA.edge?.data?.strokeColor %>\n                showStartArrow: <% DATA.edge?.data?.showStartArrow %>\n                strokeWidth: <% DATA.edge?.data?.strokeWidth %>\n                animate: <% DATA.edge?.data?.animate %>\n            cells: <% CTX.initialCells %>\n          events:\n            activeTarget.change:\n              action: context.replace\n              args:\n                - activeTarget\n                - <% EVENT.detail %>\n            cell.contextmenu:\n              - target: eo-context-menu\n                method: open\n                args:\n                  - position:\n                      - <% EVENT.detail.clientX %>\n                      - <% EVENT.detail.clientY %>\n              - action: context.replace\n                args:\n                  - targetCell\n                  - <% EVENT.detail.cell %>\n            scale.change:\n              action: context.replace\n              args:\n                - scale\n                - <% EVENT.detail %>\n- brick: eo-context-menu\n  properties:\n    actions: |\n      <%=\n        [\n          {\n            text: `Test ${CTX.targetCell?.type}`,\n            event: `test-${CTX.targetCell?.type}`,\n          }\n        ]\n      %>\n# -- YAML HEADING DELIMITER start (1nbbm8) --\ndiagram/eo-display-canvas/degraded diagram\n# -- YAML HEADING DELIMITER end (1nbbm8) --\n# -- YAML DELIMITER (1nbbm8) --\n# <div style="display: flex; height: 600px; gap: 1em">\n#   <div style="flex: 1; min-width: 0">\n#     <eo-display-canvas\n#       style="width: 100%; height: 100%"\n#       fade-unrelated-cells\n#       layout="force"\n#       id="brick-1"\n#     ></eo-display-canvas>\n#   </div>\n# </div>\n# <eo-context-menu id="brick-2"></eo-context-menu>\n# \n# <script>\n#   const brick_1 = document.getElementById("brick-1");\n#   brick_1.activeTarget = "<%= CTX.activeTarget %>";\n#   brick_1.defaultNodeSize = [60, 60];\n#   brick_1.defaultNodeBricks = [\n#     {\n#       useBrick: {\n#         brick: "diagram.experimental-node",\n#         properties: {\n#           textContent: "<% `Node ${DATA.node.id}` %>",\n#           status:\n#             \'<%=\\n  CTX.activeTarget?.type === "node" && CTX.activeTarget.id === DATA.node.id\\n    ? "highlighted"\\n    // : CTX.unrelated.some(n =>\\n    //     n.type === "node" && n.id === DATA.node.id\\n    //   )\\n    // ? "faded"\\n    : "default"\\n%>\\n\',\n#         },\n#       },\n#     },\n#   ];\n#   brick_1.defaultEdgeLines = [\n#     {\n#       if: true,\n#       dashed: "<% DATA.edge?.data?.virtual %>",\n#       strokeColor: "<% DATA.edge?.data?.strokeColor %>",\n#       showStartArrow: "<% DATA.edge?.data?.showStartArrow %>",\n#       strokeWidth: "<% DATA.edge?.data?.strokeWidth %>",\n#       animate: "<% DATA.edge?.data?.animate %>",\n#     },\n#   ];\n#   brick_1.cells = "<% CTX.initialCells %>";\n#   brick_1.addEventListener("activeTarget.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_1.addEventListener("cell.contextmenu", (e) => {\n#     const brick = document.querySelector("eo-context-menu");\n#     brick.open({\n#       position: ["<% EVENT.detail.clientX %>", "<% EVENT.detail.clientY %>"],\n#     });\n#   });\n#   brick_1.addEventListener("cell.contextmenu", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n#   brick_1.addEventListener("scale.change", (e) => {\n#     // WARN: encountered incompatible event handlers in HTML mode, please try YAML.\n#   });\n# \n#   const brick_2 = document.getElementById("brick-2");\n#   brick_2.actions =\n#     "<%=\\n  [\\n    {\\n      text: `Test ${CTX.targetCell?.type}`,\\n      event: `test-${CTX.targetCell?.type}`,\\n    }\\n  ]\\n%>\\n";\n# <\/script>\n# \n'})}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(y.vy.Provider,{value:["InitialCell","InitialNodeCell","NodeCell","NodeBrickCell","BaseBrickCell","BaseCell","BaseNodeCell","NodeId","NodeView","InitialNodeView","EdgeCell","BaseEdgeCell","EdgeView","LineSettings","LineType","DecoratorCell","DecoratorType","DecoratorView","Direction","LayoutType","LayoutOptions","LayoutOptionsManual","LayoutSnapOptions","SnapOptions","SnapToGridOptions","SnapToObjectOptions","LayoutOptionsDagre","BaseLayoutOptions","AlignOrigin","LayoutOptionsForce","ForceCollideOptions","SizeTuple","NodeBrickConf","EdgeLineConf","BaseEdgeLineConf","LineAnimate","ActiveTarget","ActiveTargetOfSingular","ActiveTargetOfNode","ActiveTargetOfEdge","ActiveTargetOfDecorator","ActiveTargetOfMulti","RangeTuple","CellContextMenuDetail","Cell"],children:(0,i.jsx)(o.Z,{properties:[{name:"cells",description:"\u7528\u4e8e\u67e5\u770b\u7684\u753b\u5e03\u53ef\u4ee5\u66f4\u65b0 `cells` \u5c5e\u6027\u3002",attribute:!1,type:"InitialCell[]",annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"InitialCell"}}}},{name:"layout",type:"LayoutType",annotation:{type:"reference",typeName:{type:"identifier",name:"LayoutType"}}},{name:"layoutOptions",attribute:!1,type:"LayoutOptions",annotation:{type:"reference",typeName:{type:"identifier",name:"LayoutOptions"}}},{name:"defaultNodeSize",attribute:!1,type:"SizeTuple",default:"[DEFAULT_NODE_SIZE, DEFAULT_NODE_SIZE]",annotation:{type:"reference",typeName:{type:"identifier",name:"SizeTuple"}}},{name:"defaultNodeBricks",attribute:!1,type:"NodeBrickConf[]",annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"NodeBrickConf"}}}},{name:"degradedThreshold",description:"\u5f53\u8282\u70b9\u6570\u91cf\u8fbe\u5230\u6216\u8d85\u8fc7 `degradedThreshold` \u65f6\uff0c\u8282\u70b9\u5c06\u88ab\u964d\u7ea7\u5c55\u793a\u3002",default:"500",type:"number",annotation:{type:"keyword",value:"number"}},{name:"degradedNodeLabel",description:"\u8bbe\u7f6e\u8282\u70b9\u5c06\u964d\u7ea7\u5c55\u793a\u65f6\u663e\u793a\u7684\u540d\u79f0\u3002",default:'"<% DATA.node.id %>"',attribute:!1,type:"string",annotation:{type:"keyword",value:"string"}},{name:"defaultEdgeLines",description:"\u4f7f\u7528\u6761\u4ef6\u5224\u65ad\u8bbe\u7f6e\u9ed8\u8ba4\u7684\u8fb9\u5bf9\u5e94\u7684\u8fde\u7ebf\u3002\u5728 `if` \u8868\u8fbe\u5f0f\u4e2d `DATA` \u4e3a `{ edge }`\uff0c\u4f8b\u5982\uff1a\n\n```yaml\ndefaultEdgeLines:\n  - if: <% DATA.edge.data?.virtual %>\n    dashed: true\n```",attribute:!1,type:"EdgeLineConf[]",annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"EdgeLineConf"}}}},{name:"activeTarget",attribute:!1,type:"ActiveTarget | null",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"ActiveTarget"}},{type:"keyword",value:"null"}]}},{name:"fadeUnrelatedCells",description:"\u5f53\u9f20\u6807\u60ac\u6d6e\u5230\u67d0\u8282\u70b9\u4e0a\u65f6\uff0c\u9690\u85cf\u5176\u4ed6\u8ddf\u8be5\u8282\u70b9\u65e0\u5173\u7684\u5143\u7d20\u3002",type:"boolean",annotation:{type:"keyword",value:"boolean"}},{name:"zoomable",type:"boolean",default:"true",annotation:{type:"keyword",value:"boolean"}},{name:"scrollable",type:"boolean",default:"true",annotation:{type:"keyword",value:"boolean"}},{name:"pannable",type:"boolean",default:"true",annotation:{type:"keyword",value:"boolean"}},{name:"scaleRange",attribute:!1,type:"RangeTuple",annotation:{type:"reference",typeName:{type:"identifier",name:"RangeTuple"}}},{name:"hideZoomBar",description:"\u9690\u85cf\u53f3\u4e0b\u89d2\u653e\u5927\u7f29\u5c0f\u7684\u63a7\u5236\u680f",type:"boolean",annotation:{type:"keyword",value:"boolean"}},{name:"autoCenterWhenCellsChange",description:"\u6bcf\u5f53 cells \u6539\u53d8\u65f6\uff0c\u91cd\u65b0\u81ea\u52a8\u5c45\u4e2d",type:"boolean",annotation:{type:"keyword",value:"boolean"}}]})}),"\n",(0,i.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,i.jsx)(y.vy.Provider,{value:["InitialCell","InitialNodeCell","NodeCell","NodeBrickCell","BaseBrickCell","BaseCell","BaseNodeCell","NodeId","NodeView","InitialNodeView","EdgeCell","BaseEdgeCell","EdgeView","LineSettings","LineType","DecoratorCell","DecoratorType","DecoratorView","Direction","LayoutType","LayoutOptions","LayoutOptionsManual","LayoutSnapOptions","SnapOptions","SnapToGridOptions","SnapToObjectOptions","LayoutOptionsDagre","BaseLayoutOptions","AlignOrigin","LayoutOptionsForce","ForceCollideOptions","SizeTuple","NodeBrickConf","EdgeLineConf","BaseEdgeLineConf","LineAnimate","ActiveTarget","ActiveTargetOfSingular","ActiveTargetOfNode","ActiveTargetOfEdge","ActiveTargetOfDecorator","ActiveTargetOfMulti","RangeTuple","CellContextMenuDetail","Cell"],children:(0,i.jsx)(p.Z,{events:[{name:"activeTarget.change",detail:{type:"ActiveTarget | null",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"ActiveTarget"}},{type:"keyword",value:"null"}]}}},{name:"cell.contextmenu",detail:{type:"CellContextMenuDetail",annotation:{type:"reference",typeName:{type:"identifier",name:"CellContextMenuDetail"}}}},{name:"cell.click",detail:{type:"CellContextMenuDetail",annotation:{type:"reference",typeName:{type:"identifier",name:"CellContextMenuDetail"}}}}]})}),"\n",(0,i.jsx)(n.h2,{id:"type-references",children:"Type references"}),"\n",(0,i.jsx)(d.Z,{types:[{type:"typeAlias",name:"InitialCell",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"InitialNodeCell"}},{type:"reference",typeName:{type:"identifier",name:"EdgeCell"}},{type:"reference",typeName:{type:"identifier",name:"DecoratorCell"}}]}},{type:"typeAlias",name:"InitialNodeCell",annotation:{type:"intersection",types:[{type:"reference",typeName:{type:"identifier",name:"Omit"},typeParameters:{type:"typeParameterInstantiation",params:[{type:"reference",typeName:{type:"identifier",name:"NodeCell"}},{type:"jsLiteral",value:"view"}]}},{type:"typeLiteral",members:[{type:"propertySignature",key:{type:"identifier",name:"view"},annotation:{type:"reference",typeName:{type:"identifier",name:"InitialNodeView"}},optional:!0,computed:!1}]}]}},{type:"typeAlias",name:"NodeCell",annotation:{type:"reference",typeName:{type:"identifier",name:"NodeBrickCell"}}},{type:"typeAlias",name:"NodeBrickCell",annotation:{type:"intersection",types:[{type:"reference",typeName:{type:"identifier",name:"BaseBrickCell"}},{type:"reference",typeName:{type:"identifier",name:"BaseNodeCell"}}]}},{type:"interface",name:"BaseBrickCell",body:[{type:"propertySignature",key:{type:"identifier",name:"tag"},annotation:{type:"jsLiteral",value:"brick"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"useBrick"},annotation:{type:"reference",typeName:{type:"identifier",name:"UseSingleBrickConf"}},optional:!0,computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"BaseCell"}}]},{type:"interface",name:"BaseCell",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"union",types:[{type:"jsLiteral",value:"node"},{type:"jsLiteral",value:"edge"},{type:"jsLiteral",value:"decorator"}]},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"data"},annotation:{type:"keyword",value:"unknown"},optional:!0,computed:!1}]},{type:"interface",name:"BaseNodeCell",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"jsLiteral",value:"node"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"id"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"containerId"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"view"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeView"}},computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"BaseCell"}}]},{type:"typeAlias",name:"NodeId",annotation:{type:"keyword",value:"string"}},{type:"interface",name:"NodeView",body:[{type:"propertySignature",key:{type:"identifier",name:"width"},annotation:{type:"keyword",value:"number"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"height"},annotation:{type:"keyword",value:"number"},computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"InitialNodeView"}}]},{type:"interface",name:"InitialNodeView",body:[{type:"propertySignature",key:{type:"identifier",name:"x"},annotation:{type:"keyword",value:"number"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"y"},annotation:{type:"keyword",value:"number"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"width"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"height"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1}]},{type:"typeAlias",name:"EdgeCell",annotation:{type:"reference",typeName:{type:"identifier",name:"BaseEdgeCell"}}},{type:"interface",name:"BaseEdgeCell",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"jsLiteral",value:"edge"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"source"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"target"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"view"},annotation:{type:"reference",typeName:{type:"identifier",name:"EdgeView"}},optional:!0,computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"BaseCell"}}]},{type:"interface",name:"EdgeView",body:[{type:"propertySignature",key:{type:"identifier",name:"exitPosition"},annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"NodePosition"}},{type:"keyword",value:"null"}]},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"entryPosition"},annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"NodePosition"}},{type:"keyword",value:"null"}]},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"vertices"},annotation:{type:"union",types:[{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"NodePosition"}}},{type:"keyword",value:"null"}]},optional:!0,computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"LineSettings"}}]},{type:"interface",name:"LineSettings",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"reference",typeName:{type:"identifier",name:"LineType"}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"curveType"},annotation:{type:"reference",typeName:{type:"identifier",name:"CurveType"}},optional:!0,computed:!1}]},{type:"typeAlias",name:"LineType",annotation:{type:"union",types:[{type:"jsLiteral",value:"straight"},{type:"jsLiteral",value:"curve"},{type:"jsLiteral",value:"polyline"}]}},{type:"interface",name:"DecoratorCell",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"jsLiteral",value:"decorator"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"decorator"},annotation:{type:"reference",typeName:{type:"identifier",name:"DecoratorType"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"id"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"view"},annotation:{type:"reference",typeName:{type:"identifier",name:"DecoratorView"}},computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"BaseCell"}}]},{type:"typeAlias",name:"DecoratorType",annotation:{type:"union",types:[{type:"jsLiteral",value:"text"},{type:"jsLiteral",value:"area"},{type:"jsLiteral",value:"container"}]}},{type:"interface",name:"DecoratorView",body:[{type:"propertySignature",key:{type:"identifier",name:"text"},annotation:{type:"keyword",value:"string"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"direction"},annotation:{type:"reference",typeName:{type:"identifier",name:"Direction"}},optional:!0,computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"NodeView"}}]},{type:"typeAlias",name:"Direction",annotation:{type:"union",types:[{type:"jsLiteral",value:"top"},{type:"jsLiteral",value:"right"},{type:"jsLiteral",value:"bottom"},{type:"jsLiteral",value:"left"}]}},{type:"typeAlias",name:"LayoutType",annotation:{type:"union",types:[{type:"jsLiteral",value:"manual"},{type:"jsLiteral",value:"force"},{type:"jsLiteral",value:"dagre"},{type:"keyword",value:"undefined"}]}},{type:"typeAlias",name:"LayoutOptions",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"LayoutOptionsManual"}},{type:"reference",typeName:{type:"identifier",name:"LayoutOptionsDagre"}},{type:"reference",typeName:{type:"identifier",name:"LayoutOptionsForce"}}]}},{type:"interface",name:"LayoutOptionsManual",body:[],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"LayoutSnapOptions"}}]},{type:"interface",name:"LayoutSnapOptions",body:[{type:"propertySignature",key:{type:"identifier",name:"snap"},annotation:{type:"union",types:[{type:"keyword",value:"boolean"},{type:"reference",typeName:{type:"identifier",name:"SnapOptions"}}]},optional:!0,computed:!1,description:"Snap options. Setting to true means enable all snap options"}]},{type:"interface",name:"SnapOptions",body:[{type:"propertySignature",key:{type:"identifier",name:"grid"},annotation:{type:"union",types:[{type:"keyword",value:"boolean"},{type:"reference",typeName:{type:"identifier",name:"SnapToGridOptions"}}]},optional:!0,computed:!1,description:"Snap to grid"},{type:"propertySignature",key:{type:"identifier",name:"object"},annotation:{type:"union",types:[{type:"keyword",value:"boolean"},{type:"reference",typeName:{type:"identifier",name:"SnapToObjectOptions"}}]},optional:!0,computed:!1,description:"Snap to object"}]},{type:"interface",name:"SnapToGridOptions",body:[{type:"propertySignature",key:{type:"identifier",name:"size"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1,description:""}]},{type:"interface",name:"SnapToObjectOptions",body:[{type:"propertySignature",key:{type:"identifier",name:"distance"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1,description:""}]},{type:"interface",name:"LayoutOptionsDagre",body:[{type:"propertySignature",key:{type:"identifier",name:"rankdir"},annotation:{type:"union",types:[{type:"jsLiteral",value:"TB"},{type:"jsLiteral",value:"BT"},{type:"jsLiteral",value:"LR"},{type:"jsLiteral",value:"RL"}]},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"ranksep"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"edgesep"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"nodesep"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"align"},annotation:{type:"union",types:[{type:"jsLiteral",value:"UL"},{type:"jsLiteral",value:"UR"},{type:"jsLiteral",value:"DL"},{type:"jsLiteral",value:"DR"}]},optional:!0,computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"BaseLayoutOptions"}}]},{type:"interface",name:"BaseLayoutOptions",body:[{type:"propertySignature",key:{type:"identifier",name:"nodePadding"},annotation:{type:"reference",typeName:{type:"identifier",name:"PartialRectTuple"}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"alignOrigin"},annotation:{type:"reference",typeName:{type:"identifier",name:"AlignOrigin"}},optional:!0,computed:!1,description:"\u6839\u636e\u8282\u70b9\u4ec0\u4e48\u4f4d\u7f6e\u8fdb\u884c\u5bf9\u9f50\uff0c\u652f\u6301\u5173\u952e\u5b57\u3001\u767e\u5206\u6bd4\u548c\u6bd4\u4f8b\u503c\u3002\n\u7b2c\u4e00\u4e2a\u503c\u4e3a x \u8f74\uff0c\u7b2c\u4e8c\u4e2a\u503c\u4e3a y \u8f74\u3002\n\u4f7f\u7528\u6570\u5b57\u65f6\uff0c\u8868\u793a\u76f8\u5bf9\u4e8e\u8282\u70b9\u7684\u5bbd\u9ad8\u7684\u6bd4\u4f8b\u3002\n\n\u6ce8\u610f\uff0c\u8282\u70b9\u5bbd\u9ad8\u5c06\u5305\u542b nodePadding \u7684\u503c\u3002"}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"LayoutSnapOptions"}}]},{type:"typeAlias",name:"AlignOrigin",annotation:{type:"tuple",elementTypes:[{type:"namedTupleMember",label:"x",optional:!1,elementType:{type:"union",types:[{type:"keyword",value:"string"},{type:"keyword",value:"number"}]}},{type:"namedTupleMember",label:"y",optional:!1,elementType:{type:"union",types:[{type:"keyword",value:"string"},{type:"keyword",value:"number"}]}}]}},{type:"interface",name:"LayoutOptionsForce",body:[{type:"propertySignature",key:{type:"identifier",name:"collide"},annotation:{type:"union",types:[{type:"keyword",value:"boolean"},{type:"reference",typeName:{type:"identifier",name:"ForceCollideOptions"}}]},optional:!0,computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"BaseLayoutOptions"}}]},{type:"interface",name:"ForceCollideOptions",body:[{type:"propertySignature",key:{type:"identifier",name:"radiusDiff"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"strength"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"iterations"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1}]},{type:"typeAlias",name:"SizeTuple",annotation:{type:"tuple",elementTypes:[{type:"namedTupleMember",label:"width",optional:!1,elementType:{type:"keyword",value:"number"}},{type:"namedTupleMember",label:"height",optional:!1,elementType:{type:"keyword",value:"number"}}]}},{type:"interface",name:"NodeBrickConf",body:[{type:"propertySignature",key:{type:"identifier",name:"useBrick"},annotation:{type:"reference",typeName:{type:"identifier",name:"UseSingleBrickConf"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"if"},annotation:{type:"union",types:[{type:"keyword",value:"string"},{type:"keyword",value:"boolean"},{type:"keyword",value:"null"}]},optional:!0,computed:!1}]},{type:"interface",name:"EdgeLineConf",body:[{type:"propertySignature",key:{type:"identifier",name:"if"},annotation:{type:"union",types:[{type:"keyword",value:"string"},{type:"keyword",value:"boolean"},{type:"keyword",value:"null"}]},optional:!0,computed:!1}],extends:[{type:"expressionWithTypeArguments",expression:{type:"identifier",name:"BaseEdgeLineConf"}}]},{type:"interface",name:"BaseEdgeLineConf",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"reference",typeName:{type:"identifier",name:"LineType"}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"curveType"},annotation:{type:"reference",typeName:{type:"identifier",name:"CurveType"}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"dashed"},annotation:{type:"keyword",value:"boolean"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"dotted"},annotation:{type:"keyword",value:"boolean"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"strokeWidth"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"strokeColor"},annotation:{type:"keyword",value:"string"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"interactStrokeWidth"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"parallelGap"},annotation:{type:"keyword",value:"number"},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"markers"},annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"LineMarkerConf"}}},optional:!0,computed:!1},{type:"propertySignature",key:{type:"identifier",name:"showStartArrow"},annotation:{type:"keyword",value:"boolean"},optional:!0,computed:!1,description:"\u5df2\u5e9f\u5f03\uff0c\u4f7f\u7528markers\u4ee3\u66ff\uff0c\u914d\u7f6e\u4e86\u5bf9\u5e94\u7684\u7bad\u5934\u6d4b\u5219\u663e\u793a"},{type:"propertySignature",key:{type:"identifier",name:"showEndArrow"},annotation:{type:"keyword",value:"boolean"},optional:!0,computed:!1,description:"\u5df2\u5e9f\u5f03"},{type:"propertySignature",key:{type:"identifier",name:"animate"},annotation:{type:"reference",typeName:{type:"identifier",name:"LineAnimate"}},optional:!0,computed:!1}]},{type:"interface",name:"LineAnimate",body:[{type:"propertySignature",key:{type:"identifier",name:"useAnimate"},annotation:{type:"keyword",value:"boolean"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"duration"},annotation:{type:"keyword",value:"number"},computed:!1}]},{type:"typeAlias",name:"ActiveTarget",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"ActiveTargetOfSingular"}},{type:"reference",typeName:{type:"identifier",name:"ActiveTargetOfMulti"}}]}},{type:"typeAlias",name:"ActiveTargetOfSingular",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"ActiveTargetOfNode"}},{type:"reference",typeName:{type:"identifier",name:"ActiveTargetOfEdge"}},{type:"reference",typeName:{type:"identifier",name:"ActiveTargetOfDecorator"}}]}},{type:"interface",name:"ActiveTargetOfNode",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"jsLiteral",value:"node"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"id"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1}]},{type:"interface",name:"ActiveTargetOfEdge",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"jsLiteral",value:"edge"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"source"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"target"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1}]},{type:"interface",name:"ActiveTargetOfDecorator",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"jsLiteral",value:"decorator"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"id"},annotation:{type:"reference",typeName:{type:"identifier",name:"NodeId"}},computed:!1}]},{type:"interface",name:"ActiveTargetOfMulti",body:[{type:"propertySignature",key:{type:"identifier",name:"type"},annotation:{type:"jsLiteral",value:"multi"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"targets"},annotation:{type:"array",elementType:{type:"reference",typeName:{type:"identifier",name:"ActiveTargetOfSingular"}}},computed:!1}]},{type:"typeAlias",name:"RangeTuple",annotation:{type:"tuple",elementTypes:[{type:"namedTupleMember",label:"min",optional:!1,elementType:{type:"keyword",value:"number"}},{type:"namedTupleMember",label:"max",optional:!1,elementType:{type:"keyword",value:"number"}}]}},{type:"interface",name:"CellContextMenuDetail",body:[{type:"propertySignature",key:{type:"identifier",name:"cell"},annotation:{type:"reference",typeName:{type:"identifier",name:"Cell"}},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"clientX"},annotation:{type:"keyword",value:"number"},computed:!1},{type:"propertySignature",key:{type:"identifier",name:"clientY"},annotation:{type:"keyword",value:"number"},computed:!1}]},{type:"typeAlias",name:"Cell",annotation:{type:"union",types:[{type:"reference",typeName:{type:"identifier",name:"NodeCell"}},{type:"reference",typeName:{type:"identifier",name:"EdgeCell"}},{type:"reference",typeName:{type:"identifier",name:"DecoratorCell"}}]}}]})]})}function f(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}function v(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);